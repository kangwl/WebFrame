<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lind.DDD</name>
    </assembly>
    <members>
        <member name="P:Abot.Core.AuthorizationElement.IsAlwaysLogin">
            <summary>
            Defines whatewer each request shold be autorized via login 
            </summary>
        </member>
        <member name="P:Abot.Core.AuthorizationElement.LoginUser">
            <summary>
            The user name to be used for autorization 
            </summary>
        </member>
        <member name="P:Abot.Core.AuthorizationElement.LoginPassword">
            <summary>
            The password to be used for autorization 
            </summary>
        </member>
        <member name="T:Abot.Core.CompactCrawledUrlRepository">
            <summary>
            Implementation that stores a numeric hash of the url instead of the url itself to use for lookups. This should save space when the crawled url list gets very long. 
            </summary>
        </member>
        <member name="M:Abot.Core.CompactCrawledUrlRepository.Contains(System.Uri)">
            <inheritDoc />
        </member>
        <member name="M:Abot.Core.CompactCrawledUrlRepository.AddIfNew(System.Uri)">
            <inheritDoc />
        </member>
        <member name="M:Abot.Core.CompactCrawledUrlRepository.Dispose">
            <inheritDoc />
        </member>
        <member name="T:Abot.Core.ICrawlDecisionMaker">
            <summary>
            Determines what pages should be crawled, whether the raw content should be downloaded and if the links on a page should be crawled
            </summary>
        </member>
        <member name="M:Abot.Core.ICrawlDecisionMaker.ShouldCrawlPage(Abot.Poco.PageToCrawl,Abot.Poco.CrawlContext)">
            <summary>
            Decides whether the page should be crawled
            </summary>
        </member>
        <member name="M:Abot.Core.ICrawlDecisionMaker.ShouldCrawlPageLinks(Abot.Poco.CrawledPage,Abot.Poco.CrawlContext)">
            <summary>
            Decides whether the page's links should be crawled
            </summary>
        </member>
        <member name="M:Abot.Core.ICrawlDecisionMaker.ShouldDownloadPageContent(Abot.Poco.CrawledPage,Abot.Poco.CrawlContext)">
            <summary>
            Decides whether the page's content should be dowloaded
            </summary>
        </member>
        <member name="M:Abot.Core.ICrawlDecisionMaker.ShouldRecrawlPage(Abot.Poco.CrawledPage,Abot.Poco.CrawlContext)">
            <summary>
            Decides whether the page should be re-crawled on non-200 status
            </summary>
        </member>
        <member name="T:Abot.Core.CSQueryHyperlinkParser">
            <summary>
            Parser that uses CsQuery https://github.com/jamietre/CsQuery to parse page links
            </summary>
        </member>
        <member name="T:Abot.Core.IHyperLinkParser">
            <summary>
            Handles parsing hyperlinks out of the raw html
            </summary>
        </member>
        <member name="M:Abot.Core.IHyperLinkParser.GetLinks(Abot.Poco.CrawledPage)">
            <summary>
            Parses html to extract hyperlinks, converts each into an absolute url
            </summary>
        </member>
        <member name="M:Abot.Core.HyperLinkParser.GetLinks(Abot.Poco.CrawledPage)">
            <summary>
            Parses html to extract hyperlinks, converts each into an absolute url
            </summary>
        </member>
        <member name="T:Abot.Core.IDomainRateLimiter">
            <summary>
            Rate limits or throttles on a per domain basis
            </summary>
        </member>
        <member name="M:Abot.Core.IDomainRateLimiter.RateLimit(System.Uri)">
            <summary>
            If the domain of the param has been flagged for rate limiting, it will be rate limited according to the configured minimum crawl delay
            </summary>
        </member>
        <member name="M:Abot.Core.IDomainRateLimiter.AddDomain(System.Uri,System.Int64)">
            <summary>
            Add a domain entry so that domain may be rate limited according the the param minumum crawl delay
            </summary>
        </member>
        <member name="T:Abot.Core.HapHyperLinkParser">
            <summary>
            Parser that uses Html Agility Pack http://htmlagilitypack.codeplex.com/ to parse page links
            </summary>
        </member>
        <member name="M:Abot.Core.IPageRequester.MakeRequest(System.Uri)">
            <summary>
            Make an http web request to the url and download its content
            </summary>
        </member>
        <member name="M:Abot.Core.IPageRequester.MakeRequest(System.Uri,System.Func{Abot.Poco.CrawledPage,Abot.Poco.CrawlDecision})">
            <summary>
            Make an http web request to the url and download its content based on the param func decision
            </summary>
        </member>
        <member name="M:Abot.Core.PageRequester.MakeRequest(System.Uri)">
            <summary>
            Make an http web request to the url and download its content
            </summary>
        </member>
        <member name="M:Abot.Core.PageRequester.MakeRequest(System.Uri,System.Func{Abot.Poco.CrawledPage,Abot.Poco.CrawlDecision})">
            <summary>
            Make an http web request to the url and download its content based on the param func decision
            </summary>
        </member>
        <member name="M:Abot.Core.IRobotsDotText.GetCrawlDelay(System.String)">
            <summary>
            Gets the number of seconds to delay between internal page crawls. Returns 0 by default.
            </summary>
        </member>
        <member name="M:Abot.Core.IRobotsDotText.IsUrlAllowed(System.String,System.String)">
            <summary>
            Whether the spider is "allowed" to crawl the param link
            </summary>
        </member>
        <member name="M:Abot.Core.IRobotsDotText.IsUserAgentAllowed(System.String)">
            <summary>
            Whether the user agent is "allowed" to crawl the root url
            </summary>
        </member>
        <member name="T:Abot.Core.IRobotsDotTextFinder">
            <summary>
            Finds and builds the robots.txt file abstraction
            </summary>
        </member>
        <member name="M:Abot.Core.IRobotsDotTextFinder.Find(System.Uri)">
            <summary>
            Finds the robots.txt file using the rootUri. 
            If rootUri is http://yahoo.com, it will look for robots at http://yahoo.com/robots.txt.
            If rootUri is http://music.yahoo.com, it will look for robots at http://music.yahoo.com/robots.txt
            </summary>
            <param name="rootUri">The root domain</param>
            <returns>Object representing the robots.txt file or returns null</returns>
        </member>
        <member name="T:Abot.Core.IScheduler">
            <summary>
            Handles managing the priority of what pages need to be crawled
            </summary>
        </member>
        <member name="M:Abot.Core.IScheduler.Add(Abot.Poco.PageToCrawl)">
            <summary>
            Schedules the param to be crawled
            </summary>
        </member>
        <member name="M:Abot.Core.IScheduler.Add(System.Collections.Generic.IEnumerable{Abot.Poco.PageToCrawl})">
            <summary>
            Schedules the param to be crawled
            </summary>
        </member>
        <member name="M:Abot.Core.IScheduler.GetNext">
            <summary>
            Gets the next page to crawl
            </summary>
        </member>
        <member name="M:Abot.Core.IScheduler.Clear">
            <summary>
            Clear all currently scheduled pages
            </summary>
        </member>
        <member name="M:Abot.Core.IScheduler.AddKnownUri(System.Uri)">
            <summary>
            Add the Url to the list of crawled Url without scheduling it to be crawled.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Abot.Core.IScheduler.IsUriKnown(System.Uri)">
            <summary>
            Returns whether or not the specified Uri was already scheduled to be crawled or simply added to the
            list of known Uris.
            </summary>
        </member>
        <member name="P:Abot.Core.IScheduler.Count">
            <summary>
            Count of remaining items that are currently scheduled
            </summary>
        </member>
        <member name="M:Abot.Crawler.IWebCrawler.ShouldCrawlPage(System.Func{Abot.Poco.PageToCrawl,Abot.Poco.CrawlContext,Abot.Poco.CrawlDecision})">
            <summary>
            Synchronous method that registers a delegate to be called to determine whether a page should be crawled or not
            </summary>
        </member>
        <member name="M:Abot.Crawler.IWebCrawler.ShouldDownloadPageContent(System.Func{Abot.Poco.CrawledPage,Abot.Poco.CrawlContext,Abot.Poco.CrawlDecision})">
            <summary>
            Synchronous method that registers a delegate to be called to determine whether the page's content should be dowloaded
            </summary>
            <param name="shouldDownloadPageContent"></param>
        </member>
        <member name="M:Abot.Crawler.IWebCrawler.ShouldCrawlPageLinks(System.Func{Abot.Poco.CrawledPage,Abot.Poco.CrawlContext,Abot.Poco.CrawlDecision})">
            <summary>
            Synchronous method that registers a delegate to be called to determine whether a page's links should be crawled or not
            </summary>
            <param name="shouldCrawlPageLinksDelegate"></param>
        </member>
        <member name="M:Abot.Crawler.IWebCrawler.ShouldScheduleLink(System.Func{System.Uri,Abot.Poco.CrawledPage,Abot.Poco.CrawlContext,System.Boolean})">
            <summary>
            Synchronous method that registers a delegate to be called to determine whether a cerain link on a page should be scheduled to be crawled
            </summary>
        </member>
        <member name="M:Abot.Crawler.IWebCrawler.ShouldRecrawlPage(System.Func{Abot.Poco.CrawledPage,Abot.Poco.CrawlContext,Abot.Poco.CrawlDecision})">
            <summary>
            Synchronous method that registers a delegate to be called to determine whether a page should be recrawled
            </summary>
        </member>
        <member name="M:Abot.Crawler.IWebCrawler.IsInternalUri(System.Func{System.Uri,System.Uri,System.Boolean})">
            <summary>
            Synchronous method that registers a delegate to be called to determine whether the 1st uri param is considered an internal uri to the second uri param
            </summary>
            <param name="decisionMaker delegate"></param>
        </member>
        <member name="M:Abot.Crawler.IWebCrawler.Crawl(System.Uri)">
            <summary>
            Begins a crawl using the uri param
            </summary>
        </member>
        <member name="M:Abot.Crawler.IWebCrawler.Crawl(System.Uri,System.Threading.CancellationTokenSource)">
            <summary>
            Begins a crawl using the uri param, and can be cancelled using the CancellationToken
            </summary>
        </member>
        <member name="E:Abot.Crawler.IWebCrawler.PageCrawlStarting">
            <summary>
            Synchronous event that is fired before a page is crawled.
            </summary>
        </member>
        <member name="E:Abot.Crawler.IWebCrawler.PageCrawlCompleted">
            <summary>
            Synchronous event that is fired when an individual page has been crawled.
            </summary>
        </member>
        <member name="E:Abot.Crawler.IWebCrawler.PageCrawlDisallowed">
            <summary>
            Synchronous event that is fired when the ICrawlDecisionMaker.ShouldCrawl impl returned false. This means the page or its links were not crawled.
            </summary>
        </member>
        <member name="E:Abot.Crawler.IWebCrawler.PageLinksCrawlDisallowed">
            <summary>
            Synchronous event that is fired when the ICrawlDecisionMaker.ShouldCrawlLinks impl returned false. This means the page's links were not crawled.
            </summary>
        </member>
        <member name="E:Abot.Crawler.IWebCrawler.PageCrawlStartingAsync">
            <summary>
            Asynchronous event that is fired before a page is crawled.
            </summary>
        </member>
        <member name="E:Abot.Crawler.IWebCrawler.PageCrawlCompletedAsync">
            <summary>
            Asynchronous event that is fired when an individual page has been crawled.
            </summary>
        </member>
        <member name="E:Abot.Crawler.IWebCrawler.PageCrawlDisallowedAsync">
            <summary>
            Asynchronous event that is fired when the ICrawlDecisionMaker.ShouldCrawl impl returned false. This means the page or its links were not crawled.
            </summary>
        </member>
        <member name="E:Abot.Crawler.IWebCrawler.PageLinksCrawlDisallowedAsync">
            <summary>
            Asynchronous event that is fired when the ICrawlDecisionMaker.ShouldCrawlLinks impl returned false. This means the page's links were not crawled.
            </summary>
        </member>
        <member name="P:Abot.Crawler.IWebCrawler.CrawlBag">
            <summary>
            Dynamic object that can hold any value that needs to be available in the crawl context
            </summary>
        </member>
        <member name="M:Abot.Crawler.WebCrawler.#ctor">
            <summary>
            Creates a crawler instance with the default settings and implementations.
            </summary>
        </member>
        <member name="M:Abot.Crawler.WebCrawler.#ctor(Abot.Poco.CrawlConfiguration,Abot.Core.ICrawlDecisionMaker,Abot.Util.IThreadManager,Abot.Core.IScheduler,Abot.Core.IPageRequester,Abot.Core.IHyperLinkParser,Abot.Util.IMemoryManager)">
            <summary>
            Creates a crawler instance with custom settings or implementation. Passing in null for all params is the equivalent of the empty constructor.
            </summary>
            <param name="threadManager">Distributes http requests over multiple threads</param>
            <param name="scheduler">Decides what link should be crawled next</param>
            <param name="pageRequester">Makes the raw http requests</param>
            <param name="hyperLinkParser">Parses a crawled page for it's hyperlinks</param>
            <param name="crawlDecisionMaker">Decides whether or not to crawl a page or that page's links</param>
            <param name="crawlConfiguration">Configurable crawl values</param>
            <param name="memoryManager">Checks the memory usage of the host process</param>
        </member>
        <member name="M:Abot.Crawler.WebCrawler.Crawl(System.Uri)">
            <summary>
            Begins a synchronous crawl using the uri param, subscribe to events to process data as it becomes available
            </summary>
        </member>
        <member name="M:Abot.Crawler.WebCrawler.Crawl(System.Uri,System.Threading.CancellationTokenSource)">
            <summary>
            Begins a synchronous crawl using the uri param, subscribe to events to process data as it becomes available
            </summary>
        </member>
        <member name="M:Abot.Crawler.WebCrawler.ShouldCrawlPage(System.Func{Abot.Poco.PageToCrawl,Abot.Poco.CrawlContext,Abot.Poco.CrawlDecision})">
            <summary>
            Synchronous method that registers a delegate to be called to determine whether a page should be crawled or not
            </summary>
        </member>
        <member name="M:Abot.Crawler.WebCrawler.ShouldDownloadPageContent(System.Func{Abot.Poco.CrawledPage,Abot.Poco.CrawlContext,Abot.Poco.CrawlDecision})">
            <summary>
            Synchronous method that registers a delegate to be called to determine whether the page's content should be dowloaded
            </summary>
            <param name="shouldDownloadPageContent"></param>
        </member>
        <member name="M:Abot.Crawler.WebCrawler.ShouldCrawlPageLinks(System.Func{Abot.Poco.CrawledPage,Abot.Poco.CrawlContext,Abot.Poco.CrawlDecision})">
            <summary>
            Synchronous method that registers a delegate to be called to determine whether a page's links should be crawled or not
            </summary>
            <param name="shouldCrawlPageLinksDelegate"></param>
        </member>
        <member name="M:Abot.Crawler.WebCrawler.ShouldScheduleLink(System.Func{System.Uri,Abot.Poco.CrawledPage,Abot.Poco.CrawlContext,System.Boolean})">
            <summary>
            Synchronous method that registers a delegate to be called to determine whether a cerain link on a page should be scheduled to be crawled
            </summary>
        </member>
        <member name="M:Abot.Crawler.WebCrawler.ShouldRecrawlPage(System.Func{Abot.Poco.CrawledPage,Abot.Poco.CrawlContext,Abot.Poco.CrawlDecision})">
            <summary>
            Synchronous method that registers a delegate to be called to determine whether a page should be recrawled or not
            </summary>
        </member>
        <member name="M:Abot.Crawler.WebCrawler.IsInternalUri(System.Func{System.Uri,System.Uri,System.Boolean})">
            <summary>
            Synchronous method that registers a delegate to be called to determine whether the 1st uri param is considered an internal uri to the second uri param
            </summary>
            <param name="decisionMaker delegate"></param>     
        </member>
        <member name="M:Abot.Crawler.WebCrawler.ValidateRootUriForRedirection(Abot.Poco.CrawledPage)">
            <summary>
            Validate that the Root page was not redirected. If the root page is redirected, we assume that the root uri
            should be changed to the uri where it was redirected.
            </summary>
        </member>
        <member name="M:Abot.Crawler.WebCrawler.ExtractRedirectUri(Abot.Poco.CrawledPage)">
            <summary>
            Retrieve the URI where the specified crawled page was redirected.
            </summary>
            <remarks>
            If HTTP auto redirections is disabled, this value is stored in the 'Location' header of the response.
            If auto redirections is enabled, this value is stored in the response's ResponseUri property.
            </remarks>
        </member>
        <member name="P:Abot.Crawler.WebCrawler.CrawlBag">
            <summary>
            Dynamic object that can hold any value that needs to be available in the crawl context
            </summary>
        </member>
        <member name="E:Abot.Crawler.WebCrawler.PageCrawlStarting">
            <summary>
            Synchronous event that is fired before a page is crawled.
            </summary>
        </member>
        <member name="E:Abot.Crawler.WebCrawler.PageCrawlCompleted">
            <summary>
            Synchronous event that is fired when an individual page has been crawled.
            </summary>
        </member>
        <member name="E:Abot.Crawler.WebCrawler.PageCrawlDisallowed">
            <summary>
            Synchronous event that is fired when the ICrawlDecisionMaker.ShouldCrawl impl returned false. This means the page or its links were not crawled.
            </summary>
        </member>
        <member name="E:Abot.Crawler.WebCrawler.PageLinksCrawlDisallowed">
            <summary>
            Synchronous event that is fired when the ICrawlDecisionMaker.ShouldCrawlLinks impl returned false. This means the page's links were not crawled.
            </summary>
        </member>
        <member name="E:Abot.Crawler.WebCrawler.PageCrawlStartingAsync">
            <summary>
            Asynchronous event that is fired before a page is crawled.
            </summary>
        </member>
        <member name="E:Abot.Crawler.WebCrawler.PageCrawlCompletedAsync">
            <summary>
            Asynchronous event that is fired when an individual page has been crawled.
            </summary>
        </member>
        <member name="E:Abot.Crawler.WebCrawler.PageCrawlDisallowedAsync">
            <summary>
            Asynchronous event that is fired when the ICrawlDecisionMaker.ShouldCrawl impl returned false. This means the page or its links were not crawled.
            </summary>
        </member>
        <member name="E:Abot.Crawler.WebCrawler.PageLinksCrawlDisallowedAsync">
            <summary>
            Asynchronous event that is fired when the ICrawlDecisionMaker.ShouldCrawlLinks impl returned false. This means the page's links were not crawled.
            </summary>
        </member>
        <member name="T:Abot.Crawler.PoliteWebCrawler">
            <summary>
            Extends the WebCrawler class and added politeness features like crawl delays and respecting robots.txt files. 
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.MaxConcurrentThreads">
            <summary>
            Max concurrent threads to use for http requests
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.MaxPagesToCrawl">
            <summary>
            Maximum number of pages to crawl.
            This value is required.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.MaxPagesToCrawlPerDomain">
            <summary>
            Maximum number of pages to crawl per domain
            If zero, this setting has no effect.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.MaxPageSizeInBytes">
            <summary>
            Maximum size of page. If the page size is above this value, it will not be downloaded or processed
            If zero, this setting has no effect.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.MaxRobotsDotTextCrawlDelayInSeconds">
            <summary>
            The maximum numer of seconds to respect in the robots.txt "Crawl-delay: X" directive. 
            IsRespectRobotsDotTextEnabled must be true for this value to be used.
            If zero, will use whatever the robots.txt crawl delay requests no matter how high the value is.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.UserAgentString">
            <summary>
            The user agent string to use for http requests
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.CrawlTimeoutSeconds">
            <summary>
            Maximum seconds before the crawl times out and stops. 
            If zero, this setting has no effect.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.ConfigurationExtensions">
            <summary>
            Dictionary that stores additional keyvalue pairs that can be accessed throught the crawl pipeline
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.IsUriRecrawlingEnabled">
            <summary>
            Whether Uris should be crawled more than once. This is not common and should be false for most scenarios
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.IsExternalPageCrawlingEnabled">
            <summary>
            Whether pages external to the root uri should be crawled
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.IsExternalPageLinksCrawlingEnabled">
            <summary>
            Whether pages external to the root uri should have their links crawled. NOTE: IsExternalPageCrawlEnabled must be true for this setting to have any effect
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.IsRespectUrlNamedAnchorOrHashbangEnabled">
            <summary>
            Whether or not url named anchors or hashbangs are considered part of the url. If false, they will be ignored. If true, they will be considered part of the url.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.DownloadableContentTypes">
            <summary>
            A comma seperated string that has content types that should have their page content downloaded. For each page, the content type is checked to see if it contains any of the values defined here.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.HttpServicePointConnectionLimit">
            <summary>
            Gets or sets the maximum number of concurrent connections allowed by a System.Net.ServicePoint. The system default is 2. This means that only 2 concurrent http connections can be open to the same host.
            If zero, this setting has no effect.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.HttpRequestTimeoutInSeconds">
            <summary>
            Gets or sets the time-out value in milliseconds for the System.Net.HttpWebRequest.GetResponse() and System.Net.HttpWebRequest.GetRequestStream() methods.
            If zero, this setting has no effect.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.HttpRequestMaxAutoRedirects">
            <summary>
            Gets or sets the maximum number of redirects that the request follows.
            If zero, this setting has no effect.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.IsHttpRequestAutoRedirectsEnabled">
            <summary>
            Gets or sets a value that indicates whether the request should follow redirection
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.IsHttpRequestAutomaticDecompressionEnabled">
            <summary>
            Gets or sets a value that indicates gzip and deflate will be automatically accepted and decompressed
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.IsSendingCookiesEnabled">
            <summary>
            Whether the cookies should be set and resent with every request
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.IsSslCertificateValidationEnabled">
            <summary>
            Whether or not to validate the server SSL certificate. If true, the default validation will be made.
            If false, the certificate validation is bypassed. This setting is useful to crawl sites with an
            invalid or expired SSL certificate.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.MinAvailableMemoryRequiredInMb">
            <summary>
            Uses closest mulitple of 16 to the value set. If there is not at least this much memory available before starting a crawl, throws InsufficientMemoryException.
            If zero, this setting has no effect.
            </summary>
            <exception cref="!:http://msdn.microsoft.com/en-us/library/system.insufficientmemoryexception.aspx">InsufficientMemoryException</exception>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.MaxMemoryUsageInMb">
            <summary>
            The max amout of memory to allow the process to use. If this limit is exceeded the crawler will stop prematurely.
            If zero, this setting has no effect.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.MaxMemoryUsageCacheTimeInSeconds">
            <summary>
            The max amount of time before refreshing the value used to determine the amount of memory being used by the process that hosts the crawler instance.
            This value has no effect if MaxMemoryUsageInMb is zero.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.MaxCrawlDepth">
            <summary>
            Maximum levels below root page to crawl. If value is 0, the homepage will be crawled but none of its links will be crawled. If the level is 1, the homepage and its links will be crawled but none of the links links will be crawled.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.IsForcedLinkParsingEnabled">
            <summary>
            Gets or sets a value that indicates whether the crawler should parse the page's links even if a CrawlDecision (like CrawlDecisionMaker.ShouldCrawlPageLinks()) determines that those links will not be crawled.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.MaxRetryCount">
            <summary>
            The max number of retries for a url if a web exception is encountered. If the value is 0, no retries will be made
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.MinRetryDelayInMilliseconds">
            <summary>
            The minimum delay between a failed http request and the next retry
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.IsRespectRobotsDotTextEnabled">
            <summary>
            Whether the crawler should retrieve and respect the robots.txt file.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.IsRespectMetaRobotsNoFollowEnabled">
            <summary>
            Whether the crawler should ignore links on pages that have a <meta name="robots" content="nofollow" /> tag
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.IsRespectHttpXRobotsTagHeaderNoFollowEnabled">
            <summary>
            Whether the crawler should ignore links on pages that have an http X-Robots-Tag header of nofollow
            </summary>
        </member>
        <!-- 对于成员“P:Abot.Poco.CrawlConfiguration.IsRespectAnchorRelNoFollowEnabled”忽略有格式错误的 XML 注释 -->
        <member name="P:Abot.Poco.CrawlConfiguration.IsIgnoreRobotsDotTextIfRootDisallowedEnabled">
            <summary>
            If true, will ignore the robots.txt file if it disallows crawling the root uri.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.RobotsDotTextUserAgentString">
            <summary>
            The user agent string to use when checking robots.txt file for specific directives.  Some examples of other crawler's user agent values are "googlebot", "slurp" etc...
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.MinCrawlDelayPerDomainMilliSeconds">
            <summary>
            The number of milliseconds to wait in between http requests to the same domain.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.IsAlwaysLogin">
            <summary>
            Defines whatewer each request shold be autorized via login 
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.LoginUser">
            <summary>
            The user name to be used for autorization 
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlConfiguration.LoginPassword">
            <summary>
            The password to be used for autorization 
            </summary>
        </member>
        <member name="F:Abot.Poco.CrawlContext.CrawledCount">
            <summary>
            total number of pages that have been crawled
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlContext.RootUri">
            <summary>
            The root of the crawl
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlContext.OriginalRootUri">
            <summary>
            The root of the crawl specified in the configuration. If the root URI was redirected to another URI,
            it will be set in RootUri.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlContext.CrawlStartDate">
            <summary>
            The datetime of the last unsuccessful http status (non 200) was requested
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlContext.CrawlCountByDomain">
            <summary>
            Threadsafe dictionary of domains and how many pages were crawled in that domain
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlContext.CrawlConfiguration">
            <summary>
            Configuration values used to determine crawl settings
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlContext.Scheduler">
            <summary>
            The scheduler that is being used
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlContext.CrawlBag">
            <summary>
            Random dynamic values
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlContext.IsCrawlStopRequested">
            <summary>
            Whether a request to stop the crawl has happened. Will clear all scheduled pages but will allow any threads that are currently crawling to complete.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlContext.IsCrawlHardStopRequested">
            <summary>
            Whether a request to hard stop the crawl has happened. Will clear all scheduled pages and cancel any threads that are currently crawling.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlContext.MemoryUsageBeforeCrawlInMb">
            <summary>
            The memory usage in mb at the start of the crawl
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlContext.MemoryUsageAfterCrawlInMb">
            <summary>
            The memory usage in mb at the end of the crawl
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlContext.CancellationTokenSource">
            <summary>
            Cancellation token used to hard stop the crawl. Will clear all scheduled pages and abort any threads that are currently crawling.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlDecision.Allow">
            <summary>
            Whether to allow the crawl decision
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlDecision.Reason">
            <summary>
            The reason the crawl decision was NOT allowed
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlDecision.ShouldStopCrawl">
            <summary>
            Whether the crawl should be stopped. Will clear all scheduled pages but will allow any threads that are currently crawling to complete.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlDecision.ShouldHardStopCrawl">
            <summary>
            Whether the crawl should be "hard stopped". Will clear all scheduled pages and cancel any threads that are currently crawling.
            </summary>
        </member>
        <member name="P:Abot.Poco.PageToCrawl.Uri">
            <summary>
            The uri of the page
            </summary>
        </member>
        <member name="P:Abot.Poco.PageToCrawl.ParentUri">
            <summary>
            The parent uri of the page
            </summary>
        </member>
        <member name="P:Abot.Poco.PageToCrawl.IsRetry">
            <summary>
            Whether http requests had to be retried more than once. This could be due to throttling or politeness.
            </summary>
        </member>
        <member name="P:Abot.Poco.PageToCrawl.RetryAfter">
            <summary>
            The time in seconds that the server sent to wait before retrying.
            </summary>
        </member>
        <member name="P:Abot.Poco.PageToCrawl.RetryCount">
            <summary>
            The number of times the http request was be retried.
            </summary>
        </member>
        <member name="P:Abot.Poco.PageToCrawl.LastRequest">
            <summary>
            The datetime that the last http request was made. Will be null unless retries are enabled.
            </summary>
        </member>
        <member name="P:Abot.Poco.PageToCrawl.IsRoot">
            <summary>
            Whether the page is the root uri of the crawl
            </summary>
        </member>
        <member name="P:Abot.Poco.PageToCrawl.IsInternal">
            <summary>
            Whether the page is internal to the root uri of the crawl
            </summary>
        </member>
        <member name="P:Abot.Poco.PageToCrawl.CrawlDepth">
            <summary>
            The depth from the root of the crawl. If this page is the homepage this value will be zero, if this page was found on the homepage this value will be 1 and so on.
            </summary>
        </member>
        <member name="P:Abot.Poco.PageToCrawl.PageBag">
            <summary>
            Can store values of any type. Useful for adding custom values to the CrawledPage dynamically from event subscriber code
            </summary>
        </member>
        <member name="P:Abot.Poco.PageToCrawl.RedirectedFrom">
            <summary>
            The uri that this page was redirected from. If null then it was not part of the redirect chain
            </summary>
        </member>
        <member name="P:Abot.Poco.PageToCrawl.RedirectPosition">
            <summary>
            The position in the redirect chain. The first redirect is position 1, the next one is 2 and so on.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawledPage.RawContent">
            <summary>
            The raw content of the request
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawledPage.HtmlDocument">
            <summary>
            Lazy loaded Html Agility Pack (http://htmlagilitypack.codeplex.com/) document that can be used to retrieve/modify html elements on the crawled page.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawledPage.CsQueryDocument">
            <summary>
            Lazy loaded CsQuery (https://github.com/jamietre/CsQuery) document that can be used to retrieve/modify html elements on the crawled page.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawledPage.HttpWebRequest">
            <summary>
            Web request sent to the server
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawledPage.HttpWebResponse">
            <summary>
            Web response from the server. NOTE: The Close() method has been called before setting this property.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawledPage.WebException">
            <summary>
            The web exception that occurred during the crawl
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawledPage.PageSizeInBytes">
            <summary>
            The actual byte size of the page's raw content. This property is due to the Content-length header being untrustable.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawledPage.ParsedLinks">
            <summary>
            Links parsed from page. This value is set by the WebCrawler.SchedulePageLinks() method only If the "ShouldCrawlPageLinks" rules return true or if the IsForcedLinkParsingEnabled config value is set to true.
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawledPage.Content">
            <summary>
            The content of page request
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawledPage.RequestStarted">
            <summary>
            A datetime of when the http request started
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawledPage.RequestCompleted">
            <summary>
            A datetime of when the http request completed
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawledPage.DownloadContentStarted">
            <summary>
            A datetime of when the page content download started, this may be null if downloading the content was disallowed by the CrawlDecisionMaker or the inline delegate ShouldDownloadPageContent
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawledPage.DownloadContentCompleted">
            <summary>
            A datetime of when the page content download completed, this may be null if downloading the content was disallowed by the CrawlDecisionMaker or the inline delegate ShouldDownloadPageContent
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawledPage.RedirectedTo">
            <summary>
            The page that this pagee was redirected to
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlResult.RootUri">
            <summary>
            The root of the crawl
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlResult.Elapsed">
            <summary>
            The amount of time that elapsed before the crawl completed
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlResult.ErrorOccurred">
            <summary>
            Whether or not an error occurred during the crawl that caused it to end prematurely
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlResult.ErrorException">
            <summary>
            The exception that caused the crawl to end prematurely
            </summary>
        </member>
        <member name="P:Abot.Poco.CrawlResult.CrawlContext">
            <summary>
            The context of the crawl
            </summary>
        </member>
        <member name="T:Abot.Poco.HttpWebResponseWrapper">
            <summary>Result of crawling a page</summary>
            <remarks>
            We use this wrapper class to enable using responses obtained by methods different than executing an HttpWebRequest.
            E.g. one may use a browser control embedded in the application to get a page content and construct an instance of this class
            to pass it to Abot.
            </remarks>
        </member>
        <member name="M:Abot.Poco.HttpWebResponseWrapper.#ctor(System.Net.HttpWebResponse)">
            <summary>Constructs a response based on the received system http response.</summary>
        </member>
        <member name="M:Abot.Poco.HttpWebResponseWrapper.#ctor(System.Net.HttpStatusCode,System.String,System.Byte[],System.Collections.Specialized.NameValueCollection)">
            <summary>Constructs a response based on custom parameters.</summary>
            <remarks>Recieves parameters neccesarily set for Abot to work.</remarks>
        </member>
        <member name="M:Abot.Poco.HttpWebResponseWrapper.#ctor">
            <summary>Constructs an empty response to be filled later.</summary>
        </member>
        <member name="M:Abot.Poco.HttpWebResponseWrapper.GetResponseStream">
            <summary>Gets the actual response data.</summary>
        </member>
        <member name="M:Abot.Poco.HttpWebResponseWrapper.GetResponseHeader(System.String)">
            <summary>Gets the header with the given name.</summary>
        </member>
        <member name="P:Abot.Poco.HttpWebResponseWrapper.StatusCode">
            <summary>Status code returned by the server</summary>
        </member>
        <member name="P:Abot.Poco.HttpWebResponseWrapper.ContentType">
            <summary>Server designated type of content</summary>
        </member>
        <member name="P:Abot.Poco.HttpWebResponseWrapper.ContentLength">
            <summary>Server designated length of content in bytes</summary>
        </member>
        <member name="P:Abot.Poco.HttpWebResponseWrapper.Headers">
            <summary>Collection of headers in the response</summary>
        </member>
        <member name="P:Abot.Poco.HttpWebResponseWrapper.CharacterSet">
            <summary>Gets the character set of the response.</summary>
        </member>
        <member name="P:Abot.Poco.HttpWebResponseWrapper.ContentEncoding">
            <summary>Gets the method that is used to encode the body of the response.</summary>
        </member>
        <member name="P:Abot.Poco.HttpWebResponseWrapper.Cookies">
            <summary>Gets or sets the cookies that are associated with this response.</summary>
        </member>
        <member name="P:Abot.Poco.HttpWebResponseWrapper.IsFromCache">
            <summary>Was the response generated from the local cache?</summary>
        </member>
        <member name="P:Abot.Poco.HttpWebResponseWrapper.IsMutuallyAuthenticated">
            <summary>Gets a System.Boolean value that indicates whether both client and server were authenticated.</summary>
        </member>
        <member name="P:Abot.Poco.HttpWebResponseWrapper.LastModified">
            <summary>Gets the last date and time that the contents of the response were modified.</summary>
        </member>
        <member name="P:Abot.Poco.HttpWebResponseWrapper.Method">
            <summary>Gets the method that is used to return the response.</summary>
        </member>
        <member name="P:Abot.Poco.HttpWebResponseWrapper.ProtocolVersion">
            <summary>Gets the version of the HTTP protocol that is used in the response.</summary>
        </member>
        <member name="P:Abot.Poco.HttpWebResponseWrapper.ResponseUri">
            <summary>Gets the URI of the Internet resource that responded to the request.</summary>
        </member>
        <member name="P:Abot.Poco.HttpWebResponseWrapper.Server">
            <summary>Gets the name of the server that sent the response.</summary>
        </member>
        <member name="P:Abot.Poco.HttpWebResponseWrapper.StatusDescription">
            <summary>Gets the status description returned with the response.</summary>
        </member>
        <member name="P:Abot.Poco.PageContent.Bytes">
            <summary>
            The raw data bytes taken from the web response
            </summary>
        </member>
        <member name="P:Abot.Poco.PageContent.Charset">
            <summary>
            String representation of the charset/encoding
            </summary>
        </member>
        <member name="P:Abot.Poco.PageContent.Encoding">
            <summary>
            The encoding of the web response
            </summary>
        </member>
        <member name="P:Abot.Poco.PageContent.Text">
            <summary>
            The raw text taken from the web response
            </summary>
        </member>
        <member name="T:Abot.Util.BloomFilter`1">
            <summary>
            Bloom filter.
            </summary>
            <typeparam name="T">Item type </typeparam>
        </member>
        <member name="M:Abot.Util.BloomFilter`1.#ctor(System.Int32)">
            <summary>
            Creates a new Bloom filter, specifying an error rate of 1/capacity, using the optimal size for the underlying data structure based on the desired capacity and error rate, as well as the optimal number of hash functions.
            A secondary hash function will be provided for you if your type T is either string or int. Otherwise an exception will be thrown. If you are not using these types please use the overload that supports custom hash functions.
            </summary>
            <param name="capacity">The anticipated number of items to be added to the filter. More than this number of items can be added, but the error rate will exceed what is expected.</param>
        </member>
        <member name="M:Abot.Util.BloomFilter`1.#ctor(System.Int32,System.Single)">
            <summary>
            Creates a new Bloom filter, using the optimal size for the underlying data structure based on the desired capacity and error rate, as well as the optimal number of hash functions.
            A secondary hash function will be provided for you if your type T is either string or int. Otherwise an exception will be thrown. If you are not using these types please use the overload that supports custom hash functions.
            </summary>
            <param name="capacity">The anticipated number of items to be added to the filter. More than this number of items can be added, but the error rate will exceed what is expected.</param>
            <param name="errorRate">The accepable false-positive rate (e.g., 0.01F = 1%)</param>
        </member>
        <member name="M:Abot.Util.BloomFilter`1.#ctor(System.Int32,Abot.Util.BloomFilter{`0}.HashFunction)">
            <summary>
            Creates a new Bloom filter, specifying an error rate of 1/capacity, using the optimal size for the underlying data structure based on the desired capacity and error rate, as well as the optimal number of hash functions.
            </summary>
            <param name="capacity">The anticipated number of items to be added to the filter. More than this number of items can be added, but the error rate will exceed what is expected.</param>
            <param name="hashFunction">The function to hash the input values. Do not use GetHashCode(). If it is null, and T is string or int a hash function will be provided for you.</param>
        </member>
        <member name="M:Abot.Util.BloomFilter`1.#ctor(System.Int32,System.Single,Abot.Util.BloomFilter{`0}.HashFunction)">
            <summary>
            Creates a new Bloom filter, using the optimal size for the underlying data structure based on the desired capacity and error rate, as well as the optimal number of hash functions.
            </summary>
            <param name="capacity">The anticipated number of items to be added to the filter. More than this number of items can be added, but the error rate will exceed what is expected.</param>
            <param name="errorRate">The accepable false-positive rate (e.g., 0.01F = 1%)</param>
            <param name="hashFunction">The function to hash the input values. Do not use GetHashCode(). If it is null, and T is string or int a hash function will be provided for you.</param>
        </member>
        <member name="M:Abot.Util.BloomFilter`1.#ctor(System.Int32,System.Single,Abot.Util.BloomFilter{`0}.HashFunction,System.Int32,System.Int32)">
            <summary>
            Creates a new Bloom filter.
            </summary>
            <param name="capacity">The anticipated number of items to be added to the filter. More than this number of items can be added, but the error rate will exceed what is expected.</param>
            <param name="errorRate">The accepable false-positive rate (e.g., 0.01F = 1%)</param>
            <param name="hashFunction">The function to hash the input values. Do not use GetHashCode(). If it is null, and T is string or int a hash function will be provided for you.</param>
            <param name="m">The number of elements in the BitArray.</param>
            <param name="k">The number of hash functions to use.</param>
        </member>
        <member name="M:Abot.Util.BloomFilter`1.Add(`0)">
            <summary>
            Adds a new item to the filter. It cannot be removed.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Abot.Util.BloomFilter`1.Contains(`0)">
            <summary>
            Checks for the existance of the item in the filter for a given probability.
            </summary>
            <param name="item"> The item. </param>
            <returns> The <see cref="T:System.Boolean"/>. </returns>
        </member>
        <member name="M:Abot.Util.BloomFilter`1.BestK(System.Int32,System.Single)">
            <summary>
            The best k.
            </summary>
            <param name="capacity"> The capacity. </param>
            <param name="errorRate"> The error rate. </param>
            <returns> The <see cref="T:System.Int32"/>. </returns>
        </member>
        <member name="M:Abot.Util.BloomFilter`1.BestM(System.Int32,System.Single)">
            <summary>
            The best m.
            </summary>
            <param name="capacity"> The capacity. </param>
            <param name="errorRate"> The error rate. </param>
            <returns> The <see cref="T:System.Int32"/>. </returns>
        </member>
        <member name="M:Abot.Util.BloomFilter`1.BestErrorRate(System.Int32)">
            <summary>
            The best error rate.
            </summary>
            <param name="capacity"> The capacity. </param>
            <returns> The <see cref="T:System.Single"/>. </returns>
        </member>
        <member name="M:Abot.Util.BloomFilter`1.HashInt32(`0)">
            <summary>
            Hashes a 32-bit signed int using Thomas Wang's method v3.1 (http://www.concentric.net/~Ttwang/tech/inthash.htm).
            Runtime is suggested to be 11 cycles. 
            </summary>
            <param name="input">The integer to hash.</param>
            <returns>The hashed result.</returns>
        </member>
        <member name="M:Abot.Util.BloomFilter`1.HashString(`0)">
            <summary>
            Hashes a string using Bob Jenkin's "One At A Time" method from Dr. Dobbs (http://burtleburtle.net/bob/hash/doobs.html).
            Runtime is suggested to be 9x+9, where x = input.Length. 
            </summary>
            <param name="input">The string to hash.</param>
            <returns>The hashed result.</returns>
        </member>
        <member name="M:Abot.Util.BloomFilter`1.TrueBits">
            <summary>
            The true bits.
            </summary>
            <returns> The <see cref="T:System.Int32"/>. </returns>
        </member>
        <member name="M:Abot.Util.BloomFilter`1.ComputeHash(System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs Dillinger and Manolios double hashing. 
            </summary>
            <param name="primaryHash"> The primary hash. </param>
            <param name="secondaryHash"> The secondary hash. </param>
            <param name="i"> The i. </param>
            <returns> The <see cref="T:System.Int32"/>. </returns>
        </member>
        <member name="P:Abot.Util.BloomFilter`1.Truthiness">
            <summary>
            The ratio of false to true bits in the filter. E.g., 1 true bit in a 10 bit filter means a truthiness of 0.1.
            </summary>
        </member>
        <member name="T:Abot.Util.BloomFilter`1.HashFunction">
            <summary>
            A function that can be used to hash input.
            </summary>
            <param name="input">The values to be hashed.</param>
            <returns>The resulting hash code.</returns>
        </member>
        <member name="T:Abot.Util.ManualThreadManager">
            <summary>
            A ThreadManager implementation that will use real Threads to handle concurrency.
            </summary>
        </member>
        <member name="T:Abot.Util.IThreadManager">
            <summary>
            Handles the multithreading implementation details
            </summary>
        </member>
        <member name="M:Abot.Util.IThreadManager.DoWork(System.Action)">
            <summary>
            Will perform the action asynchrously on a seperate thread
            </summary>
            <param name="action">The action to perform</param>
        </member>
        <member name="M:Abot.Util.IThreadManager.HasRunningThreads">
            <summary>
            Whether there are running threads
            </summary>
        </member>
        <member name="M:Abot.Util.IThreadManager.AbortAll">
            <summary>
            Abort all running threads
            </summary>
        </member>
        <member name="P:Abot.Util.IThreadManager.MaxThreads">
            <summary>
            Max number of threads to use.
            </summary>
        </member>
        <member name="M:Abot.Util.ThreadManager.DoWork(System.Action)">
            <summary>
            Will perform the action asynchrously on a seperate thread
            </summary>
        </member>
        <member name="M:Abot.Util.ThreadManager.RunActionOnDedicatedThread(System.Action)">
            <summary>
            Runs the action on a seperate thread
            </summary>
        </member>
        <member name="P:Abot.Util.ThreadManager.MaxThreads">
            <summary>
            Max number of threads to use
            </summary>
        </member>
        <member name="T:Abot.Util.IMemoryManager">
            <summary>
            Handles memory monitoring/usage
            </summary>
        </member>
        <member name="M:Abot.Util.IMemoryManager.IsCurrentUsageAbove(System.Int32)">
            <summary>
            Whether the current process that is hosting this instance is allocated/using above the param value of memory in mb
            </summary>
        </member>
        <member name="M:Abot.Util.IMemoryManager.IsSpaceAvailable(System.Int32)">
            <summary>
            Whether there is at least the param value of available memory in mb
            </summary>
        </member>
        <member name="T:Abot.Util.RateLimiter">
            <summary>
            Used to control the rate of some occurrence per unit of time.
            </summary>
            <remarks>
                <para>
                To control the rate of an action using a <see cref="T:Abot.Util.RateLimiter"/>, 
                code should simply call <see cref="M:Abot.Util.RateLimiter.WaitToProceed"/> prior to 
                performing the action. <see cref="M:Abot.Util.RateLimiter.WaitToProceed"/> will block
                the current thread until the action is allowed based on the rate 
                limit.
                </para>
                <para>
                This class is thread safe. A single <see cref="T:Abot.Util.RateLimiter"/> instance 
                may be used to control the rate of an occurrence across multiple 
                threads.
                </para>
            </remarks>
        </member>
        <member name="M:Abot.Util.RateLimiter.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Initializes a <see cref="T:Abot.Util.RateLimiter"/> with a rate of <paramref name="occurrences"/> 
            per <paramref name="timeUnit"/>.
            </summary>
            <param name="occurrences">Number of occurrences allowed per unit of time.</param>
            <param name="timeUnit">Length of the time unit.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="occurrences"/> or <paramref name="timeUnit"/> is negative.
            </exception>
        </member>
        <member name="M:Abot.Util.RateLimiter.WaitToProceed(System.Int32)">
            <summary>
            Blocks the current thread until allowed to proceed or until the
            specified timeout elapses.
            </summary>
            <param name="millisecondsTimeout">Number of milliseconds to wait, or -1 to wait indefinitely.</param>
            <returns>true if the thread is allowed to proceed, or false if timed out</returns>
        </member>
        <member name="M:Abot.Util.RateLimiter.WaitToProceed(System.TimeSpan)">
            <summary>
            Blocks the current thread until allowed to proceed or until the
            specified timeout elapses.
            </summary>
            <param name="timeout"></param>
            <returns>true if the thread is allowed to proceed, or false if timed out</returns>
        </member>
        <member name="M:Abot.Util.RateLimiter.WaitToProceed">
            <summary>
            Blocks the current thread indefinitely until allowed to proceed.
            </summary>
        </member>
        <member name="M:Abot.Util.RateLimiter.Dispose">
            <summary>
            Releases unmanaged resources held by an instance of this class.
            </summary>
        </member>
        <member name="M:Abot.Util.RateLimiter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged resources held by an instance of this class.
            </summary>
            <param name="isDisposing">Whether this object is being disposed.</param>
        </member>
        <member name="P:Abot.Util.RateLimiter.Occurrences">
            <summary>
            Number of occurrences allowed per unit of time.
            </summary>
        </member>
        <member name="P:Abot.Util.RateLimiter.TimeUnitMilliseconds">
            <summary>
            The length of the time unit, in milliseconds.
            </summary>
        </member>
        <member name="T:Abot.Util.TaskThreadManager">
            <summary>
            A ThreadManager implementation that will use tpl Tasks to handle concurrency.
            </summary>
        </member>
        <member name="M:Abot.Util.TaskThreadManager.HandleAggregateExceptions(System.Threading.Tasks.Task)">
            <summary>
            This was added to resolve the issue described here
            http://stackoverflow.com/questions/7883052/a-tasks-exceptions-were-not-observed-either-by-waiting-on-the-task-or-accessi
            </summary>
        </member>
        <member name="T:Lind.DDD.Aspects.AspectAttribute">
            <summary>
            方法拦截基类
            </summary>
        </member>
        <member name="M:Lind.DDD.Aspects.AspectAttribute.Action(Lind.DDD.Aspects.InvokeContext)">
            <summary>
            拦截行为，子类根据自己逻辑去重写
            </summary>
            <param name="context">方法对象上下文</param>
        </member>
        <member name="T:Lind.DDD.Aspects.BeforeAspectAttribute">
            <summary>
            方法执行前拦截
            </summary>
        </member>
        <member name="T:Lind.DDD.Aspects.AfterAspectAttribute">
            <summary>
            方法执行后拦截
            </summary>
        </member>
        <member name="T:Lind.DDD.Aspects.ExceptionAspectAttribute">
            <summary>
            出现异常时拦截
            </summary>
        </member>
        <member name="T:Lind.DDD.Aspects.Demo">
            <summary>
            AOP调用方式
            </summary>
        </member>
        <member name="T:Lind.DDD.Aspects.DynamicProxyGenerator">
            <summary>
            拦截所需要的动态代理
            </summary>
        </member>
        <member name="T:Lind.DDD.Aspects.InvokeContext">
            <summary>
            拦截所需要的上下文对象
            </summary>
        </member>
        <member name="T:Lind.DDD.Aspects.Metadata.ExceptionMetadata">
            <summary>
            用于保存Exception相关信息
            </summary>
        </member>
        <member name="F:Lind.DDD.Aspects.Metadata.ExceptionMetadata._ex">
            <summary>
            保存异常信息
            </summary>
        </member>
        <member name="M:Lind.DDD.Aspects.Metadata.ExceptionMetadata.#ctor(System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="ex">初始化异常</param>
        </member>
        <member name="P:Lind.DDD.Aspects.Metadata.ExceptionMetadata.Ex">
            <summary>
            Property：异常信息
            </summary>
        </member>
        <member name="T:Lind.DDD.Aspects.ProxyFactory">
            <summary>
            动态代理生产者
            </summary>
        </member>
        <member name="T:Lind.DDD.Authorization.Api.RequestParam">
            <summary>
            参数对象
            </summary>
        </member>
        <member name="T:Lind.DDD.Authorization.Api.RequestData">
            <summary>
            数据包中的实体
            </summary>
        </member>
        <member name="P:Lind.DDD.Authorization.Api.RequestData.GuidKey">
            <summary>
            本次通讯唯一标示
            </summary>
        </member>
        <member name="P:Lind.DDD.Authorization.Api.RequestData.HttpMethod">
            <summary>
            请求方式0:get,1:Post
            </summary>
        </member>
        <member name="P:Lind.DDD.Authorization.Api.RequestData.Url">
            <summary>
            要调用的方法
            </summary>
        </member>
        <member name="P:Lind.DDD.Authorization.Api.RequestData.RequestParam">
            <summary>
            方法的参数列表
            </summary>
        </member>
        <member name="T:Lind.DDD.Authorization.Api.RequestDataSegment">
            <summary>
            请求数据包
            </summary>
        </member>
        <member name="T:Lind.DDD.Authorization.Api.ResponseDataSegment">
            <summary>
            响应数据包
            </summary>
        </member>
        <member name="T:Lind.DDD.Authorization.Api.ApiProxyFilter">
            <summary>
            Api代理过滤器(api多任务请求的入口)，它通常是一个固定的api地址
            </summary>
        </member>
        <member name="T:Lind.DDD.Authorization.Api.ApiValidateFilter">
            <summary>
            功能：api数据安全性验证
            校验方式：ciphertext=md5(form键的值拼接+timestamp+passkey),服务端用接收到的表单数据与时间戳和自己的passkey进行md5生成，最后比较值是否一致
            passkey为私钥，不用于网络传递，你可以将它与appKey进行关联，appKey用来传递，服务器根据appKey去数据库里取对应的passkey然后进行比较
            功能：请求唯一性，防伪造性
            timestamp:UTC时间戳，不用于网络传递，在客户端调用服务器时，服务器也生成yyyyMMddhhmm的时间戳，然后进行计算，看是否过期
            </summary>
        </member>
        <member name="T:Lind.DDD.Authorization.Api.ApiValidateHelper">
            <summary>
            api校验相关
            </summary>
        </member>
        <member name="M:Lind.DDD.Authorization.Api.ApiValidateHelper.GenerateCipherText(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            生成秘文，并返回[在url上加这个键ciphertext]
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.Authorization.Api.ApiValidateModelConfig">
            <summary>
            配置文件对象
            </summary>
        </member>
        <member name="T:Lind.DDD.CacheConfigFile.IConfiger">
            <summary>
            配置信息类接口
            </summary>
        </member>
        <member name="T:Lind.DDD.Authorization.Api.ApiValidateModelList">
            <summary>
            配置列表
            </summary>
        </member>
        <member name="T:Lind.DDD.Authorization.Api.ApiValidateModel">
            <summary>
            配置项
            </summary>
        </member>
        <member name="P:Lind.DDD.Authorization.Api.ApiValidateModel.AppKey">
            <summary>
            项目键，用于网络传输
            </summary>
        </member>
        <member name="P:Lind.DDD.Authorization.Api.ApiValidateModel.AppName">
            <summary>
            项目名称
            </summary>
        </member>
        <member name="P:Lind.DDD.Authorization.Api.ApiValidateModel.PassKey">
            <summary>
            密钥
            </summary>
        </member>
        <member name="P:Lind.DDD.Authorization.Api.ApiValidateModel.ExpireDate">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="T:Lind.DDD.Authorization.Authority">
            <summary>
            权限类型
            </summary>
        </member>
        <member name="F:Lind.DDD.Authorization.Authority.Detail">
            <summary>
            查看
            </summary>
        </member>
        <member name="F:Lind.DDD.Authorization.Authority.Edit">
            <summary>
            编辑
            </summary>
        </member>
        <member name="F:Lind.DDD.Authorization.Authority.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:Lind.DDD.Authorization.Authority.Freeze">
            <summary>
            冻结
            </summary>
        </member>
        <member name="F:Lind.DDD.Authorization.Authority.Approve">
            <summary>
            审批
            </summary>
        </member>
        <member name="F:Lind.DDD.Authorization.Authority.Default">
            <summary>
            默认按钮：查看，编辑，删除
            </summary>
        </member>
        <member name="T:Lind.DDD.CacheConfigFile.ConfigFactory">
            <summary>
            配置信息生产工厂
            </summary>
        </member>
        <member name="T:Lind.DDD.CacheConfigFile.Singleton`1">
            <summary>
            泛型单例基类
            </summary>
        </member>
        <member name="M:Lind.DDD.CacheConfigFile.ConfigFactory.GetConfig``1">
            <summary>
            得到ＷＥＢ网站下的指定文件
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.CacheConfigFile.ConfigFactory.GetConfig``1(System.String)">
            <summary>
            可以根据绝对路径得到文件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configPath">配置文件的完整路径</param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.CacheConfigFile.ConfigFilesManager">
            <summary>
            基本文件配置信息管理者
            </summary>
        </member>
        <member name="F:Lind.DDD.CacheConfigFile.ConfigFilesManager.lockHelper">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="F:Lind.DDD.CacheConfigFile.ConfigFilesManager.fileChangeTime">
            <summary>
            配置文件修改时间,以文件名为键，修改时间为值
            </summary>
        </member>
        <member name="F:Lind.DDD.CacheConfigFile.ConfigFilesManager.configType">
            <summary>
            配置文件类型
            </summary>
        </member>
        <member name="M:Lind.DDD.CacheConfigFile.ConfigFilesManager.#ctor">
            <summary>
            私用无参方法，实例单例时用
            </summary>
        </member>
        <member name="M:Lind.DDD.CacheConfigFile.ConfigFilesManager.LoadConfigFile(System.String,System.Type)">
            <summary>
            从配置文件中读取
            </summary>
            <param name="fileName"></param>
            <param name="type"></param>
        </member>
        <member name="M:Lind.DDD.CacheConfigFile.ConfigFilesManager.LoadConfig(System.String,System.Type)">
            <summary>
            加载配置文件(直接从文件加载）
            </summary>
            <param name="fileName">文件名</param>
            <param name="type">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.CacheConfigFile.ConfigFilesManager.LoadConfig(System.String,System.Type,System.Boolean)">
            <summary>
            加载配置文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="type">实体类型</param>
            <param name="isCache">是否从缓存加载</param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.CacheConfigFile.ConfigSerialize">
            <summary>
            配置序列化操作类
            </summary>
        </member>
        <member name="M:Lind.DDD.CacheConfigFile.ConfigSerialize.DeserializeInfo(System.String,System.Type)">
            <summary>
            反序列化指定的类
            </summary>
            <param name="configfilepath">config 文件的路径</param>
            <param name="configtype">相应的类型</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.CacheConfigFile.ConfigSerialize.Serializer(System.String,Lind.DDD.CacheConfigFile.IConfiger)">
            <summary>
            保存(序列化)指定路径下的配置文件
            </summary>
            <param name="configFilePath">指定的配置文件所在的路径(包括文件名)</param>
            <param name="configinfo">被保存(序列化)的对象</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.CacheConfigFile.DataCache.GetCache(System.String)">
            <summary>
            得到cache键所对应的值
            </summary>
            <param name="CacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.CacheConfigFile.DataCache.SetCache(System.String,System.Object)">
            <summary>
            将指定值设置到cache键上
            </summary>
            <param name="CacheKey">键</param>
            <param name="objObject">值</param>
        </member>
        <member name="M:Lind.DDD.CacheConfigFile.DataCache.SetCache(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
             将指定值设置到cache键上
            </summary>
            <param name="CacheKey">键</param>
            <param name="objObject">值</param>
            <param name="absoluteExpiration">绝对过期时间</param>
            <param name="slidingExpiration">相对过期时间</param>
        </member>
        <member name="M:Lind.DDD.CacheConfigFile.DataCache.RemoveCache(System.String)">
            <summary>
            移除指定cache键
            </summary>
            <param name="CacheKey"></param>
        </member>
        <member name="T:Lind.DDD.Caching.CacheManager">
            <summary>
            缓存管理者
            </summary>
        </member>
        <member name="T:Lind.DDD.Caching.ICache">
            <summary>
            缓存所需要的方法
            </summary>
        </member>
        <member name="M:Lind.DDD.Caching.ICache.Put(System.String,System.Object)">
            <summary>
            数据加入缓存，并使用全局配置的过期时间
            </summary>
            <param name="key">键</param>
            <param name="obj">数据</param>
        </member>
        <member name="M:Lind.DDD.Caching.ICache.Put(System.String,System.Object,System.Int32)">
            <summary>
            数据加入缓存，并指定过期时间（分钟）
            </summary>
            <param name="key">键</param>
            <param name="obj">数据</param>
            <param name="expireMinutes">过期时间</param>
        </member>
        <member name="M:Lind.DDD.Caching.ICache.Get(System.String)">
            <summary>
            拿出缓存数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Caching.ICache.Delete(System.String)">
            <summary>
            手动删除缓存数据
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Lind.DDD.Caching.CacheManager.#cctor">
            <summary>
            类构造方法，对外不支持创建它的实例对象
            </summary>
        </member>
        <member name="M:Lind.DDD.Caching.CacheManager.#ctor">
            <summary>
            私有构造方法，对外不公开
            </summary>
        </member>
        <member name="P:Lind.DDD.Caching.CacheManager.Instance">
            <summary>
            缓存管理者单例
            </summary>
        </member>
        <member name="T:Lind.DDD.Caching.RedisCache">
            <summary>
            使用redis
            </summary>
        </member>
        <member name="T:Lind.DDD.Caching.RuntimeCache">
            <summary>
            运行时缓存，基于服务端内存存储
            </summary>
        </member>
        <member name="T:Lind.DDD.Caching.StackExchangeRedisExtensions">
            <summary>
            对RedisCache的扩展，让它支持复杂类型、
            RedisValue 类型可以直接使用字节数组，因此，
            调用 Get 帮助程序方法时，它会将对象序列化为字节流，然后再缓存该对象。
            检索项目时，项目会重新序列化为对象，然后返回给调用程序。
            </summary>
        </member>
        <member name="M:Lind.DDD.Caching.StackExchangeRedisExtensions.Get``1(StackExchange.Redis.IDatabase,System.String)">
            <summary>
            得到键所对应的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Caching.StackExchangeRedisExtensions.Get(StackExchange.Redis.IDatabase,System.String)">
            <summary>
            得到键所对应的值
            </summary>
            <param name="cache"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Caching.StackExchangeRedisExtensions.Set(StackExchange.Redis.IDatabase,System.String,System.Object,System.Int32)">
            <summary>
            设置键对应的值,过期时间后自己删除
            </summary>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireMinutes"></param>
        </member>
        <member name="M:Lind.DDD.Caching.StackExchangeRedisExtensions.Remove(StackExchange.Redis.IDatabase,System.String)">
            <summary>
            移除键及值
            </summary>
            <param name="cache"></param>
            <param name="key"></param>
        </member>
        <member name="M:Lind.DDD.Caching.StackExchangeRedisExtensions.Set(StackExchange.Redis.IDatabase,System.String,System.Object)">
            <summary>
            设置键对应的值
            </summary>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Lind.DDD.Caching.StackExchangeRedisExtensions.Pop``1(StackExchange.Redis.IDatabase,System.String)">
            <summary>
            出队列
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Caching.StackExchangeRedisExtensions.Pop(StackExchange.Redis.IDatabase,System.String)">
            <summary>
            出队列
            </summary>
            <param name="cache"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Caching.StackExchangeRedisExtensions.PopJson``1(StackExchange.Redis.IDatabase,System.String)">
            <summary>
            出队列JSON
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Caching.StackExchangeRedisExtensions.PopJson(StackExchange.Redis.IDatabase,System.String)">
            <summary>
            出队列JSON
            </summary>
            <param name="cache"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Caching.StackExchangeRedisExtensions.Push(StackExchange.Redis.IDatabase,System.String,System.Object)">
            <summary>
            入队列
            </summary>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Lind.DDD.Caching.StackExchangeRedisExtensions.Serialize(System.Object)">
            <summary>
            二进制序列化
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Caching.StackExchangeRedisExtensions.Deserialize``1(System.Byte[])">
            <summary>
            二进制反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Caching.StackExchangeRedisExtensions.JsonSerializer``1(``0)">
            <summary>
            JSON序列化
            </summary>
        </member>
        <member name="M:Lind.DDD.Caching.StackExchangeRedisExtensions.JsonDeserialize``1(System.String)">
            <summary>
            JSON反序列化
            </summary>
        </member>
        <member name="M:Lind.DDD.Caching.StackExchangeRedisExtensions.ConvertJsonDateToDateString(System.Text.RegularExpressions.Match)">
            <summary>
            将Json序列化的时间由/Date(1294499956278+0800)转为字符串
            </summary>
        </member>
        <member name="M:Lind.DDD.Caching.StackExchangeRedisExtensions.ConvertDateStringToJsonDate(System.Text.RegularExpressions.Match)">
            <summary>
            将时间字符串转为Json时间
            </summary>
        </member>
        <member name="T:Lind.DDD.CatClientPur.CatFilter">
            <summary>
            Cat拦截器，主要拦截Http请求
            </summary>
        </member>
        <member name="M:Lind.DDD.CatClientPur.CatFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            请求来到时
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Lind.DDD.CatClientPur.CatFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            请求结束时
            调用次序：A->B->C->c->b->a,从c开始执行，把context结果在响应头里依据向回传
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="T:Lind.DDD.CatClientPur.CatHttpClient">
            <summary>
            cat中使用的HttpClient
            </summary>
        </member>
        <member name="M:Lind.DDD.CatClientPur.CatHttpClient.GetCurrentContext(System.String,System.Boolean)">
            <summary>
            返回当前Cat上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.CatClientPur.CatHttpClient.Post(System.String,System.Boolean,System.Net.Http.HttpContent)">
            <summary>
            Post数据
            </summary>
            <param name="requestUri"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.CatClientPur.CatHttpClient.Get(System.String)">
            <summary>
            Get数据
            </summary>
            <param name="requestUri"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.CatClientPur.CatHttpClient.Get(System.String,System.Boolean)">
            <summary>
            Get数据
            </summary>
            <param name="requestUri">调用的uri</param>
            <param name="isCat">是否写cat</param>
            <returns></returns>
        </member>
        <member name="T:PureCat.Configuration.ClientConfig">
            <summary>
              Cat客户端配置
            </summary>
        </member>
        <member name="P:PureCat.Configuration.ClientConfig.Servers">
            <summary>
              Cat日志服务器，可以有多个
            </summary>
        </member>
        <member name="T:PureCat.Configuration.Domain">
            <summary>
              描述当前系统的情况
            </summary>
        </member>
        <member name="P:PureCat.Configuration.Domain.Id">
            <summary>
              当前系统的标识
            </summary>
        </member>
        <member name="P:PureCat.Configuration.Domain.Enabled">
            <summary>
              Cat日志是否开启，默认关闭
            </summary>
        </member>
        <member name="T:PureCat.Configuration.Server">
            <summary>
              描述记录当前系统日志的目标Cat服务器
            </summary>
        </member>
        <member name="P:PureCat.Configuration.Server.Ip">
            <summary>
              Cat服务器IP
            </summary>
        </member>
        <member name="P:PureCat.Configuration.Server.Port">
            <summary>
              Cat服务器端口
            </summary>
        </member>
        <member name="P:PureCat.Configuration.Server.Enabled">
            <summary>
              Cat服务器是否有效，默认有效
            </summary>
        </member>
        <member name="T:PureCat.Context.CatContext">
            <summary>
            Cat上下文
            </summary>
        </member>
        <member name="M:PureCat.Context.CatContext.#ctor(System.String)">
            <summary>
            初始化Cat上下文
            </summary>
            <param name="contextName"></param>
        </member>
        <member name="P:PureCat.Context.CatContext.CatRootId">
            <summary>
            消息根ID
            </summary>
        </member>
        <member name="P:PureCat.Context.CatContext.CatParentId">
            <summary>
            上级消息ID
            </summary>
        </member>
        <member name="P:PureCat.Context.CatContext.CatChildId">
            <summary>
            当前消息ID
            </summary>
        </member>
        <member name="P:PureCat.Context.CatContext.ContextName">
            <summary>
            当前的上下文名称
            </summary>
        </member>
        <member name="T:PureCat.Message.IMessage">
            <p>
            Message represents data collected during application runtime. It will be sent
            to back-end system asynchronous for further processing.
            </p>
            
            <p>
            Super interface of <code>Event</code>, <code>Heartbeat</code> and
            <code>Transaction</code>.
            </p>
            
            @see Event, Heartbeat, Transaction
            @author Frankie Wu
        </member>
        <!-- 对于成员“M:PureCat.Message.IMessage.AddData(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:PureCat.Message.IMessage.AddData(System.String,System.Object)">
            add one key-value pair to the message.
            
            @param key
            @param value
        </member>
        <member name="M:PureCat.Message.IMessage.Complete">
            Complete the message construction.
        </member>
        <member name="M:PureCat.Message.IMessage.IsCompleted">
            If the complete() method was called or not.
            
            @return true means the complete() method was called, false otherwise.
        </member>
        <member name="M:PureCat.Message.IMessage.IsSuccess">
            @return
        </member>
        <member name="M:PureCat.Message.IMessage.SetStatus(System.Exception)">
            Set the message status with exception class name.
            
            @param e
                      exception.
        </member>
        <member name="P:PureCat.Message.IMessage.Data">
            @return key value pairs data
        </member>
        <member name="P:PureCat.Message.IMessage.Name">
            Message name.
            
            @return message name
        </member>
        <member name="P:PureCat.Message.IMessage.Status">
            Get the message status.
            
            @return message status. PureCatConstants.SUCCESS or "0" means success, otherwise error code.
        </member>
        <member name="P:PureCat.Message.IMessage.Timestamp">
            The time stamp the message was created.
            
            @return message creation time stamp in milliseconds
        </member>
        <member name="P:PureCat.Message.IMessage.Type">
            Message type.
            
            <p>
            Typical message types are:
            <ul>
            <li>URL: maps to one method of an action</li>
            <li>Service: maps to one method of service call</li>
            <li>Search: maps to one method of search call</li>
            <li>SQL: maps to one SQL statement</li>
            <li>Cache: maps to one cache access</li>
            <li>Error: maps to java.lang.Throwable (java.lang.Exception and java.lang.Error)</li>
            </ul>
            </p>
            
            @return message type
        </member>
        <member name="T:PureCat.Message.ITransaction">
            <p>
            <code>Transaction</code> is any interesting unit of work that takes time to
            complete and may fail.
            </p>
            
            <p>
            Basically, all data access across the boundary needs to be logged as a
            <code>Transaction</code> since it may fail and time consuming. For example,
            URL request, disk IO, JDBC query, search query, HTTP request, 3rd party API
            call etc.
            </p>
            
            <p>
            Sometime if A needs call B which is owned by another team, although A and B
            are deployed together without any physical boundary. To make the ownership
            clear, there could be some <code>Transaction</code> logged when A calls B.
            </p>
            
            <p>
            Most of <code>Transaction</code> should be logged in the infrastructure level
            or framework level, which is transparent to the application.
            </p>
            
            <p>
            All CAT message will be constructed as a message tree and send to back-end
            for further analysis, and for monitoring. Only <code>Transaction</code> can
            be a tree node, all other message will be the tree leaf.　The transaction
            without other messages nested is an atomic transaction.
            </p>
            
            @author Frankie Wu
        </member>
        <member name="M:PureCat.Message.ITransaction.AddChild(PureCat.Message.IMessage)">
            Add one nested child message to current transaction.
            
            @param message
                      to be added
        </member>
        <member name="M:PureCat.Message.ITransaction.HasChildren">
            Has children or not. An atomic transaction does not have any children
            message.
            
            @return true if child exists, else false.
        </member>
        <member name="P:PureCat.Message.ITransaction.Children">
            Get all children message within current transaction.
            
            <p>
            Typically, a <code>Transaction</code> can nest other
            <code>Transaction</code>s, <code>Event</code>s and <code>Heartbeat</code>
            s, while an <code>Event</code> or <code>Heartbeat</code> can't nest other
            messages.
            </p>
            
            @return all children messages, empty if there is no nested children.
        </member>
        <member name="P:PureCat.Message.ITransaction.DurationInMicros">
            How long the transaction took from construction to complete. Time unit is
            microsecond.
            
            @return duration time in microsecond
        </member>
        <member name="P:PureCat.Message.ITransaction.DurationInMillis">
            How long the transaction took from construction to complete. Time unit is
            millisecond.
            
            @return duration time in millisecond
        </member>
        <member name="P:PureCat.Message.ITransaction.Standalone">
            Check if the transaction is stand-alone or belongs to another one.
            
            @return true if it's an root transaction.
        </member>
        <member name="T:PureCat.Message.IHeartbeat">
            <summary>
              <p>
                <c>Heartbeat</c>
                is used to log data that happens in a regular
                intervals, for example once per second, such as system load, CPU percentage,
                memory usage, thread pool statistics, cache hit/miss rate, service manifest
                etc., and even some configuration could be carried by
                <c>Heartbeat</c>
                .
                There could be some good use cases, for example health checker and load
                balancer, that make good use of it.</p> <p>
                                                          <c>Heartbeat</c>
                                                          should never be used per request since the request is
                                                          not regular predictable, instead it could be logged in a daemon background
                                                          thread, or something like a Timer.</p> <p>All CAT message will be constructed as a message tree and send to back-end
                                                                                                   for further analysis, and for monitoring. Only
                                                                                                   <c>Transaction</c>
                                                                                                   can
                                                                                                   be a tree node, all other message will be the tree leaf.?The transaction
                                                                                                   without other messages nested is an atomic transaction.</p>
            </summary>
        </member>
        <member name="P:PureCat.Message.Internals.AbstractMessage.TimestampInMicros">
            <summary>
              其实是Ticks除以10
            </summary>
        </member>
        <member name="P:PureCat.Message.Internals.AbstractMessage.Timestamp">
            <summary>
              其实是Ticks除以10000
            </summary>
        </member>
        <member name="M:PureCat.Message.Spi.Codec.ChannelBuffer.BytesBefore(System.Byte)">
            <summary>
              从当前位置到目标字符第一次出现的位置有多少字节?
            </summary>
            <param name="separator"> </param>
            <returns> </returns>
        </member>
        <member name="M:PureCat.Message.Spi.Codec.ChannelBuffer.SetInt(System.Int32,System.Int32)">
            <summary>
              在流的相应位置插入一个整数的字节(覆盖？)
            </summary>
            <param name="index"> </param>
            <param name="i"> </param>
        </member>
        <member name="M:PureCat.Message.Spi.Codec.ChannelBuffer.ToString">
            <summary>
              从当前位置到结尾的字节数组的字符串表示
            </summary>
            <returns> </returns>
        </member>
        <member name="T:PureCat.Message.Spi.Codec.PlainTextMessageCodec.DateHelper">
            <summary>
              Thread safe date helper class. DateFormat is NOT thread safe.
            </summary>
        </member>
        <member name="T:PureCat.Message.Spi.IMessageManager">
            <summary>
              Message manager to help build CAT message. <p>Notes: This method is reserved for internal usage only. Application developer
                                                           should never call this method directly.</p>
            </summary>
        </member>
        <member name="M:PureCat.Message.Spi.IMessageManager.Add(PureCat.Message.IMessage)">
            <summary>
              用于添加Event或者Heartbeat到peek transaction或者到根 如果是添加到根，建议直接使用IMessageProducer中的LogError、LogEvent或LogHeartbeat方法
            </summary>
            <param name="message"> </param>
        </member>
        <member name="M:PureCat.Message.Spi.IMessageManager.InitializeClient(PureCat.Configuration.ClientConfig)">
            <summary>
              Initialize CAT client with given CAT configuration.
            </summary>
            <param name="config"> CAT configuration </param>
        </member>
        <member name="M:PureCat.Message.Spi.IMessageManager.Reset">
            <summary>
              Do cleanup for current thread environment in order to release resources in thread local objects.
            </summary>
        </member>
        <member name="M:PureCat.Message.Spi.IMessageManager.HasContext">
            <summary>
              Check if the thread context is setup or not.
            </summary>
            <returns> true if the thread context is setup, false otherwise </returns>
        </member>
        <member name="M:PureCat.Message.Spi.IMessageManager.Setup">
            <summary>
              Do setup for current thread environment in order to prepare thread local objects.
            </summary>
        </member>
        <member name="M:PureCat.Message.Spi.IMessageManager.Start(PureCat.Message.ITransaction,System.Boolean)">
            <summary>
              Be triggered when a new transaction starts, whatever it's the root transaction or nested transaction.
            </summary>
            <param name="transaction"> </param>
        </member>
        <member name="M:PureCat.Message.Spi.IMessageManager.End(PureCat.Message.ITransaction)">
            <summary>
              Be triggered when a transaction ends, whatever it's the root transaction or nested transaction. However, if it's the root transaction then it will be flushed to back-end CAT server asynchronously.
            </summary>
            <param name="transaction"> </param>
        </member>
        <member name="M:PureCat.Message.Spi.IMessageManager.Bind(System.String,System.String)">
            <summary>
            Binds the current message tree to the transaction tagged with <code>tag</code>.
            </summary>
            <param name="tag">tag name of the tagged transaction</param>
            <param name="title">title shown in the logview</param>
        </member>
        <member name="P:PureCat.Message.Spi.IMessageManager.ClientConfig">
            <summary>
              Return configuration for CAT client.
            </summary>
            <value> CAT configuration </value>
        </member>
        <member name="P:PureCat.Message.Spi.IMessageManager.PeekTransaction">
            <summary>
              Get peek transaction for current thread.
            </summary>
            <value> peek transaction for current thread, null if no transaction there. </value>
        </member>
        <member name="P:PureCat.Message.Spi.IMessageManager.ThreadLocalMessageTree">
            <summary>
              Get thread local message information.
            </summary>
            <value> message tree, null means current thread is not setup correctly. </value>
        </member>
        <member name="P:PureCat.Message.Spi.IMessageManager.CatEnabled">
            <summary>
              Check if CAT logging is enabled or disabled.
            </summary>
            <value> true if CAT is enabled </value>
        </member>
        <member name="M:PureCat.Message.Spi.IMessageProducer.LogError(System.Exception)">
            <summary>
              Log an error.
            </summary>
            <param name="cause"> root cause exception </param>
        </member>
        <!-- 对于成员“M:PureCat.Message.Spi.IMessageProducer.LogEvent(System.String,System.String,System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:PureCat.Message.Spi.IMessageProducer.LogHeartbeat(System.String,System.String,System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:PureCat.Message.Spi.IMessageProducer.LogMetric(System.String,System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:PureCat.Message.Spi.IMessageProducer.NewEvent(System.String,System.String)">
            <summary>
              Create a new event with given type and name.
            </summary>
            <param name="type"> event type </param>
            <param name="name"> event name </param>
        </member>
        <member name="M:PureCat.Message.Spi.IMessageProducer.NewTrace(System.String,System.String)">
            <summary>
              Create a new trace with given type and name.
            </summary>
            <param name="type"> event type </param>
            <param name="name"> event name </param>
        </member>
        <member name="M:PureCat.Message.Spi.IMessageProducer.NewHeartbeat(System.String,System.String)">
            <summary>
              Create a new heartbeat with given type and name.
            </summary>
            <param name="type"> heartbeat type </param>
            <param name="name"> heartbeat name </param>
        </member>
        <member name="M:PureCat.Message.Spi.IMessageProducer.NewTransaction(System.String,System.String)">
            <summary>
              Create a new transaction with given type and name.
            </summary>
            <param name="type"> transaction type </param>
            <param name="name"> transaction name </param>
        </member>
        <member name="M:PureCat.Message.Spi.IMessageProducer.NewMetric(System.String,System.String)">
            <summary>
              Create a new metric with given type and name.
            </summary>
            <param name="type"> metric type </param>
            <param name="name"> metric name </param>
        </member>
        <member name="M:PureCat.Message.Spi.IMessageProducer.NewForkedTransaction(System.String,System.String)">
            <summary>
            Create a new forkedTransaction with given type and name.
            </summary>
            <param name="type">forkedTransaction type</param>
            <param name="name">forkedTransaction name</param>
            <returns></returns>
        </member>
        <member name="M:PureCat.Message.Spi.IMessageProducer.NewTaggedTransaction(System.String,System.String,System.String)">
            <summary>
            Create a new taggedTransaction with given type and name.
            </summary>
            <param name="type">taggedTransaction type</param>
            <param name="name">taggedTransaction name</param>
            <param name="tag">taggedTransaction tag</param>
            <returns></returns>
        </member>
        <member name="M:PureCat.Message.Spi.Internals.DefaultMessageManager.Context.Add(PureCat.Message.Spi.Internals.DefaultMessageManager,PureCat.Message.IMessage)">
            <summary>
              添加Event和Heartbeat
            </summary>
            <param name="manager"> </param>
            <param name="message"> </param>
        </member>
        <member name="M:PureCat.Message.Spi.Internals.DefaultMessageManager.Context.End(PureCat.Message.Spi.Internals.DefaultMessageManager,PureCat.Message.ITransaction)">
            <summary>
              return true means the transaction has been flushed.
            </summary>
            <param name="manager"> </param>
            <param name="transaction"> </param>
            <returns> true if message is flushed, false otherwise </returns>
        </member>
        <member name="M:PureCat.Message.Spi.Internals.DefaultMessageManager.Context.PeekTransaction">
            <summary>
              返回stack的顶部对象
            </summary>
            <returns> </returns>
        </member>
        <member name="M:PureCat.Message.Spi.Internals.DefaultMessageManager.Context.Start(PureCat.Message.Spi.Internals.DefaultMessageManager,PureCat.Message.ITransaction,System.Boolean)">
            <summary>
              添加transaction
            </summary>
            <param name="manager"> </param>
            <param name="transaction"> </param>
        </member>
        <member name="T:PureCat.Message.Spi.Internals.MessageIdFactory">
            <summary>
              根据域名（配置指定的），系统IP（自动解析的，16进制字符串），时间戳（1970年到当前的小时数）和自增编号组成
            </summary>
        </member>
        <member name="M:PureCat.Program.Main(System.String[])">
            <summary>
            这个相当于Ａ网站
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:PureCat.Program.DistributeApi">
            <summary>
            这是相当于Ｂ网站
            </summary>
        </member>
        <member name="T:PureCat.CatClient">
            <summary>
            Cat客户端
            </summary>
        </member>
        <member name="M:PureCat.CatClient.DoTransaction(System.String,System.String,PureCat.Context.CatContext,System.Action)">
            <summary>
            运行一个已有事务的代码段
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="context"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:PureCat.CatClient.DoTransaction(System.String,System.String,System.Action)">
            <summary>
            发布分布式事务，返回上下文
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:PureCat.CatClient.DoTransactionAction(System.String,System.String,System.Action)">
            <summary>
            发布分布式事务，不返回上下文
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="action"></param>
        </member>
        <member name="M:PureCat.CatClient.GetCatContextFromServer">
            <summary>
            从请求头中拿到当前的消息树对象
            client发布端：SetCatContextToServer
            server接收端：GetCatContextFromServer
            </summary>
            <returns></returns>
        </member>
        <member name="M:PureCat.CatClient.SetCatContextToRequestHeader(System.Web.HttpContext,PureCat.Context.CatContext)">
            <summary>
            设置消息树到当前请求头
            </summary>
            <returns></returns>
        </member>
        <member name="M:PureCat.CatClient.SetCatContextToRequestHeader(System.Net.Http.HttpClient,PureCat.Context.CatContext)">
            <summary>
            设置消息树到当前请求头
            </summary>
            <param name="http"></param>
            <param name="context"></param>
        </member>
        <member name="M:PureCat.CatClient.SetCatContextToRequestHeader(System.Web.HttpContextBase,PureCat.Context.CatContext)">
            <summary>
            设置消息树到当前请求头
            </summary>
            <param name="http"></param>
            <param name="context"></param>
        </member>
        <member name="M:PureCat.CatClient.SetCatContextToRequestHeader(System.Net.Http.HttpResponseMessage)">
            <summary>
            设置请求头，它来自某个响应头
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:PureCat.CatClient.SetCatContextToResponseHeader(System.Web.HttpResponseBase,PureCat.Context.CatContext)">
            <summary>
            设置catContext到响应头
            </summary>
            <param name="response"></param>
            <param name="context"></param>
        </member>
        <member name="F:PureCat.PureCatConstants.CAT_STATE">
            Cat instrument attribute names
        </member>
        <member name="F:PureCat.PureCatConstants.TYPE_CALL">
            Pigeon Transation Type
        </member>
        <member name="F:PureCat.PureCatConstants.TYPE_ERROR">
            Error Type
        </member>
        <member name="F:PureCat.PureCatConstants.NAME_TIME_OUT">
            Pigeon Event Type, it is used to record the param
        </member>
        <member name="F:PureCat.PureCatConstants.PIGEON_ROOT_MESSAGE_ID">
            Pigeon Context Info
        </member>
        <member name="T:PureCat.Util.Logger">
            <summary>
              简单记录Cat客户端的启动日志
            </summary>
        </member>
        <member name="M:PureCat.Util.Logger.Initialize(System.String)">
            <summary>
              初始化
            </summary>
            <param name="logFile"> </param>
        </member>
        <member name="T:PureCat.Util.MilliSecondTimer">
            <summary>
              This timer provides milli-second precise system time.
            </summary>
        </member>
        <member name="M:PureCat.Util.HighResTicksProvider.GetTickCount">
            <summary>
              获得当前时间戳，十分之一微秒（100纳秒，和 DateTime.Now.Ticks 刻度一样）
            </summary>
            <returns> </returns>
        </member>
        <member name="M:PureCat.Util.XmlHelper.XmlSerialize(System.Object,System.Text.Encoding)">
            <summary>
            将一个对象序列化为XML字符串
            </summary>
            <param name="o">要序列化的对象</param>
            <param name="encoding">编码方式</param>
            <returns>序列化产生的XML字符串</returns>
        </member>
        <member name="M:PureCat.Util.XmlHelper.XmlSerializeToFile(System.Object,System.String,System.Text.Encoding)">
            <summary>
            将一个对象按XML序列化的方式写入到一个文件
            </summary>
            <param name="o">要序列化的对象</param>
            <param name="path">保存文件路径</param>
            <param name="encoding">编码方式</param>
        </member>
        <member name="M:PureCat.Util.XmlHelper.XmlDeserialize``1(System.String,System.Text.Encoding)">
            <summary>
            从XML字符串中反序列化对象
            </summary>
            <typeparam name="T">结果对象类型</typeparam>
            <param name="s">包含对象的XML字符串</param>
            <param name="encoding">编码方式</param>
            <returns>反序列化得到的对象</returns>
        </member>
        <member name="M:PureCat.Util.XmlHelper.XmlDeserializeFromFile``1(System.String,System.Text.Encoding)">
            <summary>
            读入一个文件，并按XML的方式反序列化对象。
            </summary>
            <typeparam name="T">结果对象类型</typeparam>
            <param name="path">文件路径</param>
            <param name="encoding">编码方式</param>
            <returns>反序列化得到的对象</returns>
        </member>
        <member name="T:Lind.DDD.Commons.DisposableBase">
            <summary>
            实现IDisposable，对非托管系统进行资源回收
            作者：仓储大叔
            </summary>
        </member>
        <member name="M:Lind.DDD.Commons.DisposableBase.Dispose">
            <summary>
            标准Dispose，外界可以直接调用它
            </summary>
        </member>
        <member name="M:Lind.DDD.Commons.DisposableBase.Finalize(System.Boolean)">
            <summary>
            由子类自己去实现自己的Dispose逻辑（清理托管和非托管资源）
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Lind.DDD.Commons.DisposableBase.Finalize">
            <summary>
            析构方法－在类被释放前被执行
            </summary>
        </member>
        <member name="P:Lind.DDD.Commons.DisposableBase.IsDisposed">
            <summary>
            是否完成了资源的释放
            </summary>
        </member>
        <member name="T:Lind.DDD.Commons.ReturnMessage">
            <summary>
            通用消息序列类
            </summary>
        </member>
        <member name="F:Lind.DDD.Commons.ReturnMessage.messageList">
            <summary>
            消息序列
            </summary>
        </member>
        <member name="M:Lind.DDD.Commons.ReturnMessage.AddItem(System.String)">
            <summary>
            向序列中添加新的项
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Lind.DDD.Commons.ReturnMessage.AddItemRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            向序列中追加一个新的序列
            </summary>
            <param name="itemRange">序列对象</param>
        </member>
        <member name="M:Lind.DDD.Commons.ReturnMessage.Clear">
            <summary>
            清空所有现有项
            </summary>
        </member>
        <member name="M:Lind.DDD.Commons.ReturnMessage.GetMessage">
            <summary>
            得到所有消息，每条用逗号分开
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Commons.ReturnMessage.GetFirstMessage">
            <summary>
            得到返回的第一个消息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lind.DDD.Commons.ReturnMessage.IsComplete">
            <summary>
            是否完成
            </summary>
        </member>
        <member name="P:Lind.DDD.Commons.ReturnMessage.Entity">
            <summary>
            可以返回一个IEntity类型的实体
            </summary>
        </member>
        <member name="P:Lind.DDD.Commons.ReturnMessage.Object">
            <summary>
            消息对象
            </summary>
        </member>
        <member name="P:Lind.DDD.Commons.ReturnMessage.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index">索引</param>
            <returns>相应值</returns>
        </member>
        <member name="T:Lind.DDD.ConfigConstants.ConfigManager">
            <summary>
            框架级配置信息初始化，默认使用xml进行存储
            </summary>
        </member>
        <member name="F:Lind.DDD.ConfigConstants.ConfigManager._init">
            <summary>
            模型初始化
            </summary>
        </member>
        <member name="M:Lind.DDD.ConfigConstants.ConfigManager.Install">
            <summary>
            初始化配置项
            </summary>
        </member>
        <member name="M:Lind.DDD.ConfigConstants.ConfigManager.Update(Lind.DDD.ConfigConstants.ConfigModel)">
            <summary>
            编辑配置项
            </summary>
            <param name="?"></param>
        </member>
        <member name="M:Lind.DDD.ConfigConstants.ConfigManager.Delete(System.String)">
            <summary>
            删除配置项
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigManager.Config">
            <summary>
            配置字典
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.ConfigConstants.ConfigModel">
            <summary>
            配置信息实体
            </summary>
        </member>
        <member name="T:Lind.DDD.Domain.NoSqlEntity">
            <summary>
            mongodb,xml,redis实体基类
            主键类型为string
            </summary>
        </member>
        <member name="T:Lind.DDD.Domain.EntityBase">
            <summary>
            领域模型，实体模型基类，它可能有多种持久化方式，如DB,File,Redis,Mongodb,XML等
            Lind.DDD框架的领域模型与数据库实体合二为一
            </summary>
        </member>
        <member name="T:Lind.DDD.Domain.IEntity">
            <summary>
            实体类标示接口
            </summary>
        </member>
        <member name="M:Lind.DDD.Domain.EntityBase.#ctor">
            <summary>
            实体初始化
            </summary>
        </member>
        <member name="M:Lind.DDD.Domain.EntityBase.#ctor(Lind.DDD.Domain.Status,System.DateTime,System.DateTime)">
            <summary>
            带参数的初始化
            </summary>
            <param name="status">状态</param>
            <param name="updateDateTime">更新日期</param>
            <param name="createDateTime">插入日期</param>
        </member>
        <member name="M:Lind.DDD.Domain.EntityBase.GetRuleViolations">
            <summary>
            拿到实体验证的结果列表
            结果为null或者Enumerable.Count()==0表达验证成功
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Domain.EntityBase.EntityBase_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            事件实例
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.Domain.EntityBase.OnPropertyChanged(System.String)">
            <summary>
            触发事件,写在每个属性的set块中CallerMemberName特性表示当前块的属性名
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="P:Lind.DDD.Domain.EntityBase.DataCreateDateTime">
            <summary>
            建立时间
            </summary>
        </member>
        <member name="P:Lind.DDD.Domain.EntityBase.DataUpdateDateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:Lind.DDD.Domain.EntityBase.DataStatus">
            <summary>
            实体状态
            </summary>
        </member>
        <member name="E:Lind.DDD.Domain.EntityBase.PropertyChanged">
            <summary>
            属性值变更事件，外部可以直接订阅它
            </summary>
        </member>
        <member name="M:Lind.DDD.Domain.NoSqlEntity.#ctor">
            <summary>
            初始化NoSql
            </summary>
        </member>
        <member name="M:Lind.DDD.Domain.NoSqlEntity.GetProperyiesDictionary">
            <summary>
            返回mongodb实体的键值对
            </summary>
        </member>
        <member name="P:Lind.DDD.Domain.NoSqlEntity.Id">
            <summary>
            标识列
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Cache_Provider">
            <summary>
            缓存提供者:RuntimeCache,RedisCache
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Cache_ExpireMinutes">
            <summary>
            缓存过期时间(minutes)
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.AoP_CacheStrategy">
            <summary>
            数据集缓存策略：EntLib,Redis
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Queue_Type">
            <summary>
            队列类型：Memory,File,Redis
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Queue_FilePath">
            <summary>
            文件队列的相对目录名
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Logger_Type">
            <summary>
            日志实现方式：File,Log4net,MongoDB
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Logger_Level">
            <summary>
            日志级别：DEBUG|INFO|WARN|ERROR|FATAL|OFF
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Logger_ProjectName">
            <summary>
            日志记录的项目名称
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.PubIntervalForSub">
            <summary>
            pub端重发的时间间隔
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.PubRepeatNumForSub">
            <summary>
            pub端的重发次数
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.MongoDB_Host">
            <summary>
            Mongo连接串，支持多路由localhost:27017,localhost:27018,localhost:27018
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.MongoDB_DbName">
            <summary>
            Mongo-数据库名称
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.MongoDB_UserName">
            <summary>
            Mongo-登陆名
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.MongoDB_Password">
            <summary>
            Mongo-密码
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.RedisHost">
            <summary>
            redis缓存的连接串
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Redis_WriteServerList">
            <summary>
            Redis写服务器，多个服务器用逗号分开
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Redis_ReadServerList">
            <summary>
            Redis读服务器，多个服务器用逗号分开
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Redis_MaxWritePoolSize">
            <summary>
            最大写服务器线程线大小
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Redis_MaxReadPoolSize">
            <summary>
            最大读服务器线程线大小
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Redis_AutoStart">
            <summary>
            是否自动启动
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.MessageType">
            <summary>
            消息发送方式：Email,SMS,RTX
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Messaging_Email_UserName">
            <summary>
            消息机制－Email账号
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Messaging_Email_Password">
            <summary>
            消息机制－Email登陆密码
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Messaging_Email_Host">
            <summary>
            消息机制－Email主机头
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Messaging_Email_Port">
            <summary>
            消息机制－Email端口
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Messaging_Email_Address">
            <summary>
            消息机制-Email地址
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Messaging_Email_DisplayName">
            <summary>
            消息机制-Email显示的名称
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Messaging_RtxApi">
            <summary>
            消息机制－Rtx-发送消息的Api
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Messaging_SMSGateway">
            <summary>
            消息机制－SMS－网关
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Messaging_SMSSignType">
            <summary>
            消息机制－SMS－加密方式
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Messaging_SMSCharset">
            <summary>
            消息机制－SMS－字符编码
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.Messaging_SMSKey">
            <summary>
            消息机制－SMS－短信密钥
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.SocketServerHost">
            <summary>
            Socket通讯地址
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.SocketDataPort">
            <summary>
            Socket数据传输的端口
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.SocketCommandPort">
            <summary>
            Socket远程命令调用（RPC）的端口
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.PropertyChanged">
            <summary>
            实体字段变化是否开启,1:开启,0:关闭
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.EventBusType">
            <summary>
            领域事件存储的介绍:Memory,Redis
            </summary>
        </member>
        <member name="P:Lind.DDD.ConfigConstants.ConfigModel.EventBusRedisKey">
            <summary>
            存储在redis里的领域事件键
            </summary>
        </member>
        <member name="T:Lind.DDD.Domain.Address">
            <summary>
            值对象
            </summary>
        </member>
        <member name="P:Lind.DDD.Domain.Address.Province">
            <summary>
            值对象
            </summary>
        </member>
        <member name="T:Lind.DDD.Domain.OrderItem">
            <summary>
            实体
            </summary>
        </member>
        <member name="P:Lind.DDD.Domain.OrderItem.ProductId">
            <summary>
            实体主键，聚合根内(order)内唯一
            </summary>
        </member>
        <member name="P:Lind.DDD.Domain.OrderItem.ProductName">
            <summary>
            值对象
            </summary>
        </member>
        <member name="T:Lind.DDD.Domain.Order">
            <summary>
            聚合根
            </summary>
        </member>
        <member name="P:Lind.DDD.Domain.Order.Id">
            <summary>
            聚合根主键，全局唯一
            </summary>
        </member>
        <member name="P:Lind.DDD.Domain.Order.OrderNum">
            <summary>
            值对象
            </summary>
        </member>
        <member name="P:Lind.DDD.Domain.Order.UserAddress">
            <summary>
            值对象
            </summary>
        </member>
        <member name="P:Lind.DDD.Domain.Order.OrderItems">
            <summary>
            实体集合
            </summary>
        </member>
        <member name="T:Lind.DDD.Domain.NavigationAttribute">
            <summary>
            导航属性标示
            </summary>
        </member>
        <member name="T:Lind.DDD.Domain.PropertyChangedAttribute">
            <summary>
            类中方法拦截的特性
            </summary>
        </member>
        <member name="T:Lind.DDD.Domain.PropertyChangedProxy">
            <summary>
            属性变更拦截器
            </summary>
        </member>
        <member name="T:Lind.DDD.Exceptions.LindException">
            <summary>
            Lind框架的异常类
            </summary>
        </member>
        <member name="T:Lind.DDD.FastDFS.ConnectionManager">
            <summary>
            服务器连接管理器
            </summary>
        </member>
        <member name="F:Lind.DDD.FastDFS.FDFSConfig.Storage_MaxConnection">
            <summary>
            可同时与storage服务器通信的最大连接数
            </summary>
        </member>
        <member name="F:Lind.DDD.FastDFS.FDFSConfig.Tracker_MaxConnection">
            <summary>
            可同时与tracker服务器通信的最大连接数
            </summary>
        </member>
        <member name="F:Lind.DDD.FastDFS.FDFSConfig.ConnectionTimeout">
            <summary>
            与服务器连接的过期时间(单位：秒)
            </summary>
        </member>
        <member name="F:Lind.DDD.FastDFS.FDFSConfig.Connection_LifeTime">
            <summary>
            连接池中连接的过期时间(单位：秒)
            </summary>
        </member>
        <member name="F:Lind.DDD.FastDFS.FDFSConfig.Tracker_Check_Period">
            <summary>
            tracker服务器组健康性检测周期(单位：秒)
            </summary>
        </member>
        <member name="M:Lind.DDD.FastDFS.FDFSHeader.#ctor(System.Int64,System.Byte,System.Byte)">
            <summary>
            Constructor
            </summary>
            <param name="length"></param>
            <param name="command"></param>
            <param name="status"></param>
        </member>
        <member name="P:Lind.DDD.FastDFS.FDFSHeader.Length">
            <summary>
            Pachage Length
            </summary>        
        </member>
        <member name="P:Lind.DDD.FastDFS.FDFSHeader.Command">
            <summary>
            Command
            </summary>
        </member>
        <member name="P:Lind.DDD.FastDFS.FDFSHeader.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:Lind.DDD.FastDFS.Pool">
            <summary>
            管理连接池
            </summary>
        </member>
        <member name="F:Lind.DDD.FastDFS.Pool.inUse">
            <summary>
            使用中的服务器
            </summary>　
        </member>
        <member name="F:Lind.DDD.FastDFS.Pool.idle">
            <summary>
            断网的服务器
            </summary>
        </member>
        <member name="M:Lind.DDD.FastDFS.Util.LongToBuffer(System.Int64)">
            <summary>
            Convert Long to byte[]
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastDFS.Util.BufferToLong(System.Byte[],System.Int32)">
            <summary>
            Convert byte[] to Long
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastDFS.Util.GetToken(System.String,System.Int32,System.String)">
            <summary>
            get token for file URL
            </summary>
            <param name="file_id">file_id the file id return by FastDFS server</param>
            <param name="ts">ts unix timestamp, unit: second</param>
            <param name="secret_key">secret_key the secret key</param>
            <returns>token string</returns>
        </member>
        <member name="M:Lind.DDD.FastDFS.Util.md5(System.Byte[])">
            <summary>
            md5 function
            </summary>
            <param name="source">source the input buffer </param>
            <returns>md5 string </returns>
        </member>
        <member name="T:Lind.DDD.FastDFS.FastDFSClient">
            <summary>
            FastDFS客户端驱动
            </summary>
        </member>
        <member name="F:Lind.DDD.FastDFS.FastDFSClient.trackerIPs">
            <summary>
            fastDFS服务器地址列表
            </summary>
        </member>
        <member name="F:Lind.DDD.FastDFS.FastDFSClient.endPoint">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="F:Lind.DDD.FastDFS.FastDFSClient.DefaultGroup">
            <summary>
            FastDFS文件组
            </summary>
        </member>
        <member name="M:Lind.DDD.FastDFS.FastDFSClient.#cctor">
            <summary>
            当前默认的组，节，卷名称
            开发人员可以通过FastDFSClient.GetStorageNode("groupname")去指定自己的组
            </summary>
        </member>
        <member name="M:Lind.DDD.FastDFS.FastDFSClient.GetStorageNode(System.String)">
            <summary>
            获取存储节点
            </summary>
            <param name="groupName">组名</param>
            <returns>存储节点实体类</returns>
        </member>
        <member name="M:Lind.DDD.FastDFS.FastDFSClient.UploadFile(Lind.DDD.FastDFS.StorageNode,System.Byte[],System.String,System.Action,System.Action)">
            <summary>
            上传文件
            </summary>
            <param name="storageNode">GetStorageNode方法返回的存储节点</param>
            <param name="contentByte">文件内容</param>
            <param name="fileExt">文件扩展名(注意:不包含".")</param>
            <returns>文件名</returns>
        </member>
        <member name="M:Lind.DDD.FastDFS.FastDFSClient.UploadSlaveFile(System.String,System.Byte[],System.String,System.String,System.String)">
            <summary>
            上传从文件
            </summary>
            <param name="storageNode">GetStorageNode方法返回的存储节点</param>
            <param name="contentByte">文件内容</param>
            <param name="master_filename">主文件名</param>
            <param name="prefix_name">从文件后缀</param>
            <param name="fileExt">文件扩展名(注意:不包含".")</param>
            <returns>文件名</returns>
        </member>
        <member name="M:Lind.DDD.FastDFS.FastDFSClient.UploadAppenderFile(Lind.DDD.FastDFS.StorageNode,System.Byte[],System.String)">
            <summary>
            上传可以Append的文件
            </summary>
            <param name="storageNode">GetStorageNode方法返回的存储节点</param>
            <param name="contentByte">文件内容</param>
            <param name="fileExt">文件扩展名(注意:不包含".")</param>
            <returns>文件名</returns>
        </member>
        <member name="M:Lind.DDD.FastDFS.FastDFSClient.AppendFile(System.String,System.String,System.Byte[])">
            <summary>
            附加文件
            </summary>
            <param name="groupName">组名</param>
            <param name="fileName">文件名</param>
            <param name="contentByte">文件内容</param>
        </member>
        <member name="M:Lind.DDD.FastDFS.FastDFSClient.RemoveFile(System.String,System.String)">
            <summary>
            删除文件
            </summary>
            <param name="groupName">组名</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Lind.DDD.FastDFS.FastDFSClient.DownloadFile(Lind.DDD.FastDFS.StorageNode,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="storageNode">GetStorageNode方法返回的存储节点</param>
            <param name="fileName">文件名</param>
            <returns>文件内容</returns>
        </member>
        <member name="M:Lind.DDD.FastDFS.FastDFSClient.DownloadFile(Lind.DDD.FastDFS.StorageNode,System.String,System.Int64,System.Int64)">
            <summary>
            增量下载文件
            </summary>
            <param name="storageNode">GetStorageNode方法返回的存储节点</param>
            <param name="fileName">文件名</param>
            <param name="offset">从文件起始点的偏移量</param>
            <param name="length">要读取的字节数</param>
            <returns>文件内容</returns>
        </member>
        <member name="M:Lind.DDD.FastDFS.FastDFSClient.GetFileInfo(Lind.DDD.FastDFS.StorageNode,System.String)">
            <summary>
            获取文件信息
            </summary>
            <param name="storageNode">GetStorageNode方法返回的存储节点</param>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastDFS.FastDFSManager">
            <summary>
            redis配置信息加载
            </summary>
        </member>
        <member name="F:Lind.DDD.FastDFS.FastDFSManager.Instance">
            <summary>
            配置信息实体
            </summary>
        </member>
        <member name="T:Lind.DDD.FastDFS.FastDFSSection">
            <summary>
            FastDFSSection块，在web.config中提供FastDFSSection块定义
            </summary>
        </member>
        <member name="P:Lind.DDD.FastDFS.FastDFSSection.Host">
            <summary>
            主机地址
            </summary>
        </member>
        <member name="P:Lind.DDD.FastDFS.FastDFSSection.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:Lind.DDD.FastDFS.FastDFSSection.GroupName">
            <summary>
            默认的组
            </summary>
        </member>
        <member name="T:Lind.DDD.FastDFS.APPEND_FILE">
            <summary>
            append file to storage server
            
            Reqeust 
                Cmd: STORAGE_PROTO_CMD_APPEND_FILE 24
                Body:
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: file name length
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: append file body length
                @ file name
                @ append body 
            Response
                Cmd: STORAGE_PROTO_CMD_RESP
                Status: 0 right other wrong
                Body: 
            </summary>
        </member>
        <member name="M:Lind.DDD.FastDFS.APPEND_FILE.GetRequest(System.Object[])">
            <summary>
            
            </summary>
            <param name="paramList">
            1,IPEndPoint    IPEndPoint-->the storage IPEndPoint
            2,string        FileName
            3,byte[]        File bytes
            </param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastDFS.DELETE_FILE">
            <summary>
            delete file from storage server
            
            Reqeust 
                Cmd: STORAGE_PROTO_CMD_DELETE_FILE 12
                Body:
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name
                @ filename bytes: filename
            Response
                Cmd: STORAGE_PROTO_CMD_RESP
                Status: 0 right other wrong
                Body: 
                    
            </summary>
        </member>
        <member name="M:Lind.DDD.FastDFS.DELETE_FILE.GetRequest(System.Object[])">
            <summary>
            
            </summary>
            <param name="paramList">
            1,IPEndPoint    IPEndPoint-->the storage IPEndPoint
            2,string groupName
            3,string fileName
            </param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastDFS.DOWNLOAD_FILE">
            <summary>
            download/fetch file from storage server
            
            Reqeust 
                Cmd: STORAGE_PROTO_CMD_DOWNLOAD_FILE 14
                Body:
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: file offset
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: download file bytes      
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name
                @ filename bytes: filename
            Response
                Cmd: STORAGE_PROTO_CMD_RESP
                Status: 0 right other wrong
                Body: 
                @ file content
            </summary>
        </member>
        <member name="M:Lind.DDD.FastDFS.DOWNLOAD_FILE.GetRequest(System.Object[])">
            <summary>
            
            </summary>
            <param name="paramList">
            1,IPEndPoint    IPEndPoint-->the storage IPEndPoint
            2,long offset-->file offset
            3,long byteSize -->download file bytes
            4,string groupName
            5,string fileName
            </param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastDFS.GET_METADATA">
            <summary>
            get metat data from storage server
            
            Reqeust 
                Cmd: STORAGE_PROTO_CMD_GET_METADATA 15
                Body:   
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name
                @ filename bytes: filename
            Response
                Cmd: STORAGE_PROTO_CMD_RESP
                Status: 0 right other wrong
                Body: 
                @ meta data buff, each meta data seperated by \x01, name and value seperated by \x02
            </summary>
        </member>
        <member name="T:Lind.DDD.FastDFS.QUERY_FILE_INFO">
            <summary>
            query file info from storage server
            
            Reqeust 
                Cmd: STORAGE_PROTO_CMD_QUERY_FILE_INFO 22
                Body:   
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name
                @ filename bytes: filename
            Response
                Cmd: STORAGE_PROTO_CMD_RESP
                Status: 0 right other wrong
                Body: 
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: file size
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: file create timestamp
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: file CRC32 signature
            </summary>
        </member>
        <member name="M:Lind.DDD.FastDFS.QUERY_FILE_INFO.GetRequest(System.Object[])">
            <summary>
            
            </summary>
            <param name="paramList">
            1,IPEndPoint    IPEndPoint-->the storage IPEndPoint
            2,string fileName
            3,string fileBytes
            </param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastDFS.SET_METADATA">
            <summary>
            set metat data from storage server
            
            Reqeust 
                Cmd: STORAGE_PROTO_CMD_SET_METADATA 13
                Body:
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: filename length 
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: meta data size 
                @ 1 bytes: operation flag,  
                    'O' for overwrite all old metadata 
                    'M' for merge, insert when the meta item not exist, otherwise update it
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name 
                @ filename bytes: filename
                @ meta data bytes: each meta data seperated by \x01,
                    name and value seperated by \x02
            Response
                Cmd: STORAGE_PROTO_CMD_RESP
                Status: 0 right other wrong
                Body: 
                    
            </summary>
        </member>
        <member name="T:Lind.DDD.FastDFS.UPLOAD_APPEND_FILE">
            <summary>
            upload file to storage server
            
            Reqeust 
                Cmd: UPLOAD_APPEND_FILE 23
                Body:
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: filename size
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: file bytes size
                @ filename
                @ file bytes: file content 
            Response
                Cmd: STORAGE_PROTO_CMD_RESP
                Status: 0 right other wrong
                Body: 
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name
                @ filename bytes: filename   
            </summary>
        </member>
        <member name="M:Lind.DDD.FastDFS.UPLOAD_APPEND_FILE.GetRequest(System.Object[])">
            <summary>
            
            </summary>
            <param name="paramList">
            1,IPEndPoint    IPEndPoint-->the storage IPEndPoint
            2,Byte          StorePathIndex
            3,long          FileSize
            4,string        File Ext
            5,byte[FileSize]    File Content
            </param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastDFS.UPLOAD_FILE">
            <summary>
            upload file to storage server
            
            Reqeust 
                Cmd: STORAGE_PROTO_CMD_UPLOAD_FILE 11
                Body:
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: filename size
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: file bytes size
                @ filename
                @ file bytes: file content 
            Response
                Cmd: STORAGE_PROTO_CMD_RESP
                Status: 0 right other wrong
                Body: 
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name
                @ filename bytes: filename   
            </summary>
        </member>
        <member name="M:Lind.DDD.FastDFS.UPLOAD_FILE.GetRequest(System.Object[])">
            <summary>
            
            </summary>
            <param name="paramList">
            1,IPEndPoint    IPEndPoint-->the storage IPEndPoint
            2,Byte          StorePathIndex
            3,long          FileSize
            4,string        File Ext
            5,byte[FileSize]    File Content
            </param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastDFS.UPLOAD_SLAVE_FILE">
            <summary>
            upload slave file to storage server
            
            Reqeust 
                Cmd: STORAGE_PROTO_CMD_UPLOAD_SLAVE_FILE 21
                Body:
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: master filename length
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: file size
                @ FDFS_FILE_PREFIX_MAX_LEN bytes: filename prefix
                @ FDFS_FILE_EXT_NAME_MAX_LEN bytes: file ext name, do not include dot (.)
                @ master filename bytes: master filename
                @ file size bytes: file content
            Response
                Cmd: STORAGE_PROTO_CMD_RESP
                Status: 0 right other wrong
                Body: 
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name
                @ filename bytes: filename
            </summary>
        </member>
        <member name="M:Lind.DDD.FastDFS.UPLOAD_SLAVE_FILE.GetRequest(System.Object[])">
            <summary>
            
            </summary>
            <param name="paramList">
            1,IPEndPoint    IPEndPoint-->the storage IPEndPoint
            2,Byte          StorePathIndex
            3,long          FileSize
            4,string        File Ext
            5,byte[FileSize]    File Content
            </param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastDFS.LIST_ALL_GROUPS">
            <summary>
            list all groups
            
            Reqeust 
                Cmd: TRACKER_PROTO_CMD_SERVER_LIST_ALL_GROUPS 91
                Body:
                
            Response
                Cmd: TRACKER_PROTO_CMD_RESP
                Status: 0 right other wrong
                Body: 
                @ FDFS_GROUP_NAME_MAX_LEN+1 bytes: group name
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: free disk storage in MB
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: storage server count
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: storage server port
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: storage server http port
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: active server count
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: current write server index
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: store path count on storage server
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: subdir count per path on storage server
            </summary>
        </member>
        <member name="T:Lind.DDD.FastDFS.LIST_ONE_GROUP">
            <summary>
            list one groups
            
            Reqeust 
                Cmd: TRACKER_PROTO_CMD_SERVER_LIST_ONE_GROUP 90
                Body:
                @ FDFS_GROUP_NAME_MAX_LEN bytes: the group name to query
            Response
                Cmd: TRACKER_PROTO_CMD_RESP
                Status: 0 right other wrong
                Body: 
                @ FDFS_GROUP_NAME_MAX_LEN+1 bytes: group name
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: free disk storage in MB
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: storage server count
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: storage server port
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: storage server http port
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: active server count
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: current write server index
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: store path count on storage server
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: subdir count per path on storage server
            </summary>
        </member>
        <!-- 对于成员“T:Lind.DDD.FastDFS.LIST_STORAGE”忽略有格式错误的 XML 注释 -->
        <member name="T:Lind.DDD.FastDFS.QUERY_FETCH_ALL">
            <summary>
            query all storage servers to download the file
            
            Reqeust 
                Cmd: TRACKER_PROTO_CMD_SERVICE_QUERY_FETCH_ALL 105
                Body: 
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name
                @ filename bytes: filename
            Response
                Cmd: TRACKER_PROTO_CMD_RESP
                Status: 0 right other wrong
                Body: 
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name
                @ IP_ADDRESS_SIZE - 1 bytes:  storage server ip address (multi)
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: storage server port (multi)
            </summary>
        </member>
        <member name="T:Lind.DDD.FastDFS.QUERY_FETCH_ONE">
            <summary>
            query which storage server to download the file
            
            Reqeust 
                Cmd: TRACKER_PROTO_CMD_SERVICE_QUERY_FETCH_ONE 102
                Body: 
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name
                @ filename bytes: filename
            Response
                Cmd: TRACKER_PROTO_CMD_RESP
                Status: 0 right other wrong
                Body: 
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name
                @ IP_ADDRESS_SIZE - 1 bytes:  storage server ip address
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: storage server port    
            </summary>
        </member>
        <member name="M:Lind.DDD.FastDFS.QUERY_FETCH_ONE.GetRequest(System.Object[])">
            <summary>
            
            </summary>
            <param name="paramList">
            1,string groupName
            2,string fileName
            </param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastDFS.QUERY_STORE_WITHOUT_GROUP_ALL">
            <summary>
            query which storage server to store file
            
            Reqeust 
                Cmd: TRACKER_PROTO_CMD_SERVICE_QUERY_STORE_WITHOUT_GROUP_ALL 106
                Body: 
                
            Response
                Cmd: TRACKER_PROTO_CMD_RESP
                Status: 0 right other wrong
                Body: 
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name
                @ IP_ADDRESS_SIZE - 1 bytes: storage server ip address (multi)
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: storage server port (multi)
                @ 1 byte: store path index on the storage server
            </summary>
        </member>
        <member name="T:Lind.DDD.FastDFS.QUERY_STORE_WITHOUT_GROUP_ONE">
            <summary>
            query which storage server to store file
            
            Reqeust 
                Cmd: TRACKER_PROTO_CMD_SERVICE_QUERY_STORE_WITHOUT_GROUP_ONE 101
                Body: 
                
            Response
                Cmd: TRACKER_PROTO_CMD_RESP
                Status: 0 right other wrong
                Body: 
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name
                @ IP_ADDRESS_SIZE - 1 bytes: storage server ip address
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: storage server port
                @ 1 byte: store path index on the storage server
            </summary>
        </member>
        <member name="T:Lind.DDD.FastDFS.QUERY_STORE_WITH_GROUP_ALL">
            <summary>
            query which storage server to store file
            
            Reqeust 
                Cmd: TRACKER_PROTO_CMD_SERVICE_QUERY_STORE_WITH_GROUP_ALL 107
                Body: 
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name
            Response
                Cmd: TRACKER_PROTO_CMD_RESP
                Status: 0 right other wrong
                Body: 
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name
                @ IP_ADDRESS_SIZE - 1 bytes: storage server ip address
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: storage server port
                @ 1 byte: store path index on the storage server
            </summary>
        </member>
        <member name="T:Lind.DDD.FastDFS.QUERY_STORE_WITH_GROUP_ONE">
            <summary>
            query which storage server to store file
            
            Reqeust 
                Cmd: TRACKER_PROTO_CMD_SERVICE_QUERY_STORE_WITH_GROUP_ONE 104
                Body: 
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name
            Response
                Cmd: TRACKER_PROTO_CMD_RESP
                Status: 0 right other wrong
                Body: 
                @ FDFS_GROUP_NAME_MAX_LEN bytes: group name
                @ IP_ADDRESS_SIZE - 1 bytes: storage server ip address
                @ FDFS_PROTO_PKG_LEN_SIZE bytes: storage server port
                @ 1 byte: store path index on the storage server
            </summary>
        </member>
        <member name="M:Lind.DDD.FastDFS.QUERY_STORE_WITH_GROUP_ONE.GetRequest(System.Object[])">
            <summary>
            
            </summary>
            <param name="paramList">
            1,string groupName-->the storage groupName
            </param>
            <returns></returns>
        </member>
        <!-- 对于成员“T:Lind.DDD.FastDFS.QUERY_UPDATE”忽略有格式错误的 XML 注释 -->
        <member name="M:Lind.DDD.FastDFS.QUERY_UPDATE.GetRequest(System.Object[])">
            <summary>
            
            </summary>
            <param name="paramList">
            1,string groupName
            2,string fileName
            </param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.IoC.DynamicIoCFactory">
            <summary>
            动态IOC生产者，一般根据配置的（数据库，文件)来生产对象
            非单例，每次使用会构建新的对象
            </summary>
        </member>
        <member name="M:Lind.DDD.IoC.DynamicIoCFactory.GetService``1(System.String)">
            <summary>
            生产对象
            </summary>
            <typeparam name="I"></typeparam>
            <param name="class">类型完成名称</param>
            class类型完整名称说明
            var t = Type.GetType("Lind.DDD.ConfigConstants.ConfigModel,Lind.DDD");//一般接口
            var tGeneric = Type.GetType("Lind.DDD.Test.Hello`1,Lind.DDD.Test");//泛型接口
            tGeneric = Type.GetType("Lind.DDD.Repositories.Xml.XmlRepository`1,Lind.DDD.Repositories.Xml");//拿到泛型类型
            tGeneric = tGeneric.MakeGenericType(typeof(Lind.DDD.ConfigConstants.ConfigModel));//注册泛型叁数
            tGeneric = Type.GetType("Lind.DDD.Repositories.Xml.XmlRepository`1[[Lind.DDD.ConfigConstants.ConfigModel,Lind.DDD]],Lind.DDD.Repositories.Xml");//拿到泛型类型
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.Logger.Implements.LoggerBase">
            <summary>
            日志核心基类
            模版方法模式，对InputLogger开放，对其它日志逻辑隐藏，InputLogger可以有多种实现
            </summary>
        </member>
        <member name="T:Lind.DDD.Logger.ILogger">
            <summary>
            日志功能接口规范
            </summary>
        </member>
        <member name="M:Lind.DDD.Logger.ILogger.Logger_Timer(System.String,System.Action)">
            <summary>
            记录代码运行时间，日志文件名以codeTime开头的时间戳
            </summary>
            <param name="message">消息</param>
            <param name="action">所测试的代码块</param>
        </member>
        <member name="M:Lind.DDD.Logger.ILogger.Logger_Exception(System.String,System.Action)">
            <summary>
            记录代码运行异常，日志文件名以Exception开头的时间戳
            </summary>
            <param name="message">消息</param>
            <param name="action">要添加try...catch的代码块</param>
        </member>
        <member name="M:Lind.DDD.Logger.ILogger.Logger_Info(System.String)">
            <summary>
            将message记录到日志文件
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lind.DDD.Logger.ILogger.Logger_Error(System.Exception)">
            <summary>
            异常发生的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lind.DDD.Logger.ILogger.Logger_Debug(System.String)">
            <summary>
            调试期间的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lind.DDD.Logger.ILogger.Logger_Fatal(System.String)">
            <summary>
            引起程序终止的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lind.DDD.Logger.ILogger.Logger_Warn(System.String)">
            <summary>
            引起警告的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lind.DDD.Logger.Implements.LoggerBase.InputLogger(System.String)">
            <summary>
            日志持久化的方法，派生类必须要实现自己的方式
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Lind.DDD.Logger.Implements.LoggerBase.FileUrl">
            <summary>
            日志文件地址
            优化级为mvc方案地址，网站方案地址，console程序地址
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.business.JsApiPay.GetOpenidAndAccessToken">
            
            网页授权获取用户基本信息的全部过程
            详情请参看网页授权获取用户基本信息：http://mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html
            第一步：利用url跳转获取code
            第二步：利用code去获取openid和access_token
            
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.business.JsApiPay.GetUnionIdByOpenId(System.String)">
            <summary>
            通过openID拿到它的唯一unionId
            </summary>
            <param name="openId"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.business.JsApiPay.GetOpenidAndAccessTokenFromCode(System.String)">
            	    * 
            	    * 通过code换取网页授权access_token和openid的返回数据，正确时返回的JSON数据包如下：
            	    * {
            	    *  "access_token":"ACCESS_TOKEN",
            	    *  "expires_in":7200,
            	    *  "refresh_token":"REFRESH_TOKEN",
            	    *  "openid":"OPENID",
            	    *  "scope":"SCOPE",
            	    *  "unionid": "o6_bmasdasdsad6_2sgVt7hMZOPfL"
            	    * }
            	    * 其中access_token可用于获取共享收货地址
            	    * openid是微信支付jsapi支付接口统一下单时必须的参数
                    * 更详细的说明请参考网页授权获取用户基本信息：http://mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html
                    * @失败时抛异常WxPayException
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.business.JsApiPay.GetUnifiedOrderResult(System.String)">
            调用统一下单，获得下单结果
            @return 统一下单结果
            @失败时抛异常WxPayException
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.business.JsApiPay.GetJsApiParameters">
             
            从统一下单成功返回的数据中获取微信浏览器调起jsapi支付所需的参数，
            微信浏览器调起JSAPI时的输入参数格式如下：
            {
              "appId" : "wx2421b1c4370ec43b",     //公众号名称，由商户传入     
              "timeStamp":" 1395712654",         //时间戳，自1970年以来的秒数     
              "nonceStr" : "e61463f8efa94090b1f366cccfbbb444", //随机串     
              "package" : "prepay_id=u802345jgfjsdfgsdg888",     
              "signType" : "MD5",         //微信签名方式:    
              "paySign" : "70EA570631E4BB79628FBCA90534C63FF7FADD89" //微信签名 
            }
            @return string 微信浏览器调起JSAPI时的输入参数，json格式可以直接做参数用
            更详细的说明请参考网页端调起支付API：http://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7
            
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.business.JsApiPay.GetEditAddressParameters">
            
            获取收货地址js函数入口参数,详情请参考收货地址共享接口：http://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_9
            @return string 共享收货地址js函数需要的参数，json格式可以直接做参数使用
        </member>
        <member name="P:Lind.DDD.OnlinePay.WeixinJSApi.business.JsApiPay.page">
            <summary>
            保存页面对象，因为要在类的方法中使用Page的Request对象
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WeixinJSApi.business.JsApiPay.openid">
            <summary>
            openid用于调用统一下单接口
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WeixinJSApi.business.JsApiPay.access_token">
            <summary>
            access_token用于获取收货地址js函数入口参数
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WeixinJSApi.business.JsApiPay.total_fee">
            <summary>
            商品金额，用于统一下单
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WeixinJSApi.business.JsApiPay.unifiedOrderResult">
            <summary>
            统一下单接口返回结果
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.business.MicroPay.Run(System.String,System.String,System.String)">
            刷卡支付完整业务流程逻辑
            @param body 商品描述
            @param total_fee 总金额
            @param auth_code 支付授权码
            @throws WxPayException
            @return 刷卡支付结果
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.business.MicroPay.Query(System.String,System.Int32@)">
            
            查询订单情况
            @param string out_trade_no  商户订单号
            @param int succCode         查询订单结果：0表示订单不成功，1表示订单成功，2表示继续查询
            @return 订单查询接口返回的数据，参见协议接口
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.business.MicroPay.Cancel(System.String,System.Int32)">
            	    * 
            	    * 撤销订单，如果失败会重复调用10次
            	    * @param string out_trade_no 商户订单号
            	    * @param depth 调用次数，这里用递归深度表示
                    * @return false表示撤销失败，true表示撤销成功
        </member>
        <member name="T:Lind.DDD.OnlinePay.WeixinJSApi.business.NativeNotify">
            <summary>
            扫码支付模式一回调处理类
            接收微信支付后台发送的扫码结果，调用统一下单接口并将下单结果返回给微信支付后台
            </summary>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WeixinJSApi.Notify">
            <summary>
            回调处理基类
            主要负责接收微信支付后台发送过来的数据，对数据进行签名验证
            子类在此类基础上进行派生并重写自己的回调处理过程
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.Notify.GetNotifyData">
            <summary>
            接收从微信支付后台发送过来的数据并验证签名
            </summary>
            <returns>微信支付后台返回的数据</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.business.NativePay.GetPrePayUrl(System.String)">
            生成扫描支付模式一URL
            @param productId 商品ID
            @return 模式一URL
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.business.NativePay.GetPayUrl(System.String)">
            生成直接支付url，支付url有效期为2小时,模式二
            @param productId 商品ID
            @return 模式二URL
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.business.NativePay.ToUrlParams(System.Collections.Generic.SortedDictionary{System.String,System.Object})">
            参数数组转换为url格式
            @param map 参数名与参数值的映射表
            @return URL字符串
        </member>
        <member name="T:Lind.DDD.OnlinePay.WeixinJSApi.business.ResultNotify">
            <summary>
            支付结果通知回调处理类
            负责接收微信支付后台发送的支付结果并对订单有效性进行验证，将验证结果反馈给微信支付后台
            </summary>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WeixinJSApi.WxPayConfig">
            配置账号信息
        </member>
        <member name="T:Lind.DDD.OnlinePay.WeixinJSApi.WxPayData">
            <summary>
            微信支付协议接口数据类，所有的API接口通信都依赖这个数据结构，
            在调用接口之前先填充各个字段的值，然后进行接口通信，
            这样设计的好处是可扩展性强，用户可随意对协议进行更改而不用重新设计数据结构，
            还可以随意组合出不同的协议数据包，不用为每个协议设计一个数据包结构
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayData.SetValue(System.String,System.Object)">
                    * 设置某个字段的值
                    * @param key 字段名
                     * @param value 字段值
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayData.GetValue(System.String)">
                    * 根据字段名获取某个字段的值
                    * @param key 字段名
                     * @return key对应的字段值
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayData.IsSet(System.String)">
            判断某个字段是否已设置
            @param key 字段名
            @return 若字段key已被设置，则返回true，否则返回false
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayData.ToXml">
             @将Dictionary转成xml
             @return 经转换得到的xml串
             @throws WxPayException
            
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayData.FromXml(System.String)">
            @将xml转为WxPayData对象并返回对象内部的数据
            @param string 待转换的xml串
            @return 经转换得到的Dictionary
            @throws WxPayException
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayData.ToUrl">
            @Dictionary格式转化成url参数格式
            @ return url格式串, 该串不包含sign字段值
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayData.ToJson">
                    * @Dictionary格式化成Json
                     * @return json串数据
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayData.ToPrintStr">
            @values格式化成能在Web页面上显示的结果（因为web页面上不能直接输出xml格式的字符串）
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayData.MakeSign">
            @生成签名，详见签名生成算法
            @return 签名, sign字段不参加签名
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayData.CheckSign">
            
            检测签名是否正确
            正确返回true，错误抛异常
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayData.GetValues">
            @获取Dictionary
        </member>
        <member name="T:Lind.DDD.OnlinePay.WeixinJSApi.HttpService">
            <summary>
            http连接基础类，负责底层的http通信
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.HttpService.Get(System.String)">
            <summary>
            处理http GET请求，返回数据
            </summary>
            <param name="url">请求的url地址</param>
            <returns>http GET成功后返回的数据，失败抛WebException异常</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.Log.Debug(System.String,System.String)">
            向日志文件写入调试信息
            @param className 类名
            @param content 写入内容
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.Log.Info(System.String,System.String)">
            向日志文件写入运行时信息
            @param className 类名
            @param content 写入内容
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.Log.Error(System.String,System.String)">
            向日志文件写入出错信息
            @param className 类名
            @param content 写入内容
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.Log.WriteLog(System.String,System.String,System.String)">
            实际的写日志操作
            @param type 日志记录类型
            @param className 类名
            @param content 写入内容
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayApi.Micropay(Lind.DDD.OnlinePay.WeixinJSApi.WxPayData,System.Int32)">
            提交被扫支付API
            收银员使用扫码设备读取微信用户刷卡授权码以后，二维码或条码信息传送至商户收银台，
            由商户收银台或者商户后台调用该接口发起支付。
            @param WxPayData inputObj 提交给被扫支付API的参数
            @param int timeOut 超时时间
            @throws WxPayException
            @return 成功时返回调用结果，其他抛异常
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayApi.OrderQuery(Lind.DDD.OnlinePay.WeixinJSApi.WxPayData,System.Int32)">
               
            查询订单
            @param WxPayData inputObj 提交给查询订单API的参数
            @param int timeOut 超时时间
            @throws WxPayException
            @return 成功时返回订单查询结果，其他抛异常
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayApi.Reverse(Lind.DDD.OnlinePay.WeixinJSApi.WxPayData,System.Int32)">
            
            撤销订单API接口
            @param WxPayData inputObj 提交给撤销订单API接口的参数，out_trade_no和transaction_id必填一个
            @param int timeOut 接口超时时间
            @throws WxPayException
            @return 成功时返回API调用结果，其他抛异常
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayApi.Refund(Lind.DDD.OnlinePay.WeixinJSApi.WxPayData,System.Int32)">
            
            申请退款
            @param WxPayData inputObj 提交给申请退款API的参数
            @param int timeOut 超时时间
            @throws WxPayException
            @return 成功时返回接口调用结果，其他抛异常
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayApi.RefundQuery(Lind.DDD.OnlinePay.WeixinJSApi.WxPayData,System.Int32)">
            
            查询退款
            提交退款申请后，通过该接口查询退款状态。退款有一定延时，
            用零钱支付的退款20分钟内到账，银行卡支付的退款3个工作日后重新查询退款状态。
            out_refund_no、out_trade_no、transaction_id、refund_id四个参数必填一个
            @param WxPayData inputObj 提交给查询退款API的参数
            @param int timeOut 接口超时时间
            @throws WxPayException
            @return 成功时返回，其他抛异常
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayApi.DownloadBill(Lind.DDD.OnlinePay.WeixinJSApi.WxPayData,System.Int32)">
            下载对账单
            @param WxPayData inputObj 提交给下载对账单API的参数
            @param int timeOut 接口超时时间
            @throws WxPayException
            @return 成功时返回，其他抛异常
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayApi.ShortUrl(Lind.DDD.OnlinePay.WeixinJSApi.WxPayData,System.Int32)">
            
            转换短链接
            该接口主要用于扫码原生支付模式一中的二维码链接转成短链接(weixin://wxpay/s/XXXXXX)，
            减小二维码数据量，提升扫描速度和精确度。
            @param WxPayData inputObj 提交给转换短连接API的参数
            @param int timeOut 接口超时时间
            @throws WxPayException
            @return 成功时返回，其他抛异常
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayApi.UnifiedOrder(Lind.DDD.OnlinePay.WeixinJSApi.WxPayData,System.Int32)">
            
            统一下单
            @param WxPaydata inputObj 提交给统一下单API的参数
            @param int timeOut 超时时间
            @throws WxPayException
            @return 成功时返回，其他抛异常
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayApi.CloseOrder(Lind.DDD.OnlinePay.WeixinJSApi.WxPayData,System.Int32)">
            
            关闭订单
            @param WxPayData inputObj 提交给关闭订单API的参数
            @param int timeOut 接口超时时间
            @throws WxPayException
            @return 成功时返回，其他抛异常
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayApi.ReportCostTime(System.String,System.Int32,Lind.DDD.OnlinePay.WeixinJSApi.WxPayData)">
            
            测速上报
            @param string interface_url 接口URL
            @param int timeCost 接口耗时
            @param WxPayData inputObj参数数组
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayApi.Report(Lind.DDD.OnlinePay.WeixinJSApi.WxPayData,System.Int32)">
            
            测速上报接口实现
            @param WxPayData inputObj 提交给测速上报接口的参数
            @param int timeOut 测速上报接口超时时间
            @throws WxPayException
            @return 成功时返回测速上报接口返回的结果，其他抛异常
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayApi.GenerateOutTradeNo">
                    * 根据当前系统时间加随机序列来生成订单号
                     * @return 订单号
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayApi.GenerateTimeStamp">
                    * 生成时间戳，标准北京时间，时区为东八区，自1970年1月1日 0点0分0秒以来的秒数
                     * @return 时间戳
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.WxPayApi.GenerateNonceStr">
            生成随机串，随机串包含字母或数字
            @return 随机串
        </member>
        <member name="T:Lind.DDD.OnlinePay.WeixinJSApi.JsApiImplement">
            <summary>
            构建支付处理类
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.JsApiImplement.GetOpenId">
            <summary>
            返回当前微信客户端的OpenId，每个客户端在每个公众号里的OpenId是唯一的
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.JsApiImplement.Send(System.Int32,System.String,System.String)">
            <summary>
            JsApi返回微信支付的连接参数，这个方法需要前台UI页面调用，通常可以使用AJAX进行调用它
            </summary>
            <param name="total_fee">订单金额</param>
            <param name="orderId">业务的订单编号</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.JsApiImplement.Notify(System.Action{Lind.DDD.OnlinePay.WeixinJSApi.NotifyModel})">
            <summary>
            JsApi微信回调
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WeixinJSApi.JsApiImplement.wxJsApiParam">
            <summary>
            H5调起JS API参数
            </summary>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WeixinJSApi.NotifyModel">
            <summary>
            微信回调数据模型
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WeixinJSApi.NotifyModel.Transaction_Id">
            <summary>
            当次交易存储到微信平台的订单号
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WeixinJSApi.NotifyModel.Out_Trade_No">
            <summary>
            (业务系统本身的订单号，它会发到微信，并且微信回调时再返回来)系统本身生成的订单号
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WeixinJSApi.NotifyModel.OpenId">
            <summary>
            对应当前公众号的用户OpenId
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WeixinJSApi.NotifyModel.UniqueId">
            <summary>
            微信用户唯一标识
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.weixinController.Get(System.String,System.Int32,System.String)">
            <summary>
            单击支付按钮，斛发的动作
            </summary>
            <param name="orderId">当前订单号</param>
            <param name="money">价格</param>
            <param name="openId">主页上产生的openId</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WeixinJSApi.weixinController.PayPage">
            <summary>
            支付页面
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.Thrift.demo">
            <summary>
            thrift中间件
            </summary>
        </member>
        <member name="M:Thrift.Protocol.TAbstractBase.Write(Thrift.Protocol.TProtocol)">
            
             Writes the objects out to the protocol
            
        </member>
        <member name="M:Thrift.Protocol.TBase.Read(Thrift.Protocol.TProtocol)">
            
             Reads the TObject from the given input protocol.
            
        </member>
        <member name="T:Lind.DDD.TreeHelper.DataTree`1">
            <summary>
            树型结构统一构建与展现
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Lind.DDD.TreeHelper.DataTree`1.CreateDataTree(System.String,System.Int32[],System.Int32,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            构建树对象
            </summary>
            <param name="name"></param>
            <param name="selectValue"></param>
            <param name="level">等级，默认为0</param>
            <param name="radioButton"></param>
            <param name="controller"></param>
            <param name="displayButton"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.TreeHelper.DataTree`1.GetTree(System.Text.StringBuilder,`0,System.String,System.Int32[],System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            得到树形结构
            </summary>
            <param name="html">当前view</param>
            <param name="entity">树实体</param>
            <param name="name">html元素名称</param>
            <param name="selectValue">当前选中值</param>
            <param name="radioButton">是否为单选框</param>
            <param name="controller">控制器</param>
            <param name="displayButton">是否显示按钮</param>
            <param name="onlyLeafButton">是否为叶子节点才显示单选和复选框</param>
        </member>
        <member name="M:Lind.DDD.TreeHelper.DataTree`1.GetDeleteTree(`0)">
            <summary>
            仓储树的删除
            </summary>
            <param name="tree"></param>
            <param name="repository"></param>
        </member>
        <member name="T:Lind.DDD.TreeHelper.ITree">
            <summary>
            树结果接口
            </summary>
        </member>
        <member name="P:Lind.DDD.TreeHelper.ITree.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Lind.DDD.TreeHelper.ITree.ParentID">
            <summary>
            父ID
            </summary>
        </member>
        <member name="P:Lind.DDD.TreeHelper.ITree.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Lind.DDD.TreeHelper.ITree.Level">
            <summary>
            级别，树的根为0
            </summary>
        </member>
        <member name="P:Lind.DDD.TreeHelper.ITree.IsLeaf">
            <summary>
            是否为叶子节点
            </summary>
        </member>
        <member name="P:Lind.DDD.TreeHelper.ITree.LinkUrl">
            <summary>
            链接地址
            </summary>
        </member>
        <member name="T:Lind.DDD.TreeHelper.ITree`1">
            <summary>
            树结果接口,对泛型的支持
            </summary>
        </member>
        <member name="P:Lind.DDD.TreeHelper.ITree`1.Father">
            <summary>
            父级对象
            </summary>
        </member>
        <member name="P:Lind.DDD.TreeHelper.ITree`1.Sons">
            <summary>
            子孙对象
            </summary>
        </member>
        <member name="T:Lind.DDD.Utils.NotExportAttribute">
            <summary>
            字段不需要被excel导出
            </summary>
        </member>
        <member name="T:Lind.DDD.Utils.ExcelHelper">
            <summary>
            Excel帮助类
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.ExcelHelper.RenderToExcel``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Excle导出
            </summary>
            <typeparam name="T"></typeparam>
            <param name="datas"></param>
        </member>
        <member name="T:Lind.DDD.Utils.Http.CookieHelper">
            <summary>
            Cookie 操作帮助类
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.Http.CookieHelper.Write(System.String,System.String)">
            <summary>
            写cookie值
            </summary>
            <param name="strName">名称</param>
            <param name="strValue">值</param>
        </member>
        <member name="M:Lind.DDD.Utils.Http.CookieHelper.Write``1(System.String,``0)">
            <summary>
            将复杂对象写cookies
            </summary>
            <param name="strName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Lind.DDD.Utils.Http.CookieHelper.WriteWithDomain(System.String,System.String,System.String)">
            <summary>
            写cookie值
            </summary>
            <param name="strName">名称</param>
            <param name="strValue">值</param>
            <param name="doMain">域  例如:contoso.com</param>
        </member>
        <member name="M:Lind.DDD.Utils.Http.CookieHelper.Write(System.String,System.String,System.String)">
            <summary>
            写cookie值
            </summary>
            <param name="strName">名称</param>
            <param name="key">键名</param>
            <param name="strValue">值</param>
        </member>
        <member name="M:Lind.DDD.Utils.Http.CookieHelper.WriteWithDomain(System.String,System.String,System.String,System.String)">
            <summary>
            写cookie值
            </summary>
            <param name="strName">名称</param>
            <param name="key">键名</param>
            <param name="strValue">值</param>
            <param name="doMain">域  例如:contoso.com</param>
        </member>
        <member name="M:Lind.DDD.Utils.Http.CookieHelper.Write(System.String,System.String,System.Int32)">
            <summary>
            写cookie值
            </summary>
            <param name="strName">名称</param>
            <param name="strValue">值</param>
            <param name="strValue">过期时间(分钟)</param>
        </member>
        <member name="M:Lind.DDD.Utils.Http.CookieHelper.WriteWithDomain(System.String,System.String,System.Int32,System.String)">
            <summary>
            写cookie值
            </summary>
            <param name="strName">名称</param>
            <param name="strValue">值</param>
            <param name="strValue">过期时间(分钟)</param>
            <param name="doMain">域  例如:contoso.com</param>
        </member>
        <member name="M:Lind.DDD.Utils.Http.CookieHelper.Write(System.String,System.String,System.String,System.Int32)">
            <summary>
            写cookie值
            </summary>
            <param name="strName">名称</param>
            <param name="key">键名</param>
            <param name="strValue">值</param>
            <param name="expires">过期时间(分钟)</param>
        </member>
        <member name="M:Lind.DDD.Utils.Http.CookieHelper.WriteWithDomain(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            写cookie值
            </summary>
            <param name="strName">名称</param>
            <param name="key">键名</param>
            <param name="strValue">值</param>
            <param name="expires">过期时间(分钟)</param>
            <param name="doMain">域  例如:contoso.com</param>
        </member>
        <member name="M:Lind.DDD.Utils.Http.CookieHelper.Read``1(System.String)">
            <summary>
            读cookies值并转为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.CookieHelper.Read(System.String)">
            <summary>
            读cookie值
            </summary>
            <param name="strName">名称</param>
            <returns>cookie值</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.CookieHelper.Read(System.String,System.String)">
            <summary>
            读cookie值
            </summary>
            <param name="strName">名称</param>
            <param name="key">键名</param>
            <returns>cookie值</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.CookieHelper.Remove(System.String)">
            <summary>
            删除
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Lind.DDD.Utils.Http.CookieHelper.Remove(System.String,System.String)">
            <summary>
            删除
            </summary>
            <param name="name">名称</param>
            <param name="key">二级建名称</param>
        </member>
        <member name="M:Lind.DDD.Utils.Http.HttpImage.getImages(System.String,System.String)">
            <summary>
            获取网页中全部图片
            </summary>
            <param name="url">网页地址</param>
            <param name="charSet">网页编码，为空自动判断</param>
            <returns>全部图片显示代码</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.HttpImage.getImages(System.String)">
            <summary>
            获取网页中全部图片
            </summary>
            <param name="url">网址</param>
            <returns>全部图片代码</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.HttpImage.getHtml(System.String,System.String)">
            <summary>
            获取网页内容
            </summary>
            <param name="url">网站地址</param>
            <param name="charSet">目标网页的编码,如果传入的是null或者"",那就自动分析网页的编码 </param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.Utils.Http.HttpImage.pictures">
            <summary>
            图片文件属性处理类
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.Http.HttpImage.pictures.absUrl(System.String,System.String)">
            <summary>
            根据基路径把相对路径转换成绝对径
            </summary>
            <param name="baseUrl">基础路径</param>
            <param name="u">待转换的相对路径</param>
            <returns>绝对路径</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.HttpImage.pictures.GetAttribute(System.String)">
            <summary>
            获取HTML代码中标签属性
            </summary>
            <param name="strHtml">HTML代码</param>
            <param name="strAttributeName">属性名称</param>
            <returns>属性值集合</returns>
        </member>
        <member name="T:Lind.DDD.Utils.Http.RequestHelper">
            <summary>
            Request操作类
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.IsPost">
            <summary>
            判断当前页面是否接收到了Post请求
            </summary>
            <returns>是否接收到了Post请求</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.IsGet">
            <summary>
            判断当前页面是否接收到了Get请求
            </summary>
            <returns>是否接收到了Get请求</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.GetUrlReferrer">
            <summary>
            返回上一个页面的地址
            </summary>
            <returns>上一个页面的地址</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.GetCurrentFullHost">
            <summary>
            得到当前完整主机头
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.GetHost">
            <summary>
            得到主机头
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.RawUrl">
            <summary>
            获取当前请求的原始 URL(URL 中域信息之后的部分,包括查询字符串(如果存在))
            </summary>
            <returns>原始 URL</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.IsFromBrowser">
            <summary>
            判断当前访问是否来自浏览器软件
            </summary>
            <returns>当前访问是否来自浏览器软件</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.IsFromSearchEngines">
            <summary>
            判断是否来自搜索引擎链接
            </summary>
            <returns>是否来自搜索引擎链接</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.Url">
            <summary>
            获得当前完整Url地址
            </summary>
            <returns>当前完整Url地址</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.GetPageName">
            <summary>
            获得当前页面的名称
            </summary>
            <returns>当前页面的名称</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.ParamCount">
            <summary>
            返回表单或Url参数的总个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.FormString(System.String)">
            <summary>
            获得指定表单参数的值
            </summary>
            <param name="strName">表单参数</param>
            <returns>表单参数的值</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.QueryStrings(System.String)">
            <summary>
            获得指定Url参数的值
            </summary>
            <param name="strName">Url参数</param>
            <returns>Url参数的值</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.IP">
            <summary>
            获得当前页面客户端的IP
            </summary>
            <returns>当前页面客户端的IP</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.GetUrlFileNameWithoutExtension(System.String)">
            <summary>
            获取Url文件名
            </summary>
            <param name="url">Url</param>
            <returns>Url文件名</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.FilterScriptIFrame(System.String)">
            <summary>
            过滤script和iframe
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.FilterScript(System.String)">
            <summary>
            杩囨护鑴氭湰
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.FilterIFrame(System.String)">
            <summary>
            杩囨护妗嗘灦
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.Http.RequestHelper.IsExistUrlFile(System.String)">
            <summary>
            判断远程URL文件是否存在，通过判断文件头的方式
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.Utils.Http.UploadEventArgs">
            <summary> 
            上传数据参数 
            </summary> 
        </member>
        <member name="P:Lind.DDD.Utils.Http.UploadEventArgs.BytesSent">
            <summary> 
            已发送的字节数 
            </summary> 
        </member>
        <member name="P:Lind.DDD.Utils.Http.UploadEventArgs.TotalBytes">
            <summary> 
            总字节数 
            </summary> 
        </member>
        <member name="T:Lind.DDD.Utils.Http.DownloadEventArgs">
            <summary> 
            下载数据参数 
            </summary> 
        </member>
        <member name="P:Lind.DDD.Utils.Http.DownloadEventArgs.BytesReceived">
            <summary> 
            已接收的字节数 
            </summary> 
        </member>
        <member name="P:Lind.DDD.Utils.Http.DownloadEventArgs.TotalBytes">
            <summary> 
            总字节数 
            </summary> 
        </member>
        <member name="P:Lind.DDD.Utils.Http.DownloadEventArgs.ReceivedData">
            <summary> 
            当前缓冲区接收的数据 
            </summary> 
        </member>
        <member name="M:Lind.DDD.Utils.Http.WebClient.#ctor">
            <summary> 
            创建WebClient的实例 
            </summary> 
        </member>
        <member name="M:Lind.DDD.Utils.Http.WebClient.GetHtml(System.String)">
            <summary> 
             获取网页源代码 
            </summary> 
            <param name="url">网址</param> 
            <returns></returns> 
        </member>
        <member name="M:Lind.DDD.Utils.Http.WebClient.DownloadFile(System.String,System.String)">
            <summary> 
            下载文件 
            </summary> 
            <param name="url">文件URL地址</param> 
            <param name="filename">文件保存完整路径</param> 
        </member>
        <member name="M:Lind.DDD.Utils.Http.WebClient.GetData(System.String)">
            <summary> 
            从指定URL下载数据 
            </summary> 
            <param name="url">网址</param> 
            <returns></returns> 
        </member>
        <member name="M:Lind.DDD.Utils.Http.WebClient.Post(System.String,System.String)">
            <summary> 
            向指定URL发送文本数据 
            </summary> 
            <param name="url">网址</param> 
            <param name="postData">urlencode编码的文本数据</param> 
            <returns></returns> 
        </member>
        <member name="M:Lind.DDD.Utils.Http.WebClient.Post(System.String,System.Byte[])">
            <summary> 
            向指定URL发送字节数据 
            </summary> 
            <param name="url">网址</param> 
            <param name="postData">发送的字节数组</param> 
            <returns></returns> 
        </member>
        <member name="M:Lind.DDD.Utils.Http.WebClient.Post(System.String,Lind.DDD.Utils.Http.MultipartForm)">
            <summary> 
            向指定网址发送mulitpart编码的数据 
            </summary> 
            <param name="url">网址</param> 
            <param name="mulitpartForm">mulitpart form data</param> 
            <returns></returns> 
        </member>
        <member name="M:Lind.DDD.Utils.Http.WebClient.GetData(System.Net.HttpWebRequest)">
            <summary> 
            读取请求返回的数据 
            </summary> 
            <param name="request">请求对象</param> 
            <returns></returns> 
        </member>
        <member name="M:Lind.DDD.Utils.Http.WebClient.PostData(System.Net.HttpWebRequest,System.Byte[])">
            <summary> 
            发送请求数据 
            </summary> 
            <param name="request">请求对象</param> 
            <param name="postData">请求发送的字节数组</param> 
        </member>
        <member name="M:Lind.DDD.Utils.Http.WebClient.CreateRequest(System.String,System.String)">
            <summary> 
            创建HTTP请求 
            </summary> 
            <param name="url">URL地址</param> 
            <returns></returns> 
        </member>
        <member name="M:Lind.DDD.Utils.Http.WebClient.SaveCookiesToDisk">
            <summary> 
            将Cookie保存到磁盘 
            </summary> 
        </member>
        <member name="M:Lind.DDD.Utils.Http.WebClient.LoadCookiesFromDisk">
            <summary> 
            从磁盘加载Cookie 
            </summary> 
        </member>
        <member name="P:Lind.DDD.Utils.Http.WebClient.BufferSize">
            <summary> 
            设置发送和接收的数据缓冲大小 
            </summary> 
        </member>
        <member name="P:Lind.DDD.Utils.Http.WebClient.ResponseHeaders">
            <summary> 
            获取响应头集合 
            </summary> 
        </member>
        <member name="P:Lind.DDD.Utils.Http.WebClient.RequestHeaders">
            <summary> 
            获取请求头集合 
            </summary> 
        </member>
        <member name="P:Lind.DDD.Utils.Http.WebClient.Proxy">
            <summary> 
            获取或设置代理 
            </summary> 
        </member>
        <member name="P:Lind.DDD.Utils.Http.WebClient.Encoding">
            <summary> 
            获取或设置请求与响应的文本编码方式 
            </summary> 
        </member>
        <member name="P:Lind.DDD.Utils.Http.WebClient.RespHtml">
            <summary> 
            获取或设置响应的html代码 
            </summary> 
        </member>
        <member name="P:Lind.DDD.Utils.Http.WebClient.CookieContainer">
            <summary> 
            获取或设置与请求关联的Cookie容器 
            </summary> 
        </member>
        <member name="T:Lind.DDD.Utils.Http.MultipartForm">
            <summary> 
            对文件和文本数据进行Multipart形式的编码 
            </summary> 
        </member>
        <member name="M:Lind.DDD.Utils.Http.MultipartForm.#ctor">
            <summary> 
            实例化 
            </summary> 
        </member>
        <member name="M:Lind.DDD.Utils.Http.MultipartForm.AddFlie(System.String,System.String)">
            <summary> 
            添加一个文件 
            </summary> 
            <param name="name">文件域名称</param> 
            <param name="filename">文件的完整路径</param> 
        </member>
        <member name="M:Lind.DDD.Utils.Http.MultipartForm.AddFlie(System.String,System.String,System.Byte[],System.Int32)">
            <summary> 
            添加一个文件 
            </summary> 
            <param name="name">文件域名称</param> 
            <param name="filename">文件名</param> 
            <param name="fileData">文件二进制数据</param> 
            <param name="dataLength">二进制数据大小</param> 
        </member>
        <member name="M:Lind.DDD.Utils.Http.MultipartForm.AddString(System.String,System.String)">
            <summary> 
            添加字符串 
            </summary> 
            <param name="name">文本域名称</param> 
            <param name="value">文本值</param> 
        </member>
        <member name="M:Lind.DDD.Utils.Http.MultipartForm.GetContentType(System.String)">
            <summary> 
            从注册表获取文件类型 
            </summary> 
            <param name="filename">包含扩展名的文件名</param> 
            <returns>如：application/stream</returns> 
        </member>
        <member name="P:Lind.DDD.Utils.Http.MultipartForm.FormData">
            <summary> 
            获取编码后的字节数组 
            </summary> 
        </member>
        <member name="P:Lind.DDD.Utils.Http.MultipartForm.ContentType">
            <summary> 
            获取此编码内容的类型 
            </summary> 
        </member>
        <member name="P:Lind.DDD.Utils.Http.MultipartForm.StringEncoding">
            <summary> 
            获取或设置对字符串采用的编码类型 
            </summary> 
        </member>
        <member name="T:Lind.DDD.Utils.CommonHelper">
            <summary>
            工具类
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.GetEscape(System.String,System.Boolean)">
            <summary>
            获取 通过替换为转义码来转义的元字符集
            </summary>
            <param name="str">包含要转换的文本的输入字符串</param>
            <param name="isWeight">当需要在HTML页面中输出时候选择 true</param>
            <returns>包含要转换的文本的输入字符串</returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.CutString(System.String,System.Int32,System.String)">
            <summary>
            字符串截取
            </summary>
            <param name="oString">字符窜对象</param>
            <param name="showLong">显示长度</param>
            <param name="appeStr">追加字符串</param>
            <returns>返回处理后的字符串</returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.GetStrRealLength(System.String)">
            <summary>
            返回字符串真实长度, 1个汉字长度为2
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.GetStrRealLength(System.Char[])">
            <summary>
            返回字符串真实长度, 1个汉字长度为2
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.RTrim(System.String)">
            <summary>
            删除字符串尾部的回车/换行/空格
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.ClearBR(System.String)">
            <summary>
            清除给定字符串中的回车及换行符
            </summary>
            <param name="str">要清除的字符串</param>
            <returns>清除后返回的字符串</returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.ReplaceString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            自定义的替换字符串函数
            </summary>
            <param name="SourceString">源字符</param>
            <param name="SearchString">老字符</param>
            <param name="ReplaceString">新字符</param>
            <param name="IsCaseInsensetive">是否区分大小写</param>
            <returns>已经替换的字符串</returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.SplitString(System.String,System.String)">
            <summary>
            分割字符串
            </summary>
            <param name="strContent"></param>
            <param name="strSplit"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.GetEmailHostName(System.String)">
            <summary>
            得到Email 的主机名  HostName
            </summary>
            <param name="strEmail">要判断的email字符串</param>
            <returns>Email 的主机名  HostName</returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.HtmlSpaces(System.Int32)">
            <summary>
            生成指定数量的html空格符号
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.IsImgFilename(System.String)">
            <summary>
            判断文件名是否为浏览器可以直接显示的图片文件名
            </summary>
            <param name="filename">文件名</param>
            <returns>是否可以直接显示</returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.GetUrlFileName(System.String)">
            <summary>
            返回URL中结尾的文件名
            </summary>		
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.StrFormat(System.String)">
            <summary>
            替换回车换行符为html换行符
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.HtmlEncode(System.String)">
            <summary>
            返回 HTML 字符串的编码结果
            </summary>
            <param name="str">字符串</param>
            <returns>编码结果</returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.HtmlDecode(System.String)">
            <summary>
            返回 HTML 字符串的解码结果
            </summary>
            <param name="str">字符串</param>
            <returns>解码结果</returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.UrlEncode(System.String)">
            <summary>
            返回 URL 字符串的编码结果
            </summary>
            <param name="str">字符串</param>
            <returns>编码结果</returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.UrlDecode(System.String)">
            <summary>
            返回 URL 字符串的编码结果
            </summary>
            <param name="str">字符串</param>
            <returns>解码结果</returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.RemoveHtml(System.String)">
            <summary>
            移除Html标记
            </summary>
            <param name="content">html</param>
            <returns>string</returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.RemoveUnsafeHtml(System.String)">
            <summary>
            过滤HTML中的不安全标签
            </summary>
            <param name="content">html</param>
            <returns>string</returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.FilterStr(System.String)">
            <summary>
            过滤HTML标签
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.GetTextFromHTML(System.String)">
            <summary>
            从HTML中获取文本,保留br,p,img
            </summary>
            <param name="HTML"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.FileUpLoad(System.String,System.String)">
            <summary>
            数据上传
            </summary>
            <param name="uri">远程地址</param>
            <param name="fileFullName">本地文件全部名称</param>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.GetAssemblyVersion">
            <summary>
            获得Assembly版本号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.GetAssemblyProductName">
            <summary>
            获得Assembly产品名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.GetAssemblyCopyright">
            <summary>
            获得Assembly产品版权
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.SBCCaseToNumberic(System.String)">
            <summary>
            将全角数字转换为数字
            </summary>
            <param name="SBCCase"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.GetHTMLByUrl(System.String)">
            <summary>
            根据Url获取HTML
            </summary>
            <param name="url">Url</param>
            <param name="encoding"></param>
            <returns>HTML</returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.GetHTMLByUrl(System.String,System.Text.Encoding)">
            <summary>
            根据Url获取HTML
            </summary>
            <param name="url">Url</param>
            <param name="encoding"></param>
            <returns>HTML</returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.GetHTMLByUrl(System.String,System.Text.Encoding,System.Collections.Specialized.NameValueCollection)">
            <summary>
            根据Url获取HTML
            </summary>
            <param name="url">Url</param>
            <param name="encoding"></param>
            <param name="nvc"></param>
            <returns>HTML</returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.GetResponseStreamByUrl(System.String)">
            <summary>
            根绝请求URL 获取响应流
            </summary>
            <param name="url">URL</param>
            <returns>响应流</returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.GetResponseStreamByUrl(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            根绝请求URL 获取响应流
            </summary>
            <param name="url">Url</param>
            <param name="nvc">自定义请求头</param>
            <returns>响应流</returns>
        </member>
        <member name="M:Lind.DDD.Utils.CommonHelper.GetNewGuid">
            <summary>
            返回默认的NewGuid
            </summary>
            <returns>NewGuid</returns>
        </member>
        <member name="P:Lind.DDD.Utils.CommonHelper.Monthes">
            <summary>
            根据阿拉伯数字返回月份的名称(可更改为某种语言)
            </summary>	
        </member>
        <member name="T:Lind.DDD.WebExtensions.ButtonType">
            <summary>
            按钮类型
            </summary>
        </member>
        <member name="T:Lind.DDD.WebExtensions.HtmlExtensions">
            <summary>
            HTML标记扩展
            </summary>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.ValidationMessageTextFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            从ModelState中返回指定键对应的验证的错误消息
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="htmlHelper"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.RoleHtmlTags(System.Web.Mvc.HtmlHelper,System.Int32,System.Func{System.String,System.Web.WebPages.HelperResult})">
            <summary>
            页面代码块级权限设计
            </summary>
            <param name="htmlHelper"></param>
            <param name="role">角色ID</param>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.CreateButton(System.Web.Mvc.HtmlHelper,System.String,System.String,Lind.DDD.WebExtensions.ButtonType,System.Enum)">
            <summary>
            建立一个submit类型的按钮
            </summary>
            <param name="htmlHelper"></param>
            <param name="buttonText"></param>
            <param name="userOperatorRole"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.CreateButton(System.Web.Mvc.HtmlHelper,System.String,System.Enum)">
            <summary>
            建立一个submit类型的按钮
            </summary>
            <param name="htmlHelper"></param>
            <param name="buttonText"></param>
            <param name="operatorAuthority"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.CreateActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Boolean,System.String,System.Enum)">
            <summary>
            自定义链接，根据包的状态及用户的权限控制按钮是否被显示，产生A标签的ID属性
            自定义链接，带有权限控制的
            用于调用一个JS方法
            </summary>
            <param name="htmlHelper"></param>
            <param name="linkText">链接名称</param>
            <param name="js">是否是JS方法</param>
            <param name="url">JS方法名或URL</param>
            <param name="userOperatorRole">权限 </param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.CreateActionLink(System.Web.Mvc.HtmlHelper,System.String,System.Boolean,System.String,System.Enum)">
            <summary>
            自定义链接，带有权限控制的
            不产生A标签的ID属性
            </summary>
            <param name="htmlHelper"></param>
            <param name="linkText"></param>
            <param name="js"></param>
            <param name="url"></param>
            <param name="userOperatorRole"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.CreateActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Enum)">
            <summary>
            自定义链接，带有权限控制的
            进行普通的链接跳转
            </summary>
            <param name="htmlHelper"></param>
            <param name="linkText">链接名称</param>
            <param name="url">链接地址</param>
            <param name="userOperatorRole">权限</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.GetDescription(System.Web.Mvc.HtmlHelper,System.Enum)">
            <summary>
            得到指定枚举类型元素的Description特性值
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.EnumForCheckboxHtmlTags(System.Web.Mvc.HtmlHelper,System.Type)">
            <summary>
            遍历枚举对象，输出为复选框的形式,不包括多个Flags值组成的元素
            </summary>
            <param name="htmlHelper"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.EnumForCheckboxHtmlTags(System.Web.Mvc.HtmlHelper,System.String,System.Type)">
            <summary>
             遍历枚举对象，输出为复选框的形式,不包括多个Flags值组成的元素
            </summary>
            <param name="htmlHelper"></param>
            <param name="name"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.EnumForCheckboxHtmlTags(System.Web.Mvc.HtmlHelper,System.Type,System.String)">
            <summary>
             遍历枚举对象，输出为复选框的形式,不包括多个Flags值组成的元素
            </summary>
            <param name="htmlHelper"></param>
            <param name="type"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.EnumForCheckboxHtmlTags(System.Web.Mvc.HtmlHelper,System.String,System.Type,System.String)">
            <summary>
            遍历枚举对象，输出为复选框的形式,不包括多个Flags值组成的元素
            </summary>
            <param name="htmlHelper"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.AddCharInColor(System.String)">
            <summary>
            给字符加上样式
            </summary>
            <param name="reviewContent"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.GetFields(System.String)">
            <summary>
            去除连续的空格
            </summary>
            <param name="strWords"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.NoHTML(System.String)">
            <summary>
            过滤标签
            </summary>
            <param name="Htmlstring"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.CutString(System.String,System.Int32,System.String)">
            <summary>
            截取字符
            </summary>
            <param name="stringHelper"></param>
            <param name="maxlength">长度</param>
            <param name="OperatorJoin">后缀</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.CutString(System.String,System.Int32)">
            <summary>
            截取字符
            </summary>
            <param name="stringHelper"></param>
            <param name="maxlength">长度</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.WebExtensions.HtmlExtensions.DisabledHtml(System.Web.Mvc.HtmlHelper,System.Func{System.String,System.Web.WebPages.HelperResult})">
            <summary>
            屏蔽HTML代码块里的内容,请内容不能点击
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.HttpExtensions.HttpResponse.HttpResponseJson.ResponseJsonMessage(System.Object)">
            <summary>
            API返回JSON对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.Authorization.Mvc.AuthorizationLoginFilter">
            <summary>
            授权过滤器
            Function:MVC模式下使用
            Author:Lind.zhang
            </summary>
        </member>
        <member name="M:Lind.DDD.Authorization.Mvc.AuthorizationLoginFilter.#ctor(System.String,System.String)">
            <summary>
            验证失败后所指向的控制器和action
            可以在使用特性时为它进行赋值
            </summary>
        </member>
        <member name="F:Lind.DDD.Authorization.Mvc.AuthorizationLoginFilter._failControllerName">
            <summary>
            出错时要跳转的控制器
            </summary>
        </member>
        <member name="F:Lind.DDD.Authorization.Mvc.AuthorizationLoginFilter._failActionName">
            <summary>
            出错时要跳转的action
            </summary>
        </member>
        <member name="M:Lind.DDD.Authorization.Mvc.AuthorizationLoginFilter.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
            <summary>
            拦截action
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="T:Lind.DDD.Authorization.MvcCorsAttribute">
            <summary>
            MVC模式下跨域访问
            </summary>
        </member>
        <member name="T:Lind.DDD.Authorization.CorsAttribute">
            <summary>
            跨域资源共享特性
            </summary>
        </member>
        <member name="T:Lind.DDD.Authorization.HttpRequestMessageExtensions">
            <summary>
            HttpRequestMessage扩展方法
            </summary>
        </member>
        <member name="T:Lind.DDD.Authorization.CurrentUser">
            <summary>
            当前登陆的用户信息
            可以有Redis Session和Session进行实现
            </summary>
        </member>
        <member name="M:Lind.DDD.Authorization.CurrentUser.Exit">
            <summary>
            退出登陆
            </summary>
        </member>
        <member name="M:Lind.DDD.Authorization.CurrentUser.Serialize(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            将用户信息持久化到Session
            </summary>
            <param name="userID">用户编号</param>
            <param name="userName">用户名</param>
            <param name="extInfo">扩展信息</param>
            <param name="role">角色</param>
            <param name="department">部门</param>
            <param name="authority">权限</param>
        </member>
        <member name="P:Lind.DDD.Authorization.CurrentUser.UserID">
            <summary>
            当然登陆的用户ID
            </summary>
        </member>
        <member name="P:Lind.DDD.Authorization.CurrentUser.UserName">
            <summary>
            当前登陆的用户名
            </summary>
        </member>
        <member name="P:Lind.DDD.Authorization.CurrentUser.Role">
            <summary>
            用户角色
            </summary>
        </member>
        <member name="P:Lind.DDD.Authorization.CurrentUser.Authority">
            <summary>
            用户权限
            增，删，改，查，冻结，审批
            </summary>
        </member>
        <member name="P:Lind.DDD.Authorization.CurrentUser.Department">
            <summary>
            用户所在的部门（组织结构）
            </summary>
        </member>
        <member name="P:Lind.DDD.Authorization.CurrentUser.ExtInfo">
            <summary>
            当前登陆用户存储的扩展信息
            </summary>
        </member>
        <member name="P:Lind.DDD.Authorization.CurrentUser.IsLogin">
            <summary>
            是否登陆
            </summary>
        </member>
        <member name="T:Lind.DDD.Authorization.HttpMethodFlags">
            <summary>
            Http请求方式，支持位运算
            </summary>
        </member>
        <member name="F:Lind.DDD.Authorization.HttpMethodFlags.GET">
            <summary>
            Get请求
            </summary>
        </member>
        <member name="F:Lind.DDD.Authorization.HttpMethodFlags.POST">
            <summary>
            Post请求
            </summary>
        </member>
        <member name="F:Lind.DDD.Authorization.HttpMethodFlags.PUT">
            <summary>
            Put请求
            </summary>
        </member>
        <member name="F:Lind.DDD.Authorization.HttpMethodFlags.DELETE">
            <summary>
            Delete请求
            </summary>
        </member>
        <member name="T:Lind.DDD.Authorization.Mvc.SSOActionFilter">
            <summary>
            关于SSO单点登陆的实现网站需要使用它
            </summary>
        </member>
        <member name="M:Lind.DDD.Authorization.Mvc.SSOActionFilter.getTokenURL">
            <summary>
            获取带令牌请求的URL
            在当前URL中附加上令牌请求参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Authorization.Mvc.SSOActionFilter.replaceToken">
            <summary>
            去掉URL中的令牌
            在当前URL中去掉令牌参数
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Linq.AutoMapExtensions">
            <summary>
            AutoMapper映射扩展方法
            </summary>
        </member>
        <member name="M:System.Linq.AutoMapExtensions.MapTo``1(System.Collections.IEnumerable)">
            <summary>
            为集合进行automapper
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.AutoMapExtensions.MapToPaged``2(Lind.DDD.Paging.PagedList{``0})">
            <summary>
            为分页集合进行automapper
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="self"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.AutoMapExtensions.MapTo``1(System.Object)">
            <summary>
            为新对象进行automapper
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.AutoMapExtensions.MapTo``1(System.Object,``0)">
            <summary>
            为已经存在的对象进行automapper
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="self"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.CachingQueue.FileDictionary.Demo.OnSendingData(Lind.DDD.CachingQueue.FileDictionary.SendingResult)">
            <summary>
            触发SendData事件
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Lind.DDD.CachingQueue.FileDictionary.Demo.OnSentData(Lind.DDD.CachingQueue.FileDictionary.SentResult)">
            <summary>
            触发OnSendDataSuccess事件
            </summary>
            <param name="obj"></param>
        </member>
        <member name="E:Lind.DDD.CachingQueue.FileDictionary.Demo.SendingData">
            <summary>
            当客户端向服务端发完数据后，触发
            </summary>
        </member>
        <member name="E:Lind.DDD.CachingQueue.FileDictionary.Demo.SentData">
            <summary>
            当客户端发送数据到服务端，并成功返回正确的结果后，触发
            </summary>
        </member>
        <member name="T:Lind.DDD.CachingQueue.FileDictionary.FileDictionaryManager`1">
            <summary>
            文件泛型字典
            </summary>
        </member>
        <member name="F:Lind.DDD.CachingQueue.FileDictionary.FileDictionaryManager`1._dic">
            <summary>
            字典结果集，对外不公开，只开放指定方法
            </summary>
        </member>
        <member name="F:Lind.DDD.CachingQueue.FileDictionary.FileDictionaryManager`1._folder">
            <summary>
            结果集文件夹
            </summary>
        </member>
        <member name="F:Lind.DDD.CachingQueue.FileDictionary.FileDictionaryManager`1._fileName">
            <summary>
            结果集文件名,在派生类中可以去重新定义它
            </summary>
        </member>
        <member name="F:Lind.DDD.CachingQueue.FileDictionary.FileDictionaryManager`1.lockObj">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="F:Lind.DDD.CachingQueue.FileDictionary.FileDictionaryManager`1.sysTimer">
            <summary>
            轮训时间
            </summary>
        </member>
        <member name="F:Lind.DDD.CachingQueue.FileDictionary.FileDictionaryManager`1._instance">
            <summary>
            表字典
            </summary>
        </member>
        <member name="T:Lind.DDD.CachingQueue.FileDictionary.SendingResult">
            <summary>
            数据同步结果对象
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingQueue.FileDictionary.SendingResult.BatchNumber">
            <summary>
            批次号，本次与服务端交互时，唯王标识
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingQueue.FileDictionary.SendingResult.DbName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingQueue.FileDictionary.SendingResult.TableName">
            <summary>
            数据表名称
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingQueue.FileDictionary.SendingResult.StartId">
            <summary>
            批次开始主键号
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingQueue.FileDictionary.SendingResult.EndId">
            <summary>
            批次结束主键号
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingQueue.FileDictionary.SendingResult.OccurDate">
            <summary>
            事件发生的时间
            </summary>
        </member>
        <member name="T:Lind.DDD.CachingQueue.FileDictionary.SentResult">
            <summary>
            数据同步结果对象
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingQueue.FileDictionary.SentResult.Db_TableName">
            <summary>
            数据库及表名称组合
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingQueue.FileDictionary.SentResult.DbName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingQueue.FileDictionary.SentResult.TableName">
            <summary>
            数据表名称
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingQueue.FileDictionary.SentResult.StartId">
            <summary>
            批次开始主键号
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingQueue.FileDictionary.SentResult.EndId">
            <summary>
            批次结束主键号
            </summary>
        </member>
        <member name="T:Lind.DDD.CachingQueue.FileDictionary.SerializableDictionary`2">
            <summary>  
            支持XML序列化的泛型 Dictionary  
            </summary>  
            <typeparam name="TKey"></typeparam>  
            <typeparam name="TValue"></typeparam>  
        </member>
        <member name="M:Lind.DDD.CachingQueue.FileDictionary.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>  
            从对象的 XML 表示形式生成该对象  
            </summary>  
            <param name="reader"></param>  
        </member>
        <member name="M:Lind.DDD.CachingQueue.FileDictionary.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>  
            将对象转换为其 XML 表示形式  
            </summary>  
            <param name="writer"></param>  
        </member>
        <member name="T:Lind.DDD.CachingQueue.Implements.FileQueue">
            <summary>
            基于文件的队列
            </summary>
        </member>
        <member name="T:Lind.DDD.CachingQueue.IQueue">
            <summary>
            队列标准
            </summary>
        </member>
        <member name="M:Lind.DDD.CachingQueue.IQueue.Push(System.Byte[])">
            <summary>
            添加到队列(FIFO)
            </summary>
            <param name="obj">字节数组</param>
        </member>
        <member name="M:Lind.DDD.CachingQueue.IQueue.Pop">
            <summary>
            从队列中取出(FIFO)
            </summary>
            <returns>字节数组</returns>
        </member>
        <member name="P:Lind.DDD.CachingQueue.IQueue.Count">
            <summary>
            得到队列的项目总数
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.CachingQueue.Implements.MemoryQueue">
            <summary>
            默认的队列
            </summary>
        </member>
        <member name="T:Lind.DDD.CachingQueue.QueueManager">
            <summary>
            队列管理器
            appsetting去配置队列方面，它可以是Default,File和Redis
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingQueue.QueueManager.Instance">
            <summary>
            队列实例（单例）
            </summary>
        </member>
        <member name="T:Lind.DDD.CachingQueue.ResultType">
            <summary>
            结果集类型
            </summary>
        </member>
        <member name="T:Lind.DDD.CachingQueue.AsyncResult">
            <summary>
            数据同步结果对象
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingQueue.AsyncResult.PrimaryKey">
            <summary>
            主键＝库名+表名
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingQueue.AsyncResult.DbName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingQueue.AsyncResult.TableName">
            <summary>
            数据表名称
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingQueue.AsyncResult.StartId">
            <summary>
            批次开始主键号
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingQueue.AsyncResult.EndId">
            <summary>
            批次结束主键号
            </summary>
        </member>
        <member name="T:Lind.DDD.CachingQueue.ResultDictionary`1">
            <summary>
            结果泛型字典
            </summary>
        </member>
        <member name="F:Lind.DDD.CachingQueue.ResultDictionary`1._dic">
            <summary>
            字典结果集，对外不公开，只开放指定方法
            </summary>
        </member>
        <member name="F:Lind.DDD.CachingQueue.ResultDictionary`1._folder">
            <summary>
            结果集文件夹
            </summary>
        </member>
        <member name="F:Lind.DDD.CachingQueue.ResultDictionary`1._fileName">
            <summary>
            结果集文件名   
            </summary>
        </member>
        <member name="F:Lind.DDD.CachingQueue.ResultDictionary`1.lockObj">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="F:Lind.DDD.CachingQueue.ResultDictionary`1.sysTimer">
            <summary>
            轮训时间
            </summary>
        </member>
        <member name="F:Lind.DDD.CachingQueue.ResultDictionary`1._instance">
            <summary>
            表字典
            </summary>
        </member>
        <member name="T:Lind.DDD.CachingQueue.SerializableDictionary`2">
            <summary>  
            支持XML序列化的泛型 Dictionary  
            </summary>  
            <typeparam name="TKey"></typeparam>  
            <typeparam name="TValue"></typeparam>  
        </member>
        <member name="M:Lind.DDD.CachingQueue.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>  
            从对象的 XML 表示形式生成该对象  
            </summary>  
            <param name="reader"></param>  
        </member>
        <member name="M:Lind.DDD.CachingQueue.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>  
            将对象转换为其 XML 表示形式  
            </summary>  
            <param name="writer"></param>  
        </member>
        <member name="T:Lind.DDD.CachingDataSet.CacheManager">
            <summary>
            缓存持久化工厂类
            可以由多种持久化的策略
            策略模式和工厂模式的体现
            </summary>
        </member>
        <member name="T:Lind.DDD.CachingDataSet.ICacheProvider">
            <summary>
            表示实现该接口的类型是能够为应用程序提供缓存机制的类型。
            这可以有多种实现机制
            </summary>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.ICacheProvider.Add(System.String,System.String,System.Object)">
            <summary>
            向缓存中添加一个对象。
            </summary>
            <param name="key">缓存的键值，该值通常是使用缓存机制的方法的名称。</param>
            <param name="valKey">缓存值的键值，该值通常是由使用缓存机制的方法的参数值所产生。</param>
            <param name="value">需要缓存的对象。</param>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.ICacheProvider.Put(System.String,System.String,System.Object)">
            <summary>
            向缓存中更新一个对象。
            </summary>
            <param name="key">缓存的键值，该值通常是使用缓存机制的方法的名称。</param>
            <param name="valKey">缓存值的键值，该值通常是由使用缓存机制的方法的参数值所产生。</param>
            <param name="value">需要缓存的对象。</param>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.ICacheProvider.Get(System.String,System.String)">
            <summary>
            从缓存中读取对象。
            </summary>
            <param name="key">缓存的键值，该值通常是使用缓存机制的方法的名称。</param>
            <param name="valKey">缓存值的键值，该值通常是由使用缓存机制的方法的参数值所产生。</param>
            <returns>被缓存的对象。</returns>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.ICacheProvider.Remove(System.String)">
            <summary>
            从缓存中移除对象。
            </summary>
            <param name="key">缓存的键值，该值通常是使用缓存机制的方法的名称。</param>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.ICacheProvider.Exists(System.String)">
            <summary>
            获取一个<see cref="T:System.Boolean"/>值，该值表示拥有指定键值的缓存是否存在。
            </summary>
            <param name="key">指定的键值。</param>
            <returns>如果缓存存在，则返回true，否则返回false。</returns>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.ICacheProvider.Exists(System.String,System.String)">
            <summary>
            获取一个<see cref="T:System.Boolean"/>值，该值表示拥有指定键值和缓存值键的缓存是否存在。
            </summary>
            <param name="key">指定的键值。</param>
            <param name="valKey">缓存值键。</param>
            <returns>如果缓存存在，则返回true，否则返回false。</returns>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.CacheManager.#ctor">
            <summary>
            对外不能创建类的实例
            </summary>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.CacheManager.Add(System.String,System.String,System.Object)">
            <summary>
            向缓存中添加一个对象。
            </summary>
            <param name="key">缓存的键值，该值通常是使用缓存机制的方法的名称。</param>
            <param name="valKey">缓存值的键值，该值通常是由使用缓存机制的方法的参数值所产生。</param>
            <param name="value">需要缓存的对象。</param>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.CacheManager.Put(System.String,System.String,System.Object)">
            <summary>
            向缓存中更新一个对象。
            </summary>
            <param name="key">缓存的键值，该值通常是使用缓存机制的方法的名称。</param>
            <param name="valKey">缓存值的键值，该值通常是由使用缓存机制的方法的参数值所产生。</param>
            <param name="value">需要缓存的对象。</param>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.CacheManager.Get(System.String,System.String)">
            <summary>
            从缓存中读取对象。
            </summary>
            <param name="key">缓存的键值，该值通常是使用缓存机制的方法的名称。</param>
            <param name="valKey">缓存值的键值，该值通常是由使用缓存机制的方法的参数值所产生。</param>
            <returns>被缓存的对象。</returns>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.CacheManager.Remove(System.String)">
            <summary>
            从缓存中移除对象。
            </summary>
            <param name="key">缓存的键值，该值通常是使用缓存机制的方法的名称。</param>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.CacheManager.Exists(System.String)">
            <summary>
            获取一个<see cref="T:System.Boolean"/>值，该值表示拥有指定键值的缓存是否存在。
            </summary>
            <param name="key">指定的键值。</param>
            <returns>如果缓存存在，则返回true，否则返回false。</returns>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.CacheManager.Exists(System.String,System.String)">
            <summary>
            获取一个<see cref="T:System.Boolean"/>值，该值表示拥有指定键值和缓存值键的缓存是否存在。
            </summary>
            <param name="key">指定的键值。</param>
            <param name="valKey">缓存值键。</param>
            <returns>如果缓存存在，则返回true，否则返回false。</returns>
        </member>
        <member name="P:Lind.DDD.CachingDataSet.CacheManager.Instance">
            <summary>
            获取<c>CacheManager</c>类型的单件（Singleton）实例。
            </summary>
        </member>
        <member name="T:Lind.DDD.CachingDataSet.CachingAttribute">
            <summary>
            表示由此特性所描述的方法，能够获得来自Microsoft.Practices.EnterpriseLibrary.Caching基础结构层所提供的缓存功能。
            </summary>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.CachingAttribute.#ctor(Lind.DDD.CachingDataSet.CachingMethod)">
            <summary>
            初始化一个新的<c>CachingAttribute</c>类型。
            </summary>
            <param name="method">缓存方式。</param>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.CachingAttribute.#ctor(Lind.DDD.CachingDataSet.CachingMethod,System.String[])">
            <summary>
            初始化一个新的<c>CachingAttribute</c>类型。
            </summary>
            <param name="method">缓存方式。</param>
            <param name="correspondingMethodNames">与当前缓存方式相关的方法名称。注：此参数仅在缓存方式为Remove时起作用。</param>
        </member>
        <member name="P:Lind.DDD.CachingDataSet.CachingAttribute.Method">
            <summary>
            获取或设置缓存方式。
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingDataSet.CachingAttribute.Force">
            <summary>
            获取或设置一个<see cref="T:System.Boolean"/>值，该值表示当缓存方式为Put时，是否强制将值写入缓存中。
            </summary>
        </member>
        <member name="P:Lind.DDD.CachingDataSet.CachingAttribute.CorrespondingMethodNames">
            <summary>
            获取或设置与当前缓存方式相关的方法名称。注：此参数仅在缓存方式为Remove时起作用。
            </summary>
        </member>
        <member name="T:Lind.DDD.CachingDataSet.CachingBehavior">
            <summary>
            表示用于方法缓存功能的拦截行为。
            </summary>
        </member>
        <member name="F:Lind.DDD.CachingDataSet.CachingBehavior.cacheProjectName">
            <summary>
            缓存项目名称，每个项目有自己的名称
            避免缓存键名重复
            </summary>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.CachingBehavior.GetValueKey(Lind.DDD.CachingDataSet.CachingAttribute,Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation)">
            <summary>
            根据指定的<see cref="T:Lind.DDD.CachingDataSet.CachingAttribute"/>以及<see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation"/>实例，
            获取与某一特定参数值相关的键名。
            </summary>
            <param name="cachingAttribute"><see cref="T:Lind.DDD.CachingDataSet.CachingAttribute"/>实例。</param>
            <param name="input"><see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation"/>实例。</param>
            <returns>与某一特定参数值相关的键名。</returns>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.CachingBehavior.GetRequiredInterfaces">
            <summary>
            获取当前行为需要拦截的对象类型接口。
            </summary>
            <returns>所有需要拦截的对象类型接口。</returns>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.CachingBehavior.Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.GetNextInterceptionBehaviorDelegate)">
            <summary>
            通过实现此方法来拦截调用并执行所需的拦截行为。
            </summary>
            <param name="input">调用拦截目标时的输入信息。</param>
            <param name="getNext">通过行为链来获取下一个拦截行为的委托。</param>
            <returns>从拦截目标获得的返回信息。</returns>
        </member>
        <member name="P:Lind.DDD.CachingDataSet.CachingBehavior.WillExecute">
            <summary>
            获取一个<see cref="T:System.Boolean"/>值，该值表示当前拦截行为被调用时，是否真的需要执行
            某些操作。
            </summary>
        </member>
        <member name="T:Lind.DDD.CachingDataSet.CachingMethod">
            <summary>
            表示用于Caching特性的缓存方式。
            </summary>
        </member>
        <member name="F:Lind.DDD.CachingDataSet.CachingMethod.Get">
            <summary>
            表示需要从缓存中获取对象。如果缓存中不存在所需的对象，系统则会调用实际的方法获取对象，
            然后将获得的结果添加到缓存中。
            </summary>
        </member>
        <member name="F:Lind.DDD.CachingDataSet.CachingMethod.Put">
            <summary>
            表示需要将对象存入缓存。此方式会调用实际方法以获取对象，然后将获得的结果添加到缓存中，
            并直接返回方法的调用结果。
            </summary>
        </member>
        <member name="F:Lind.DDD.CachingDataSet.CachingMethod.Remove">
            <summary>
            表示需要将对象从缓存中移除。
            </summary>
        </member>
        <!-- 对于成员“T:Lind.DDD.CachingDataSet.EntLibCacheProvider”忽略有格式错误的 XML 注释 -->
        <member name="M:Lind.DDD.CachingDataSet.EntLibCacheProvider.Add(System.String,System.String,System.Object)">
            <summary>
            向缓存中添加一个对象。
            </summary>
            <param name="key">缓存的键值，该值通常是使用缓存机制的方法的名称。</param>
            <param name="valKey">缓存值的键值，该值通常是由使用缓存机制的方法的参数值所产生。</param>
            <param name="value">需要缓存的对象。</param>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.EntLibCacheProvider.Put(System.String,System.String,System.Object)">
            <summary>
            向缓存中更新一个对象。
            </summary>
            <param name="key">缓存的键值，该值通常是使用缓存机制的方法的名称。</param>
            <param name="valKey">缓存值的键值，该值通常是由使用缓存机制的方法的参数值所产生。</param>
            <param name="value">需要缓存的对象。</param>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.EntLibCacheProvider.Get(System.String,System.String)">
            <summary>
            从缓存中读取对象。
            </summary>
            <param name="key">缓存的键值，该值通常是使用缓存机制的方法的名称。</param>
            <param name="valKey">缓存值的键值，该值通常是由使用缓存机制的方法的参数值所产生。</param>
            <returns>被缓存的对象。</returns>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.EntLibCacheProvider.Remove(System.String)">
            <summary>
            从缓存中移除对象。
            </summary>
            <param name="key">缓存的键值，该值通常是使用缓存机制的方法的名称。</param>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.EntLibCacheProvider.Exists(System.String)">
            <summary>
            获取一个<see cref="T:System.Boolean"/>值，该值表示拥有指定键值的缓存是否存在。
            </summary>
            <param name="key">指定的键值。</param>
            <returns>如果缓存存在，则返回true，否则返回false。</returns>
        </member>
        <member name="M:Lind.DDD.CachingDataSet.EntLibCacheProvider.Exists(System.String,System.String)">
            <summary>
            获取一个<see cref="T:System.Boolean"/>值，该值表示拥有指定键值和缓存值键的缓存是否存在。
            </summary>
            <param name="key">指定的键值。</param>
            <param name="valKey">缓存值键。</param>
            <returns>如果缓存存在，则返回true，否则返回false。</returns>
        </member>
        <member name="T:Lind.DDD.CachingDataSet.RedisCacheProvider">
             <summary>
            使用redis方式进行缓存持久化
             </summary>
        </member>
        <member name="T:Lind.DDD.LinqExtensions.ExpressionExtensions">
            <summary>
            表达式树的扩展
            </summary>
        </member>
        <member name="M:Lind.DDD.LinqExtensions.ExpressionExtensions.GenerateExpression``1(System.String[],System.Object[],System.String[])">
            <summary>
            构建表达式树
            调用：GenerateExpression(new string[]{"username"},new object[]{"zzl"},new string[]{"="});
            </summary>
            <typeparam name="T">表类型</typeparam>
            <param name="keys">字段名</param>
            <param name="values">字段值</param>
            <param name="operation">操作符</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.LinqExtensions.ExpressionExtensions.FilterPropertyInfo``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            在类型中，过滤表达式树里的属性
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.LinqExtensions.ExpressionExtensions.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            从表达式树里拿到对应的属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.LinqExtensions.ExpressionExtensions.Member``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
             从表达式树里拿到对应的字段
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WapAlipay.Config">
            <summary>
            类名：Config
            功能：基础配置类
            详细：设置帐户有关信息及返回路径
            版本：3.3
            日期：2012-07-05
            说明：
            以下代码只是为了方便商户测试而提供的样例代码，商户可以根据自己网站的需要，按照技术文档编写,并非一定要使用该代码。
            该代码仅供学习和研究支付宝接口使用，只是提供一个参考。
            
            如何获取安全校验码和合作身份者ID
            1.用您的签约支付宝账号登录支付宝网站(www.alipay.com)
            2.点击“商家服务”(https://b.alipay.com/order/myOrder.htm)
            3.点击“查询合作者身份(PID)”、“查询安全校验码(Key)”
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WapAlipay.Config.Partner">
            <summary>
            获取或设置合作者身份ID
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WapAlipay.Config.Key">
            <summary>
            获取或设交易安全校验码
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WapAlipay.Config.Private_key">
            <summary>
            获取或设置商户的私钥
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WapAlipay.Config.Public_key">
            <summary>
            获取或设置支付宝的公钥
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WapAlipay.Config.Input_charset">
            <summary>
            获取字符编码格式
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WapAlipay.Config.Sign_type">
            <summary>
            获取签名方式
            </summary>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WapAlipay.Core">
            <summary>
            类名：Core
            功能：支付宝接口公用函数类
            详细：该类是请求、通知返回两个文件所调用的公用函数核心处理文件，不需要修改
            版本：3.3
            修改日期：2012-07-05
            说明：
            以下代码只是为了方便商户测试而提供的样例代码，商户可以根据自己网站的需要，按照技术文档编写,并非一定要使用该代码。
            该代码仅供学习和研究支付宝接口使用，只是提供一个参考。
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Core.FilterPara(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            除去数组中的空值和签名参数
            </summary>
            <param name="dicArrayPre">过滤前的参数组</param>
            <returns>过滤后的参数组</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Core.SortPara(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            根据字母a到z的顺序把参数排序
            </summary>
            <param name="dicArrayPre">排序前的参数组</param>
            <returns>排序后的参数组</returns>
        </member>
        <!-- 对于成员“M:Lind.DDD.OnlinePay.WapAlipay.Core.CreateLinkString(System.Collections.Generic.Dictionary{System.String,System.String})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Lind.DDD.OnlinePay.WapAlipay.Core.CreateLinkStringUrlencode(System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding)”忽略有格式错误的 XML 注释 -->
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Core.LogResult(System.String)">
            <summary>
            写日志，方便测试（看网站需求，也可以改成把记录存入数据库）
            </summary>
            <param name="sWord">要写入日志里的文本内容</param>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Core.GetAbstractToMD5(System.IO.Stream)">
            <summary>
            获取文件的md5摘要
            </summary>
            <param name="sFile">文件流</param>
            <returns>MD5摘要结果</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Core.GetAbstractToMD5(System.Byte[])">
            <summary>
            获取文件的md5摘要
            </summary>
            <param name="dataFile">文件流</param>
            <returns>MD5摘要结果</returns>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WapAlipay.Notify">
            <summary>
            类名：Notify
            功能：支付宝通知处理类
            详细：处理支付宝各接口通知返回
            版本：3.3
            修改日期：2011-07-05
            '说明：
            以下代码只是为了方便商户测试而提供的样例代码，商户可以根据自己网站的需要，按照技术文档编写,并非一定要使用该代码。
            该代码仅供学习和研究支付宝接口使用，只是提供一个参考。
            
            //////////////////////注意/////////////////////////////
            调试通知返回时，可查看或改写log日志的写入TXT里的数据，来检查通知返回是否正常 
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Notify.#ctor">
            <summary>
            构造函数
            从配置文件中初始化变量
            </summary>
            <param name="inputPara">通知返回参数数组</param>
            <param name="notify_id">通知验证ID</param>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Notify.VerifyReturn(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
             验证消息是否是支付宝发出的合法消息，验证callback
            </summary>
            <param name="inputPara">通知返回参数数组</param>
            <param name="sign">支付宝生成的签名结果</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Notify.VerifyNotify(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
             验证消息是否是支付宝发出的合法消息，验证服务器异步通知
            </summary>
            <param name="inputPara">通知返回参数数组</param>
            <param name="sign">支付宝生成的签名结果</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Notify.GetPreSignStr(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            获取待签名字符串（调试用）
            </summary>
            <param name="inputPara">通知返回参数数组</param>
            <returns>待签名字符串</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Notify.Decrypt(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            解密
            </summary>
            <param name="inputPara">要解密数据</param>
            <returns>解密后结果</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Notify.SortNotifyPara(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            异步通知时，对参数做固定排序
            </summary>
            <param name="dicArrayPre">排序前的参数组</param>
            <returns>排序后的参数组</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Notify.GetSignVeryfy(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            获取返回时的签名验证结果
            </summary>
            <param name="inputPara">通知返回参数数组</param>
            <param name="sign">对比的签名结果</param>
            <param name="isSort">是否对待签名数组排序</param>
            <returns>签名验证结果</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Notify.GetResponseTxt(System.String)">
            <summary>
            获取是否是支付宝服务器发来的请求的验证结果
            </summary>
            <param name="notify_id">通知验证ID</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Notify.Get_Http(System.String,System.Int32)">
            <summary>
            获取远程服务器ATN结果
            </summary>
            <param name="strUrl">指定URL路径地址</param>
            <param name="timeout">超时时间设置</param>
            <returns>服务器ATN结果</returns>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WapAlipay.Submit">
            <summary>
            类名：Submit
            功能：支付宝各接口请求提交类
            详细：构造支付宝各接口表单HTML文本，获取远程HTTP数据
            版本：3.3
            修改日期：2011-07-05
            说明：
            以下代码只是为了方便商户测试而提供的样例代码，商户可以根据自己网站的需要，按照技术文档编写,并非一定要使用该代码。
            该代码仅供学习和研究支付宝接口使用，只是提供一个参考
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Submit.BuildRequestMysign(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            生成请求时的签名
            </summary>
            <param name="sPara">请求给支付宝的参数数组</param>
            <returns>签名结果</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Submit.BuildRequestPara(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            生成要请求给支付宝的参数数组
            </summary>
            <param name="sParaTemp">请求前的参数数组</param>
            <returns>要请求的参数数组</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Submit.BuildRequestParaToString(System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding)">
            <summary>
            生成要请求给支付宝的参数数组
            </summary>
            <param name="sParaTemp">请求前的参数数组</param>
            <param name="code">字符编码</param>
            <returns>要请求的参数数组字符串</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Submit.BuildRequest(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            建立请求，以表单HTML形式构造（默认）
            </summary>
            <param name="GATEWAY_NEW">支付宝网关地址</param>
            <param name="sParaTemp">请求参数数组</param>
            <param name="strMethod">提交方式。两个值可选：post、get</param>
            <param name="strButtonValue">确认按钮显示文字</param>
            <returns>提交表单HTML文本</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Submit.BuildRequest(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            建立请求，以模拟远程HTTP的POST请求方式构造并获取支付宝的处理结果
            </summary>
            <param name="GATEWAY_NEW">支付宝网关地址</param>
            <param name="sParaTemp">请求参数数组</param>
            <returns>支付宝处理结果</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Submit.BuildRequest(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Byte[],System.String,System.Int32)">
            <summary>
            建立请求，以模拟远程HTTP的POST请求方式构造并获取支付宝的处理结果，带文件上传功能
            </summary>
            <param name="GATEWAY_NEW">支付宝网关地址</param>
            <param name="sParaTemp">请求参数数组</param>
            <param name="strMethod">提交方式。两个值可选：post、get</param>
            <param name="fileName">文件绝对路径</param>
            <param name="data">文件数据</param>
            <param name="contentType">文件内容类型</param>
            <param name="lengthFile">文件长度</param>
            <returns>支付宝处理结果</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Submit.ParseResponse(System.String)">
            <summary>
            解析远程模拟提交后返回的信息
            </summary>
            <param name="strText">要解析的字符串</param>
            <returns>解析结果</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Submit.Query_timestamp">
            <summary>
            用于防钓鱼，调用接口query_timestamp来获取时间戳的处理函数
            注意：远程解析XML出错，与IIS服务器配置有关
            </summary>
            <returns>时间戳字符串</returns>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WapAlipay.Demo">
            <summary>
            wap支付宝实例
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Demo.Send">
            <summary>
            发送支付请求
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Demo.Notify">
            <summary>
            服务端回调（ＰＯＳＴ）
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.Demo.Callback">
            <summary>
            服务端回调（ＧＥＴ）
            </summary>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WapAlipay.AlipayMD5">
            <summary>
            类名：MD5
            功能：MD5加密
            版本：3.3
            修改日期：2012-07-05
            说明：
            以下代码只是为了方便商户测试而提供的样例代码，商户可以根据自己网站的需要，按照技术文档编写,并非一定要使用该代码。
            该代码仅供学习和研究支付宝接口使用，只是提供一个参考。
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.AlipayMD5.Sign(System.String,System.String,System.String)">
            <summary>
            签名字符串
            </summary>
            <param name="prestr">需要签名的字符串</param>
            <param name="key">密钥</param>
            <param name="_input_charset">编码格式</param>
            <returns>签名结果</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.AlipayMD5.Verify(System.String,System.String,System.String,System.String)">
            <summary>
            验证签名
            </summary>
            <param name="prestr">需要签名的字符串</param>
            <param name="sign">签名结果</param>
            <param name="key">密钥</param>
            <param name="_input_charset">编码格式</param>
            <returns>验证结果</returns>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WapAlipay.RSAFromPkcs8">
            <summary>
            类名：RSAFromPkcs8
            功能：RSA解密、签名、验签
            详细：该类对Java生成的密钥进行解密和签名以及验签专用类，不需要修改
            版本：2.0
            修改日期：2011-05-10
            说明：
            以下代码只是为了方便商户测试而提供的样例代码，商户可以根据自己网站的需要，按照技术文档编写,并非一定要使用该代码。
            该代码仅供学习和研究支付宝接口使用，只是提供一个参考。
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.RSAFromPkcs8.sign(System.String,System.String,System.String)">
            <summary>
            签名
            </summary>
            <param name="content">需要签名的内容</param>
            <param name="privateKey">私钥</param>
            <param name="input_charset">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.RSAFromPkcs8.verify(System.String,System.String,System.String,System.String)">
            <summary>
            验证签名
            </summary>
            <param name="content">需要验证的内容</param>
            <param name="signedString">签名结果</param>
            <param name="publicKey">公钥</param>
            <param name="input_charset">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.RSAFromPkcs8.decryptData(System.String,System.String,System.String)">
            <summary>
            用RSA解密
            </summary>
            <param name="resData">待解密字符串</param>
            <param name="privateKey">私钥</param>
            <param name="input_charset">编码格式</param>
            <returns>解密结果</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.RSAFromPkcs8.DecodePemPrivateKey(System.String)">
            <summary>
            解析java生成的pem文件私钥
            </summary>
            <param name="pemstr"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WapAlipay.AlipayCallBack">
            <summary>
            支付宝回调方法委托
            </summary>
            <param name="out_trade_no">商户订单号</param>
            <param name="trade_no">支付宝交易号</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WapAlipay.WAPPay">
            <summary>
            wap站支付
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.WAPPay.PayFormString(System.String,System.String,System.Decimal)">
            <summary>
            发送请求到Alipay Wap
            </summary>
            <param name="orderId">商户订单号,不传直接用当前日期时间</param>
            <param name="subject">订单名称</param>
            <param name="total_fee">付款金额</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.WAPPay.AlipayNotify(Lind.DDD.OnlinePay.WapAlipay.AlipayCallBack)">
            <summary>
            支付宝回调地址POST
            </summary>
            <param name="notifySuccess">回调成功后的逻辑,商户订单号和支付宝交易号回调到调用端</param>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.WAPPay.AlipayCallback(Lind.DDD.OnlinePay.WapAlipay.AlipayCallBack,System.Action{System.String})">
            <summary>
             支付宝回调GET
            </summary>
            <param name="notifySuccess">支付成功的回调，商户订单号和支付宝交易号回调到调用端</param>
            <param name="notifyFail">支付失败的回调</param>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.WAPPay.GetRequestGet">
            <summary> 
            获取支付宝GET过来通知消息，并以“参数名=参数值”的形式组成数组
            </summary>
            <returns>request回来的信息组成的数组</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WapAlipay.WAPPay.GetRequestPost">
            <summary>
            获取支付宝POST过来通知消息，并以“参数名=参数值”的形式组成数组
            </summary>
            <returns>request回来的信息组成的数组</returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.ClientBase.SetParam(System.String,System.Object)">
            <summary>
            设置参数
            </summary>
            <param name="name"></param>
            <param name="value">int 或 string 类型</param>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.ClientBase.ValidateParameters">
            <summary>
            验证参数
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.ClientBase.ValidateNotNullParam(System.String,System.String)">
            <summary>
            验证一个参数是否为空
            </summary>
            <param name="name"></param>
            <param name="errorMessage"></param>
        </member>
        <!-- 对于成员“M:Lind.DDD.OnlinePay.Weixin.CommonHelper.GetString1(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.Int32})”忽略有格式错误的 XML 注释 -->
        <member name="T:Lind.DDD.OnlinePay.Weixin.Demo">
            <summary>
            微信支付的调用
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.Demo.Send">
            <summary>
            发送支付请求
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.TradeType.JSAPI">
            <summary>
            JS API（网页内）支付,公众号内付款,微信浏览器
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.TradeType.NATIVE">
            <summary>
            Native（原生）支付，可以生成二次维
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.TradeType.APP">
            <summary>
            App支付
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.TradeState.SUCCESS">
            <summary>
            支付成功
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.TradeState.REFUND">
            <summary>
            转入退款
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.TradeState.NOTPAY">
            <summary>
            未支付
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.TradeState.CLOSED">
            <summary>
            已关闭
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.TradeState.REVOKED">
            <summary>
            已撤销
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.TradeState.USERPAYING">
            <summary>
            用户支付中
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.TradeState.NOPAY">
            <summary>
            未支付(输入密码或确认支付超时)
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.TradeState.PAYERROR">
            <summary>
            支付失败(其他原因，如银行返回失败)
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.ErrorCode.SYSTEMERROR">
            <summary>
            接口后台错误
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.ErrorCode.INVALID_TRANSACTIONID">
            <summary>
            无效 transaction_id
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.ErrorCode.PARAM_ERROR">
            <summary>
            提交参数错误
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.ErrorCode.ORDERPAID">
            <summary>
            订单已支付
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.ErrorCode.OUT_TRADE_NO_USED">
            <summary>
            商户订单号重复
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.ErrorCode.NOAUTH">
            <summary>
            商户无权限
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.ErrorCode.NOTENOUGH">
            <summary>
            余额不足
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.ErrorCode.NOTSUPORTCARD">
            <summary>
            不支持卡类型
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.ErrorCode.ORDERCLOSED">
            <summary>
            订单已关闭
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.ErrorCode.BANKERROR">
            <summary>
            银行系统异常
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.ErrorCode.REFUND_FEE_INVALID">
            <summary>
            退款金额大于支付金额
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.Weixin.ErrorCode.ORDERNOTEXIST">
            <summary>
            订单不存在
            </summary>
        </member>
        <member name="T:Lind.DDD.OnlinePay.Weixin.ResultErrorException">
            <summary>
            业务出错异常  result_code="FAIL" 
            </summary>
        </member>
        <member name="T:Lind.DDD.OnlinePay.Weixin.ReturnErrorException">
            <summary>
            通信出错异常   return_code="FAIL" 
            </summary>
        </member>
        <member name="T:Lind.DDD.OnlinePay.Weixin.Params.OrderQueryParam">
            <summary>
            订单查询接口参数
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Params.OrderQueryParam.Transaction_Id">
            <summary>
            微信订单号  微信的订单号，优先使用  非必填
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Params.OrderQueryParam.Out_Trade_No">
            <summary>
            商户订单号  商户系统内部的订单号, transaction_id、 out_trade_no二选一，如果同时存在优先级：transaction_id> out_trade_no 
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.Params.ParamBuilder.ToXml">
            <summary>
            生成Xml
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.OnlinePay.Weixin.Params.UnifiedOrderParam">
            <summary>
            统一支付接口参数
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Params.UnifiedOrderParam.Body">
            <summary>
            商品描述
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Params.UnifiedOrderParam.Attach">
            <summary>
            附加数据  (非必填)
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Params.UnifiedOrderParam.Out_trade_no">
            <summary>
            商户订单号
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Params.UnifiedOrderParam.Total_fee">
            <summary>
            总金额 单位为分
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Params.UnifiedOrderParam.Spbill_create_ip">
            <summary>
            终端IP  订单生成的机器IP
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Params.UnifiedOrderParam.Time_start">
            <summary>
            交易起始时间  yyyyMMddHHmmss  (非必填)
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Params.UnifiedOrderParam.Time_expire">
            <summary>
            交易结束时间  yyyyMMddHHmmss  (非必填)
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Params.UnifiedOrderParam.Goods_tag">
            <summary>
            商品标记  不能随便填，不使用请置空  (非必填)
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Params.UnifiedOrderParam.Trade_type">
            <summary>
            交易类型
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Params.UnifiedOrderParam.OpenId">
            <summary>
            用户标识   (非必填)  JSAPI模式时必填
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Params.UnifiedOrderParam.Product_id">
            <summary>
            商品ID   (非必填)  NATIVE模式时必填
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Params.UnifiedOrderParam.AppId">
            <summary>
            公众号，商家ID
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.PaymentConfig.AppId">
            <summary>
            公众账号ID  微信公众号身份的唯一标识。审核通过后，在微信发送的邮件中查看
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.PaymentConfig.Mch_Id">
            <summary>
            受理商ID，身份标识
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.PaymentConfig.Key">
            <summary>
            商户支付密钥Key。审核通过后，在微信发送的邮件中查看
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.PaymentConfig.AppSecret">
            <summary>
            JSAPI接口中获取openid，审核后在公众平台开启开发模式后可查看
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.PaymentConfig.JS_API_CALL_URL">
            <summary>
            获取access_token过程中的跳转uri，通过跳转将code传入jsapi支付页面
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.PaymentConfig.CertPath">
            <summary>
            证书路径,注意应该填写绝对路径
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.PaymentConfig.NOTIFY_URL">
            <summary>
            异步通知url，商户根据实际开发过程设定
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.PaymentConfig.Device_Info">
            <summary>
            设备号  (非必填)
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.PaymentConfig.UnifiedOrderUrl">
            <summary>
            统一支付接口
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.PaymentConfig.OrderQueryUrl">
            <summary>
            订单查询接口
            </summary>
        </member>
        <member name="T:Lind.DDD.OnlinePay.Weixin.Results.NotifyResult">
            <summary>
            通知结果
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.ResultBase.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.ResultBase.ErrorCode">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.ResultBase.ErrorMessage">
            <summary>
            错误代码描述
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.NotifyResult.Device_Info">
            <summary>
            设备号
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.NotifyResult.OpenId">
            <summary>
            用户标识
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.NotifyResult.Is_Subscribe">
            <summary>
            是否关注公众号
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.NotifyResult.Trade_Type">
            <summary>
            交易类型
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.NotifyResult.Bank_Type">
            <summary>
            付款银行
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.NotifyResult.Total_Fee">
            <summary>
            总金额
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.NotifyResult.Coupon_Fee">
            <summary>
            现金券金额
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.NotifyResult.Fee_Type">
            <summary>
            货币种类  货币类型，符合 ISO 4217标准的三位字母代码，默认人民币：CNY
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.NotifyResult.Transaction_Id">
            <summary>
            微信支付订单号
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.NotifyResult.Out_Trade_No">
            <summary>
            商户订单号
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.NotifyResult.Attach">
            <summary>
            商家数据包
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.NotifyResult.Time_End">
            <summary>
            支付完成时间
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.NotifyResult.Product_Id">
            <summary>
            产品ID
            </summary>
        </member>
        <member name="T:Lind.DDD.OnlinePay.Weixin.Results.OrderQueryResult">
            <summary>
            订单查询结果
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.OrderQueryResult.Trade_State">
            <summary>
            交易状态
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.Results.ResultBuilder.ReturnCodeValidate">
            <summary>
            返回状态码验证
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.Results.ResultBuilder.ResultCodeValidate">
            <summary>
            业务结果验证
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.Results.ResultBuilder.ValidateWeixinAccount">
            <summary>
            验证默认配置的微信账号
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.Results.ResultBuilder.ValidateWeixinAccount(System.String,System.String)">
            <summary>
            验证微信账号
            </summary>
            <param name="appid"></param>
            <param name="mch_id"></param>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.Results.ResultBuilder.SecurityValidate">
            <summary>
            验证签名
            </summary>
        </member>
        <member name="T:Lind.DDD.OnlinePay.Weixin.Results.UnifiedOrderResult">
            <summary>
            统一支付接口结果
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.UnifiedOrderResult.Trade_Type">
            <summary>
            交易类型
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.UnifiedOrderResult.Prepay_Id">
            <summary>
            预支付订单号
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.Results.UnifiedOrderResult.Code_Url">
            <summary>
            二维码链接
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.WxPayClient.CreateUnifiedOrder(Lind.DDD.OnlinePay.Weixin.Params.UnifiedOrderParam)">
            <summary>
            创建支付订单
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.WxPayClient.Notified(System.Func{Lind.DDD.OnlinePay.Weixin.Results.NotifyResult,Lind.DDD.OnlinePay.Weixin.NotifyReturnMessage})">
            <summary>
            接收消息通知
            </summary>
            <param name="onNotified"></param>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.WxPayClient.QueryOrder(Lind.DDD.OnlinePay.Weixin.Params.OrderQueryParam)">
            <summary>
            查询订单
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.OnlinePay.Weixin.WxPayImpl">
            <summary>
            微信支付实现者
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.WxPayImpl.RechargeTo(System.String,System.Decimal,System.Int32,System.String)">
            <summary>
            提交到微信,返回二维码的ＵＲＬ，通过二维码工具解析它
            </summary>
            <param name="orderid">订单号</param>
            <param name="vMoney">单位：元</param>
            <param name="userID">用户ID</param>
            <param name="product_id">产品ID</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.WxPayImpl.RecieveWxPayNotify(System.Action{Lind.DDD.OnlinePay.Weixin.Results.NotifyResult},System.Action{Lind.DDD.OnlinePay.Weixin.Results.NotifyResult})">
            <summary>
            微信的回调
            </summary>
            <param name="callBack">成功的回调，参数为交易ID，由服务端发到支付宝，再由支付宝返回</param>
            <param name="errBack">失败的回调，参数为失败的消息</param>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.WxPayImpl.ConvertRechargeIDToTradeNo(System.String)">
            <summary>
            将RechargeID转换成微信需要的字符串格式
            </summary>
            <param name="rechargeID"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.WxPayImpl.ConvertRechargeIDToTradeNo(System.Int32)">
            <summary>
            将RechargeID转换成微信需要的字符串格式
            </summary>
            <param name="rechargeID"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.Weixin.WxPayImpl.ConvertTradeNoToRechargeID(System.String)">
            <summary>
            将传给微信的OutTradeNo转成RechargeID
            </summary>
            <param name="tradeNo">微信过期的ＩＤ</param>
            <returns>返回项目里的ＩＤ</returns>
        </member>
        <member name="T:Lind.DDD.OnlinePay.Weixin.WxPaymentConfig">
            <summary>
            配置信息类，存储在当前网站目录configs下面
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.Weixin.WxPaymentConfig.OutTradeNoPrefix">
            <summary>
            发给微信的订单号的前缀，用于区分内测，外测和外正
            </summary>
        </member>
        <member name="T:Test.JobBase">
            <summary>
            工作任务基类
            </summary>
        </member>
        <member name="M:Test.JobBase.ExcuteJob">
            <summary>
            Job具体类去实现自己的逻辑
            </summary>
        </member>
        <member name="P:Test.JobBase.Logger">
            <summary>
            log4日志对象
            </summary>
        </member>
        <member name="T:Lind.DDD.RedisClient.RedisQueueManager">
            <summary>
            redis队列管理者
            </summary>
        </member>
        <member name="M:Lind.DDD.RedisClient.RedisQueueManager.DoQueue``1(System.Action{``0},System.String)">
            <summary>
            实时队列消费者
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:Lind.DDD.RedisClient.RedisTransactionManager">
            <summary>
            Redis事务管理者
            BUG:sql插入成功,redis失败,这时sql不会被回滚,而redis会回滚;而当sql不成功,redis成功时,这时它们数据是一致的
            </summary>
        </member>
        <member name="M:Lind.DDD.RedisClient.RedisTransactionManager.Transaction(ServiceStack.Redis.IRedisClient,System.Action,System.Action)">
            <summary>
            事务块处理
            </summary>
            <param name="redisClient">当前redis库</param>
            <param name="redisAction">Redis事务中的动作</param>
            <param name="sqlAction">Sql事务中的动作</param>
        </member>
        <member name="T:Lind.DDD.SOA.RequestBase">
            <summary>
            请求体基类
            </summary>
        </member>
        <member name="M:Lind.DDD.SOA.RequestBase.#ctor">
            <summary>
            请求初始化
            </summary>
        </member>
        <member name="F:Lind.DDD.SOA.RequestBase.queuePredicate">
            <summary>
            以属性作为查询条件,去掉为空的属性和公用属性
            </summary>
        </member>
        <member name="M:Lind.DDD.SOA.RequestBase.GetProperyiesDictionary">
            <summary>
            得到对象的属性，以键值对的方式返回
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.SOA.RequestBase.GetPageParameters">
            <summary>
            拿到由客户端来的分页参数，构建成分页查询对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.SOA.RequestBase.GetSortDictionary">
            <summary>
            得到排序参数字典，以键值对的方式返回
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.SOA.RequestBase.GetRuleViolations">
            <summary>
            获取验证失败的信息枚举,默认提供了非空验证，派生类可以根据自己的需要去复写这个方法
            个性化验证同样使用yield return返回到IEnumberable列表中
            它使用了简单的迭代器,如果GetRuleViolations有错误则返回迭代列表
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.SOA.RequestBase.GetRuleViolationMessages">
            <summary>
            得到由GetRuleViolations()方法产生的验证消息集合
            实际项目中，可以自己去规定，本方法为虚方法，派生类可以重写
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lind.DDD.SOA.RequestBase.GuidKey">
            <summary>
            本次请求唯一标示
            </summary>
        </member>
        <member name="P:Lind.DDD.SOA.RequestBase.Page">
            <summary>
            分页参数，页码和每页显示的记录数
            例：Page=1,5，表示获取第一页，每页显示5条
            </summary>
        </member>
        <member name="P:Lind.DDD.SOA.RequestBase.Sort">
            <summary>
            排序相关 1 升序,-1 降序
            例：Sort=email|1,username-1
            </summary>
        </member>
        <member name="P:Lind.DDD.SOA.RequestBase.ContainFields">
            <summary>
            需要返回的字段，其它字段将不会被序列化，这些字段使用,分开
            例：ContainFields=username,realname,email
            </summary>
        </member>
        <member name="P:Lind.DDD.SOA.RequestBase.IsValid">
            <summary>
            数据验证(是否成功)
            虚属性，子类可以根据自己的逻辑去复写
            </summary>
        </member>
        <member name="T:Lind.DDD.SOA.ResponseBase">
            <summary>
            响应体基类
            </summary>
        </member>
        <member name="M:Lind.DDD.SOA.ResponseBase.#ctor">
            <summary>
            初始化ResponseMessage
            </summary>
        </member>
        <member name="M:Lind.DDD.SOA.ResponseBase.#ctor(System.String)">
            <summary>
            初始化ResponseMessage
            </summary>
            <param name="serializableFields">希望返回的字段</param>
        </member>
        <member name="P:Lind.DDD.SOA.ResponseBase.GuidKey">
            <summary>
            标示码，与RequestBase里的GuidKey对应
            </summary>
        </member>
        <member name="P:Lind.DDD.SOA.ResponseBase.SerializableFields">
            <summary>
            相应的字段
            </summary>
        </member>
        <member name="T:Lind.DDD.SOA.ResponseMessage">
            <summary>
            返回的相应对象
            Result: 分页返回
            Result: 集合返回
            Result: 实体返回
            </summary>
        </member>
        <member name="M:Lind.DDD.SOA.ResponseMessage.#ctor">
            <summary>
            初始化ResponseMessage
            </summary>
        </member>
        <member name="M:Lind.DDD.SOA.ResponseMessage.#ctor(System.String)">
            <summary>
            初始化ResponseMessage
            </summary>
            <param name="serializableFields">希望返回的字段</param>
        </member>
        <member name="P:Lind.DDD.SOA.ResponseMessage.GuidKey">
            <summary>
            标示码，与RequestBase里的GuidKey对应
            </summary>
        </member>
        <member name="P:Lind.DDD.SOA.ResponseMessage.Status">
            <summary>
            状态码
            100成功，200失败
            </summary>
        </member>
        <member name="P:Lind.DDD.SOA.ResponseMessage.ErrorCode">
            <summary>
            业务错误代码
            </summary>
        </member>
        <member name="P:Lind.DDD.SOA.ResponseMessage.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Lind.DDD.SOA.ResponseMessage.Body">
            <summary>
            只写属性，返回的对象，它不被序列化，只在服务端内存临时存储
            它通常是一个ReponseBase对象或者集合
            </summary>
        </member>
        <member name="P:Lind.DDD.SOA.ResponseMessage.Result">
            <summary>
            只读属性， 根据Body，返回的JSON对象
            </summary>
        </member>
        <member name="T:Lind.DDD.EntityValidation.DigitAttribute">
            <summary>
            数值验证
            </summary>
        </member>
        <member name="T:Lind.DDD.EntityValidation.EntityValidationAttribute">
            <summary>
            通用验证基类
            </summary>
        </member>
        <member name="P:Lind.DDD.EntityValidation.EntityValidationAttribute.rDigit">
            <summary>
            验证数字
            子类可以根据自己的逻辑去重写
            </summary>
        </member>
        <member name="P:Lind.DDD.EntityValidation.EntityValidationAttribute.rPostNumber">
            <summary>
            验证邮编
            子类可以根据自己的逻辑去重写
            </summary>
        </member>
        <member name="P:Lind.DDD.EntityValidation.EntityValidationAttribute.rMobile">
            <summary>
            验证手机
            子类可以根据自己的逻辑去重写
            </summary>
        </member>
        <member name="P:Lind.DDD.EntityValidation.EntityValidationAttribute.rTelePhone">
            <summary>
            验证电话
            子类可以根据自己的逻辑去重写
            </summary>
        </member>
        <member name="P:Lind.DDD.EntityValidation.EntityValidationAttribute.rFex">
            <summary>
            验证传真
            子类可以根据自己的逻辑去重写
            </summary>
        </member>
        <member name="P:Lind.DDD.EntityValidation.EntityValidationAttribute.rEmail">
            <summary>
            验证Email
            子类可以根据自己的逻辑去重写
            </summary>
        </member>
        <member name="P:Lind.DDD.EntityValidation.EntityValidationAttribute.rNumberAndPercent">
            <summary>
            数字或者百分比
            </summary>
        </member>
        <member name="T:Lind.DDD.EntityValidation.EmailAttribute">
            <summary>
            Email验证
            </summary>
        </member>
        <member name="T:Lind.DDD.EntityValidation.FexAttribute">
            <summary>
            传真验证
            </summary>
        </member>
        <!-- 对于成员“T:Lind.DDD.EntityValidation.MessageManager”忽略有格式错误的 XML 注释 -->
        <member name="M:Lind.DDD.EntityValidation.MessageManager.GetMessage(Lind.DDD.EntityValidation.MessageType,System.Object[])">
            <summary>
            得到验证异常的消息集合
            对外公开
            </summary>
            <param name="messageType">异常消息ID</param>
            <param name="args">消息参数集合</param>
            <returns></returns>
        </member>
        <member name="F:Lind.DDD.EntityValidation.MessageManager.Current">
            <summary>
            本类的实例对象
            </summary>
        </member>
        <member name="T:Lind.DDD.EntityValidation.MessageType">
            <summary>
            验证消息类型
            </summary>
        </member>
        <member name="F:Lind.DDD.EntityValidation.MessageType.RequiredField">
            <summary>
            为空验证
            </summary>
        </member>
        <member name="F:Lind.DDD.EntityValidation.MessageType.GreaterThan">
            <summary>
            大于验证
            </summary>
        </member>
        <member name="F:Lind.DDD.EntityValidation.MessageType.LessThan">
            <summary>
            小于验证
            </summary>
        </member>
        <member name="F:Lind.DDD.EntityValidation.MessageType.EmailField">
            <summary>
            邮箱验证
            </summary>
        </member>
        <member name="F:Lind.DDD.EntityValidation.MessageType.DigitField">
            <summary>
            数字验证
            </summary>
        </member>
        <member name="F:Lind.DDD.EntityValidation.MessageType.PostNumberField">
            <summary>
            邮编验证
            </summary>
        </member>
        <member name="F:Lind.DDD.EntityValidation.MessageType.MobileField">
            <summary>
            手机验证
            </summary>
        </member>
        <member name="F:Lind.DDD.EntityValidation.MessageType.TelePhoneField">
            <summary>
            电话验证
            </summary>
        </member>
        <member name="F:Lind.DDD.EntityValidation.MessageType.FexField">
            <summary>
            传真验证
            </summary>
        </member>
        <member name="T:Lind.DDD.EntityValidation.MobileAttribute">
            <summary>
            手机验证
            </summary>
        </member>
        <member name="T:Lind.DDD.EntityValidation.PostNumberAttribute">
            <summary>
            邮编验证
            </summary>
        </member>
        <member name="T:Lind.DDD.EntityValidation.RangeAttribute">
            <summary>
            范围验证
            </summary>
        </member>
        <member name="T:Lind.DDD.EntityValidation.RequiredValueAttribute">
            <summary>
            为空验证
            </summary>
        </member>
        <member name="T:Lind.DDD.EntityValidation.RuleViolation">
            <summary>
            验证信息实体
            </summary>
        </member>
        <member name="M:Lind.DDD.EntityValidation.RuleViolation.#ctor(System.String)">
            <summary>
            初始化验证信息实体
            </summary>
            <param name="errorMessage">错误信息</param>
        </member>
        <member name="M:Lind.DDD.EntityValidation.RuleViolation.#ctor(System.String,System.String)">
            <summary>
            初始化验证信息实体
            </summary>
            <param name="errorMessage">错误信息</param>
            <param name="propertyName">引起错误的属性</param>
        </member>
        <member name="M:Lind.DDD.EntityValidation.RuleViolation.ToString">
            <summary>
            重写方法
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lind.DDD.EntityValidation.RuleViolation.ErrorMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Lind.DDD.EntityValidation.RuleViolation.PropertyName">
            <summary>
            引起错误的属性
            </summary>
        </member>
        <member name="T:Lind.DDD.EntityValidation.TelePhoneAttribute">
            <summary>
            电话验证
            </summary>
        </member>
        <member name="T:Lind.DDD.Filters.ActionLoggerAttribute">
            <summary>
             API页面加载过程的进行日志记录
            </summary>
        </member>
        <member name="T:Lind.DDD.Filters.MvcActionLoggerAttribute">
            <summary>
            Mvc页面加载过程的进行日志记录
            </summary>
        </member>
        <member name="T:Lind.DDD.Filters.ExceptionErrorLoggerAttribute">
            <summary>
            API全局异常信息收集器
            使用:WebApiConfig/Register/  config.Filters.Add(new Lind.DDD.Exceptions.ExceptionErrorLoggerAttribute());
            </summary>
        </member>
        <member name="M:Lind.DDD.Filters.ExceptionErrorLoggerAttribute.OnException(System.Web.Http.Filters.HttpActionExecutedContext)">
            <summary>
            API环境下，出现异常时进入此方法
            </summary>
            <param name="actionExecutedContext"></param>
        </member>
        <member name="T:Lind.DDD.Filters.MvcExceptionErrorLoggerAttribute">
            <summary>
            MVC环境下，全局错误异常捕捉
            </summary>
        </member>
        <member name="T:Lind.DDD.HttpExtensions.HttpHandlers.CorsMessageHandler">
            <summary>
             Cors处理程序
            </summary>
        </member>
        <member name="T:Lind.DDD.HttpExtensions.HttpHandlers.HtmlTextHandler">
            <summary>
            HTML编码的处理程序
            </summary>
        </member>
        <!-- 对于成员“T:Lind.DDD.HttpExtensions.HttpHandlers.ImageScalingHandler”忽略有格式错误的 XML 注释 -->
        <member name="M:Lind.DDD.HttpExtensions.HttpHandlers.ImageScalingHandler.CreateThumbnail(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            图像等比例缩放，图像默认为白色
            </summary>
            <param name="image"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.HttpExtensions.HttpHandlers.ImageScalingHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            处理请求
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Lind.DDD.HttpExtensions.HttpModules.SessionProviderHttpModule">
            <summary>
            session共享sessionId
            </summary>
        </member>
        <member name="T:Lind.DDD.HttpExtensions.HttpModules.UrlRewriteModule">
            <summary>
            实现URL的重写，支持扩展名jpg,png,jpeg,gif，主要用于图像的缩放，与ImageScalingHandler一起使用
            </summary>
        </member>
        <!-- 对于成员“M:Lind.DDD.HttpExtensions.HttpModules.UrlRewriteModule.Application_BeginRequest(System.Object,System.EventArgs)”忽略有格式错误的 XML 注释 -->
        <member name="T:Lind.DDD.HttpExtensions.HttpResponse.FileRequestController">
            <summary>
            提供一组文件下载的接口
            </summary>
        </member>
        <member name="M:Lind.DDD.HttpExtensions.HttpResponse.FileRequestController.DownHttpRequest(System.String)">
            <summary>
             下载Http请求的文件,走http协议
            </summary>
            <param name="url">图片的ＵＲＩ</param>
            <param name="contentType">图片的内容类型</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.HttpExtensions.HttpResponse.FileRequestController.ImageAddText(System.String,System.String)">
            <summary>
            为图像加文字
            </summary>
            <param name="url">图像文件URI</param>
            <param name="text">加添加的字符</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.HttpExtensions.HttpResponse.FileRequestController.DownFileRequest(System.String)">
            <summary>
            下载File请求的文件,走File协议, 如file://www.cnblogs.com/lori/1.jpg
            </summary>
            <param name="url">文件ＵＲＩ或者本地路径</param>
            <param name="fileType">文件类型</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.HttpExtensions.HttpResponse.FileRequestController.Down(System.String,System.String)">
            <summary>
            将HTTP请求的文件下载到WWW服务器，分段下载
            </summary>
            <param name="url">源地址</param>
            <param name="desFilePath">目标地址</param>
        </member>
        <member name="M:Lind.DDD.HttpExtensions.HttpResponse.FileRequestController.AsyncWriteFileFromStream(System.String,System.Net.HttpWebResponse)">
            <summary>
            异步方式，将HTTP响应流写入文件
            Verson:.net frameworks 4.5
            </summary>
            <param name="desFilePath"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.HttpExtensions.HttpResponse.JsonpMediaTypeFormatter">
            <summary>
            对jsonp响应流的封装
            </summary>
        </member>
        <member name="T:Lind.DDD.HttpExtensions.HttpResponse.ValidateCode">
            <summary>
            生成验证码对象
            </summary>
        </member>
        <member name="M:Lind.DDD.HttpExtensions.HttpResponse.ValidateCode.LoginRandNum(System.Int32,System.Int32)">
            <summary>
            返回一个登录随机数
            <remarks></remarks> 
            <param name="minValue">随机数下限。</param>
            <param name="maxValue">随机数上限。</param>
            </summary>
        </member>
        <!-- 对于成员“M:Lind.DDD.HttpExtensions.HttpResponse.ValidateCode.CreatePicCode(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Lind.DDD.HttpExtensions.HttpResponse.ValidateCode.MakeVerifyCode(System.Int32)">
            <summary>
            随机生成验证码
            </summary>
            <param name="Numberlength"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.IRepositories.IMongoRepository`1">
            <summary>
            MongoDB操作规范
            </summary>
        </member>
        <member name="T:Lind.DDD.IRepositories.IExtensionRepository`1">
            <summary>
            扩展的Repository操作规范
            </summary>
        </member>
        <member name="T:Lind.DDD.IRepositories.IRepository`1">
            <summary>
            基本仓储操作接口
            out表示类型的协变,可以进行子类与父类的返回类型转换,in表示逆变
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Lind.DDD.UoW.IUnitOfWorkRepository">
            <summary>
            工作单元中仓储接口CRUD操作
            需要使用工作单元的仓储，需要实现本接口（IRepository,IExtensionRepository)
            </summary>
        </member>
        <member name="M:Lind.DDD.UoW.IUnitOfWorkRepository.UoWInsert(Lind.DDD.Domain.IEntity)">
            <summary>
            添加实体
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Lind.DDD.UoW.IUnitOfWorkRepository.UoWUpdate(Lind.DDD.Domain.IEntity)">
            <summary>
            更新实体
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Lind.DDD.UoW.IUnitOfWorkRepository.UoWDelete(Lind.DDD.Domain.IEntity)">
            <summary>
            移除实体
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Lind.DDD.UoW.IUnitOfWorkRepository.UoWInsert(System.Collections.Generic.IEnumerable{Lind.DDD.Domain.IEntity})">
            <summary>
            添加集合
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Lind.DDD.UoW.IUnitOfWorkRepository.UoWUpdate(System.Collections.Generic.IEnumerable{Lind.DDD.Domain.IEntity})">
            <summary>
            更新集合
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Lind.DDD.UoW.IUnitOfWorkRepository.UoWDelete(System.Collections.Generic.IEnumerable{Lind.DDD.Domain.IEntity})">
            <summary>
            移除集合
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Lind.DDD.IRepositories.IRepository`1.Find(System.Object[])">
            <summary>
            通过主键拿一个对象
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IRepository`1.GetModel">
            <summary>
            拿到可查询结果集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IRepository`1.SetDataContext(System.Object)">
            <summary>
            设置当前数据库上下文对象，与具体ORM无关，上下文应该继承Lind.DDD.UnitOfWork.IDataContext
            </summary>
        </member>
        <member name="M:Lind.DDD.IRepositories.IRepository`1.Insert(`0)">
            <summary>
            插入对象
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Lind.DDD.IRepositories.IRepository`1.Update(`0)">
            <summary>
            更新对象
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Lind.DDD.IRepositories.IRepository`1.Delete(`0)">
            <summary>
            删除对象
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Lind.DDD.IRepositories.IOrderableRepository`1">
            <summary>
            提供排序功能的规范
            </summary>
        </member>
        <member name="M:Lind.DDD.IRepositories.IOrderableRepository`1.GetModel(System.Action{Lind.DDD.IRepositories.Commons.IOrderable{`0}})">
            <summary>
            带排序的结果集
            </summary>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IOrderableRepository`1.GetModel(System.Action{Lind.DDD.IRepositories.Commons.IOrderable{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据指定lambda表达式和排序方式,得到延时结果集
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IExtensionRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加集合[集合数目不大时用此方法，超大集合使用BulkInsert]
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Lind.DDD.IRepositories.IExtensionRepository`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改集合[集合数目不大时用此方法，超大集合使用BulkUpdate]
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Lind.DDD.IRepositories.IExtensionRepository`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除集合[集合数目不大时用此方法，超大集合使用批量删除]
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Lind.DDD.IRepositories.IExtensionRepository`1.BulkInsert(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            批量添加，添加之前可以去除自增属性,默认不去除
            </summary>
            <param name="item"></param>
            <param name="isRemoveIdentity"></param>
        </member>
        <member name="M:Lind.DDD.IRepositories.IExtensionRepository`1.BulkInsert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量添加
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Lind.DDD.IRepositories.IExtensionRepository`1.BulkUpdate(System.Collections.Generic.IEnumerable{`0},System.String[])">
            <summary>
            批量更新
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Lind.DDD.IRepositories.IExtensionRepository`1.BulkDelete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量删除
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Lind.DDD.IRepositories.IExtensionRepository`1.GetModel(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据指定lambda表达式,得到延时结果集
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IExtensionRepository`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据指定lambda表达式,得到第一个实体
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IExtensionRepository`1.GetModel(Lind.DDD.Specification.ISpecification{`0})">
            <summary>
            根据指定规约,得到延时结果集
            </summary>
            <param name="specification"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IExtensionRepository`1.Find(Lind.DDD.Specification.ISpecification{`0})">
            <summary>
            根据指定规约,得到第一个实体
            </summary>
            <param name="specification"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IExtensionRepository`1.GetModel(System.Action{Lind.DDD.IRepositories.Commons.IOrderable{`0}},Lind.DDD.Specification.ISpecification{`0})">
            <summary>
            带排序功能的，根据指定规约，得到结果集
            </summary>
            <param name="orderBy"></param>
            <param name="specification"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IMongoRepository`1.MapReduce(System.String,System.String)">
            <summary>
            通过MapReduce处理查询，并得到一个实体
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="map">将大批量的工作（数据）分解（MAP）执行</param>
            <param name="reduce">然后再将结果合并成最终结果（REDUCE）</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IMongoRepository`1.GetModel``1(System.Int32,System.Int32)">
            <summary>
            Mongo大数据情况下，有分页时使用这个方法
            </summary>
            <typeparam name="U"></typeparam>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IMongoRepository`1.GetModel``1(``0,System.Int32,System.Int32)">
            <summary>
            MongoDB集成的查询方法，大数据情况下，有分页时使用这个方法
            </summary>
            <typeparam name="U">匿名对象，用来为条件赋值</typeparam>
            <param name="template">条件对象</param>
            <param name="limit"></param>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IMongoRepository`1.GetModel``2(``0,``1,System.Int32,System.Int32)">
            <summary>
            MongoDB集成的查询方法，大数据情况下，有分页和排序时使用这个方法
            </summary>
            <typeparam name="U">条件对象，用来为条件赋值</typeparam>
            <typeparam name="O">排序对象，IRepository.Core.OrderType类型，OrderType.Asc表示升序，OrderType.Desc表示降序</typeparam>
            <param name="template">条件对象</param>
            <param name="orderby">排序对象</param>
            <param name="limit"></param>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IMongoRepository`1.GetModel(System.Int32,System.Int32)">
            <summary>
            官方驱动，返回带分页的结果集
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IMongoRepository`1.GetModel(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            官方驱动，返回带条件和分页的结果集
            </summary>
            <param name="expression"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IMongoRepository`1.GetModel(System.Collections.Generic.Dictionary{System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean},System.Int32,System.Int32)">
            <summary>
            官方驱动，返回带排序和分页的结果集
            </summary>
            <param name="fields"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IMongoRepository`1.GetModel(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.Dictionary{System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean},System.Int32,System.Int32)">
            <summary>
            官方驱动，返回带条件和排序及分页的结果集
            </summary>
            <param name="expression"></param>
            <param name="fields"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IMongoRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            集合数量
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.IMongoRepository`1.Update``1(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Action{``0}}})">
            <summary>
            列表按需更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:Lind.DDD.IRepositories.IMongoRepository`1.Update``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            按需更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:Lind.DDD.IRepositories.IMongoRepository`1.GetModel``1(``0)">
            <summary>
            通过mongo条件得到结果集
            </summary>
            <typeparam name="U"></typeparam>
            <param name="template"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“T:System.Linq.ExtendIQueryable”忽略有格式错误的 XML 注释 -->
        <member name="M:System.Linq.ExtendIQueryable.ToPagedList``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            分页结果集
            </summary>
            <typeparam name="T"></typeparam>
            <param name="linq"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.ExtendIQueryable.ToPagedList``1(System.Linq.IQueryable{``0},Lind.DDD.Paging.PageParameters)">
            <summary>
            分页结果集
            </summary>
            <typeparam name="T"></typeparam>
            <param name="linq"></param>
            <param name="pp"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.ExtendIQueryable.ToPagedList``1(System.Linq.IOrderedEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            分页结果集
            </summary>
            <typeparam name="T"></typeparam>
            <param name="linq"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.ExtendIQueryable.ToPagedList``1(System.Linq.IOrderedEnumerable{``0},Lind.DDD.Paging.PageParameters)">
            <summary>
            分页结果集
            </summary>
            <typeparam name="T"></typeparam>
            <param name="linq"></param>
            <param name="pp"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.Logger.Level">
            <summary>
            日志级别：DEBUG|INFO|WARN|ERROR|FATAL|OFF
            </summary>
        </member>
        <member name="F:Lind.DDD.Logger.Level.DEBUG">
            <summary>
            记录DEBUG|INFO|WARN|ERROR|FATAL级别的日志
            </summary>
        </member>
        <member name="F:Lind.DDD.Logger.Level.INFO">
            <summary>
            记录INFO|WARN|ERROR|FATAL级别的日志
            </summary>
        </member>
        <member name="F:Lind.DDD.Logger.Level.WARN">
            <summary>
            记录WARN|ERROR|FATAL级别的日志
            </summary>
        </member>
        <member name="F:Lind.DDD.Logger.Level.ERROR">
            <summary>
            记录ERROR|FATAL级别的日志
            </summary>
        </member>
        <member name="F:Lind.DDD.Logger.Level.FATAL">
            <summary>
            记录FATAL级别的日志
            </summary>
        </member>
        <member name="F:Lind.DDD.Logger.Level.OFF">
            <summary>
            关闭日志功能
            </summary>
        </member>
        <member name="T:Lind.DDD.Logger.Implements.GlobalLogger">
            <summary>
            日志表
            </summary>
        </member>
        <member name="P:Lind.DDD.Logger.Implements.GlobalLogger.ProjectName">
            <summary>
            项目名称
            </summary>
        </member>
        <member name="P:Lind.DDD.Logger.Implements.GlobalLogger.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:Lind.DDD.Logger.Implements.GlobalLogger.Message">
            <summary>
            日志主要内容
            </summary>
        </member>
        <member name="P:Lind.DDD.Logger.Implements.GlobalLogger.Detail">
            <summary>
            日志详细内容
            </summary>
        </member>
        <member name="P:Lind.DDD.Logger.Implements.GlobalLogger.CurrentUserName">
            <summary>
            当前用户名
            </summary>
        </member>
        <member name="T:Lind.DDD.Logger.Implements.MongoLogger">
            <summary>
            使用MongoDB进行日志持久化
            </summary>
        </member>
        <member name="T:Lind.DDD.Logger.Implements.Log4Logger">
            <summary>
             Function:以log4net组件的方式写日志
             Remark:日志记录方法可以使用第三方组件,如log4net
             Author:zhangzhanling
             Blogs:www.cnblogs.com/lori
             </summary>
        </member>
        <member name="F:Lind.DDD.Logger.Implements.Log4Logger._logConfig">
            <summary>
            log4net配置文件路径
            </summary>
        </member>
        <member name="F:Lind.DDD.Logger.Implements.Log4Logger.logImpl">
            <summary>
            log4net日志执行者
            </summary>
        </member>
        <member name="M:Lind.DDD.Logger.Implements.Log4Logger.#cctor">
            <summary>
            私有架造方法
            </summary>
        </member>
        <member name="T:Lind.DDD.MongoDbClient.MongoManager`1">
            <summary>
            Mongodb驱动
            </summary>
        </member>
        <member name="F:Lind.DDD.MongoDbClient.MongoManager`1._connectionStringHost">
            <summary>
            服务器地址和端口
            </summary>
        </member>
        <member name="F:Lind.DDD.MongoDbClient.MongoManager`1._dbName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="F:Lind.DDD.MongoDbClient.MongoManager`1._userName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="F:Lind.DDD.MongoDbClient.MongoManager`1._password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:Lind.DDD.MongoDbClient.MongoManager`1.Instance">
            <summary>
            MongoDB使用者
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.AliPay.GetMD5(System.String,System.String)">
            <summary>
            与ASP兼容的MD5加密算法
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.AliPay.BubbleSort(System.String[])">
            <summary>
            冒泡排序法
            按照字母序列从a到z的顺序排列
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.AliPay.CreatUrl(System.String[],System.String,System.String,System.String)">
            <summary>
            生成URL链接或加密结果
            </summary>
            <param name="para">参数加密数组</param>
            <param name="_input_charset">编码格式</param>
            <param name="sign_type">加密类型</param>
            <param name="key">安全校验码</param>
            <returns>字符串URL或加密结果</returns>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WebPay.AlipayImpl">
            <summary>
            支付宝支付功能实现
            </summary>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WebPay.PayBase">
            <summary>
            第三方支付基类
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.PayBase.OnSuccess(Lind.DDD.OnlinePay.WebPay.OrderEventArgs)">
            <summary>
            成功时触发
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.PayBase.OnFail(Lind.DDD.OnlinePay.WebPay.OrderEventArgs)">
            <summary>
            失败时触发
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.PayBase.RechargeTo(System.Decimal,System.Int32)">
            <summary>
            第三方充值对外接口
            </summary>
            <param name="vMoney"></param>
            <param name="userID"></param>
            <param name="rUserID"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.PayBase.OnlineTo(System.String,System.Int32,System.Int32,System.Decimal,System.String,System.String)">
            <summary>
            第三方支付对外接口
            </summary>
            <param name="orderid"></param>
            <param name="useType"></param>
            <param name="userID"></param>
            <param name="money"></param>
            <param name="productname"></param>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.PayBase.GenerateSubject(Lind.DDD.OnlinePay.WebPay.UseType)">
            <summary>
            根据使用方法得到订单商品名称
            </summary>
            <param name="useType"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.PayBase.BubbleSort(System.String[])">
            <summary>
            冒泡排序法
            按照字母序列从a到z的顺序排列
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.PayBase.GetMD5(System.String,System.String)">
            <summary>
            与ASP兼容的MD5加密算法
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.PayBase.Get_Post_Return(System.String)">
            <summary>
            返回Get或者Post键所对应的值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.PayBase.Notify_Return(Lind.DDD.OnlinePay.WebPay.HttpMethod)">
            <summary>
            服务器通知与返回
            </summary>
            <param name="httpMethod">0为Get,1为Post</param>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.PayBase.GenerateUrl(Lind.DDD.OnlinePay.WebPay.UseType,System.String,System.Decimal,System.Int32,System.String@,System.String,System.String,System.String,System.String)">
            <summary>
            生成第三方支付的URI，由具体类去实现
            </summary>
            <param name="useType">使用目的</param>
            <param name="body"></param>
            <param name="vMoney">订单金额</param>
            <param name="userID">买家ＩＤ</param>
            <param name="exchangeID"></param>
            <param name="returnUrl"></param>
            <param name="notifyUrl"></param>
            <param name="name"></param>
            <param name="orderid">前台可能传过来的订单号</param>
            <returns></returns>
        </member>
        <member name="E:Lind.DDD.OnlinePay.WebPay.PayBase.Success">
            <summary>
            在线支付成功
            </summary>
        </member>
        <member name="E:Lind.DDD.OnlinePay.WebPay.PayBase.Fail">
            <summary>
            在线支付失败
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.PayBase.DoMain">
            <summary>
            域名
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.PayBase.SiteName">
            <summary>
            网站名称
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.PayBase.Gateway">
            <summary>
            网关
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.PayBase.Partner">
            <summary>
            合作伙伴
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.PayBase.ReturnAddress">
            <summary>
            第三方回写地址
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.PayBase.NotifyAddress">
            <summary>
             第三方回写地址（服务器自动调用）
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.PayBase.PublicKey">
             <summary>
            安全校验码 （公钥）
             </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.PayBase.PrivateKey">
            <summary>
            安全校验码 （私钥）
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.AlipayImpl.CreatUrl(System.String[],System.String,System.String)">
            <summary>
            生成URL链接或加密结果
            </summary>
            <param name="para">参数加密数组</param>
            <param name="_input_charset">编码格式</param>
            <param name="key">安全校验码</param>
            <returns>字符串URL或加密结果</returns>
        </member>
        <!-- 对于成员“M:Lind.DDD.OnlinePay.WebPay.AlipayImpl.Notify_Return(Lind.DDD.OnlinePay.WebPay.HttpMethod)”忽略有格式错误的 XML 注释 -->
        <member name="M:Lind.DDD.OnlinePay.WebPay.AlipayImpl.AlipayReturnParam(System.Int32,System.String,System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.Web.HttpContext)">
            <summary>
            支付宝Return回写参数
            </summary>
            <param name="userID"></param>
            <param name="orderID"></param>
            <param name="rpID"></param>
            <param name="exchangeID"></param>
            <param name="notify_id"></param>
            <param name="sign"></param>
            <param name="coll"></param>
            <param name="http"></param>
            <returns></returns>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.AlipayImpl.Gateway">
            <summary>
            网关
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.AlipayImpl.Partner">
            <summary>
            合作伙伴
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.AlipayImpl.ReturnAddress">
            <summary>
            支付宝回写地址
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.AlipayImpl.NotifyAddress">
            <summary>
            支付宝回写地址(服务器回写)
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.AlipayImpl.PublicKey">
             <summary>
            安全校验码 
             </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.AlipayImpl.PrivateKey">
             <summary>
            安全校验码 
             </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.AlipayImpl.Service">
            <summary>
            服务标识
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.AlipayImpl.Input_Charset">
            <summary>
            编码类型
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.AlipayImpl.Payment_Type">
            <summary>
            支付类型
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.AlipayImpl.Show_Url">
            <summary>
            显示的URI
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.AlipayImpl.Seller_Email">
            <summary>
            卖家账号
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.AlipayImpl.PayMethod">
            <summary>
            bankPay cartoon directPay
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.ChinaPayImpl.ChinaPayRetUrlParam(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            银联Notify回写参数
            </summary>
            <param name="MerId"></param>
            <param name="BusiId"></param>
            <param name="OrdId"></param>
            <param name="OrdAmt"></param>
            <param name="CuryId"></param>
            <param name="Versions"></param>
            <param name="BgRetUrl"></param>
            <param name="PageRetUrl"></param>
            <param name="GateId"></param>
            <param name="OrdDesc"></param>
            <param name="ShareType"></param>
            <param name="ShareData"></param>
            <param name="Priv1"></param>
            <param name="CustomIp"></param>
            <param name="PayStat">银联為我們返回的，防治篡改的</param>
            <param name="PayTime">银联為我們返回的，防治篡改的</param>
            <param name="ChkValue"></param>
            <returns></returns>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.ChinaPayImpl.Gateway">
            <summary>
            支付接入地址
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.ChinaPayImpl.Partner">
            <summary>
            商户号，必填
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.ChinaPayImpl.ChinaPayGateId">
            <summary>
            //支付网关号，选填
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.ChinaPayImpl.ChinaPayBusiId">
            <summary>
            业务编号，选填
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.ChinaPayImpl.ChinaPayCuryId">
            <summary>
            订单币种，必填
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.ChinaPayImpl.ChinaPayVersion">
            <summary>
            支付接入版本号，必填
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.ChinaPayImpl.ChinaPayShareType">
            <summary>
            分账类型，必填
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.ChinaPayImpl.ChinaPayShareData">
            <summary>
            商户分账数据，必填
            </summary>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WebPay.ChinaPayUtils">
            <summary>
            银联辅助类
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.ChinaPayUtils.IsIPAddress(System.String)">
            <summary>
            判断是否是IP地址格式 0.0.0.0
            </summary>
            <param name="str1">待判断的IP地址</param>
            <returns>true or false</returns>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.ChinaPayUtils.getRealIPAddress">
            <summary> 
            取得客户端真实IP。如果有代理则取第一个非内网地址（能处理多层代理的问题） 
            <![CDATA[其原理可查看：《C#取真实IP地址及分析》]]>
            </summary> 
        </member>
        <member name="T:Lind.DDD.OnlinePay.WebPay.Demo">
            <summary>
            在线支付调用的实现
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.Demo.UserRecharge">
            <summary>
            充值POST
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.Demo.UserOrder">
            <summary>
            订单POST
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.Demo.AlipayReturn">
            <summary>
            支付宝返回页面
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.Demo.AlipayNotify">
            <summary>
            支付宝通知页面
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.Demo.ChinaPayReturn">
            <summary>
            银联返回页面
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.Demo.ChinaPayNotify">
            <summary>
            银联通知页面
            </summary>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.Demo.Impl_Success(Lind.DDD.OnlinePay.WebPay.OrderEventArgs)">
            <summary>
            第三方支付如果成功，就解锁余额
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.OnlinePay.WebPay.Demo.Impl_Fail(Lind.DDD.OnlinePay.WebPay.OrderEventArgs)">
            <summary>
            第三方返回失败的逻辑
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WebPay.HttpMethod">
            <summary>
            http请求方式
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.WebPay.HttpMethod.Get">
            <summary>
            get方式，以request.querystring传递参数，如URL跳转
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.WebPay.HttpMethod.Post">
            <summary>
            post方式，以request.form传递参数，如表单提交
            </summary>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WebPay.OrderEventArgs">
            <summary>
            订单事件源对象
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.OrderEventArgs.OrderID">
            <summary>
            订单IＤ
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.OrderEventArgs.UserID">
            <summary>
            下单用户ＩＤ
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.OrderEventArgs.UseType">
            <summary>
            使用方式：１充值，２订单
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.OrderEventArgs.TotalFee">
            <summary>
            订单总金额
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.OrderEventArgs.SourceType">
            <summary>
            订单项中的物品类型：0辅导班，1课件包
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.OrderEventArgs.ExceptionMessage">
            <summary>
            出现的异常字串
            </summary>
        </member>
        <member name="P:Lind.DDD.OnlinePay.WebPay.OrderEventArgs.ExchangeCode">
            <summary>
            交易代码，这是第三方为我们返回的
            </summary>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WebPay.OnlineEventHandler">
            <summary>
            在线支付委托
            </summary>
            <param name="e">数据源</param>
        </member>
        <member name="T:Lind.DDD.OnlinePay.WebPay.UseType">
            <summary>
            使用目的
            1充值，2订单
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.WebPay.UseType.Recharge">
            <summary>
            充值
            </summary>
        </member>
        <member name="F:Lind.DDD.OnlinePay.WebPay.UseType.Order">
            <summary>
            订单
            </summary>
        </member>
        <member name="T:Lind.DDD.PublishSubscribe.IPubSub">
            <summary>
            发布订阅的接口规则
            </summary>
        </member>
        <member name="M:Lind.DDD.PublishSubscribe.IPubSub.Publish(System.String,System.String)">
            <summary>
            发布，有顺序，对象源是字符串
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns>订阅者总数</returns>
        </member>
        <member name="M:Lind.DDD.PublishSubscribe.IPubSub.Subscribe(System.String,System.Action{System.String})">
            <summary>
            订阅，对象源是字符串
            </summary>
            <param name="channel"></param>
            <param name="action"></param>
        </member>
        <member name="M:Lind.DDD.PublishSubscribe.IPubSub.PublishAsync(System.String,System.String)">
            <summary>
            异步发布，无顺序，对象源是字符串
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns>订阅者总数</returns>
        </member>
        <member name="M:Lind.DDD.PublishSubscribe.IPubSub.SubscribeAsync(System.String,System.Action{System.String})">
            <summary>
            异步订阅，无顺序，对象源是字符串
            </summary>
            <param name="channel"></param>
            <param name="action"></param>
        </member>
        <member name="M:Lind.DDD.PublishSubscribe.IPubSub.PublishByte(System.String,System.Byte[])">
            <summary>
            发布，有顺序，对象源是Byte[]
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns>订阅者总数</returns>
        </member>
        <member name="M:Lind.DDD.PublishSubscribe.IPubSub.SubscribeByte(System.String,System.Action{System.Byte[]})">
            <summary>
            订阅，对象源是Byte[]
            </summary>
            <param name="channel"></param>
            <param name="action"></param>
        </member>
        <member name="M:Lind.DDD.PublishSubscribe.IPubSub.PublishByteAsync(System.String,System.Byte[])">
            <summary>
            异步发布，有顺序，对象源是Byte[]
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns>订阅者总数</returns>
        </member>
        <member name="M:Lind.DDD.PublishSubscribe.IPubSub.SubscribeByteAsync(System.String,System.Action{System.Byte[]})">
            <summary>
            异步订阅，对象源是Byte[]
            </summary>
            <param name="channel"></param>
            <param name="action"></param>
        </member>
        <member name="M:Lind.DDD.PublishSubscribe.IPubSub.Publish``1(System.String,``0)">
            <summary>
            发布，有顺序，对象源是泛型对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="value"></param>
            <returns>订阅者总数</returns>
        </member>
        <member name="M:Lind.DDD.PublishSubscribe.IPubSub.Subscribe``1(System.String,System.Action{``0})">
            <summary>
            订阅，对象源是泛型对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="action"></param>
        </member>
        <member name="M:Lind.DDD.PublishSubscribe.IPubSub.PublishAsync``1(System.String,``0)">
            <summary>
            异步发布，有顺序，对象源是泛型对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="value"></param>
            <returns>订阅者总数</returns>
        </member>
        <member name="M:Lind.DDD.PublishSubscribe.IPubSub.SubscribeAsync``1(System.String,System.Action{``0})">
            <summary>
            异步订阅，对象源是泛型对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="action"></param>
        </member>
        <member name="M:Lind.DDD.PublishSubscribe.IPubSub.UnSubscribe(System.String)">
            <summary>
            取消指定订阅
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:Lind.DDD.PublishSubscribe.IPubSub.UnSubscribeAll">
            <summary>
            取消所有订阅
            </summary>
            <param name="channel"></param>
        </member>
        <member name="T:Lind.DDD.PublishSubscribe.PubSubManager">
            <summary>
            发布与订阅的管理者
            说明：分布式的pub/sub模式，订阅者与发布者不需要是同一系统，同一平台，只需要实现某些Provider驱动即可
            Function:Distributed Pub/Sub Pattern.
            </summary>
        </member>
        <member name="F:Lind.DDD.PublishSubscribe.PubSubManager.instance">
            <summary>
            单实例
            </summary>
        </member>
        <member name="F:Lind.DDD.PublishSubscribe.PubSubManager.repeatNum">
            <summary>
            重复次数
            </summary>
        </member>
        <member name="F:Lind.DDD.PublishSubscribe.PubSubManager.interval">
            <summary>
            时间间隔，失败后的等待时间，单位毫秒
            </summary>
        </member>
        <member name="P:Lind.DDD.PublishSubscribe.PubSubManager.Instance">
            <summary>
            发布/订阅单例
            </summary>
        </member>
        <member name="T:Lind.DDD.PublishSubscribe.RedisProvider">
            <summary>
            使用redis实现分布式的pub/sub模式,它不会做序列化操作
            在多系统之间实现发布、订阅模式
            publish返回值为订阅的数量，为0表示没有任务订阅项，本消息为发布失败的消息，应该进行二次处理
            </summary>
        </member>
        <member name="F:Lind.DDD.PublishSubscribe.RedisProvider.sub">
            <summary>
            订阅者与发布者对象
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.AsyncBinarySocketClient">
            <summary>
            异步socket客户端
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.PooledSocketClient`1">
            <summary>
            pooled socket client
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.BaseSocketClient`1">
            <summary>
            socket client
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.BaseHost">
            <summary>
            base host
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.IHost">
            <summary>
            socket connection host interface
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.ISAEAPool">
            <summary>
            socketAsyncEventArgs pool interface
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.ISAEAPool.GetSocketAsyncEventArgs">
            <summary>
            get
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.ISAEAPool.ReleaseSocketAsyncEventArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            release
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.IHost.NextConnectionID">
            <summary>
            生成下一个连接ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.IHost.GetConnectionByID(System.Int64)">
            <summary>
            get <see cref="T:Lind.DDD.FastSocket.SocketBase.IConnection"/> by connectionID
            </summary>
            <param name="connectionID"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.IHost.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.IHost.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.SocketBase.IHost.SocketBufferSize">
            <summary>
            get socket buffer size
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.SocketBase.IHost.MessageBufferSize">
            <summary>
            get message buffer size
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.BaseHost._listConnections">
            <summary>
            connection collection
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.BaseHost.#ctor(System.Int32,System.Int32)">
            <summary>
            new
            </summary>
            <param name="socketBufferSize"></param>
            <param name="messageBufferSize"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">socketBufferSize</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">messageBufferSize</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.BaseHost.NextConnectionID">
            <summary>
            生成下一个连接ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.BaseHost.GetConnectionByID(System.Int64)">
            <summary>
            get <see cref="T:Lind.DDD.FastSocket.SocketBase.IConnection"/> by connectionID
            </summary>
            <param name="connectionID"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.BaseHost.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.BaseHost.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.BaseHost.RegisterConnection(Lind.DDD.FastSocket.SocketBase.IConnection)">
            <summary>
            register connection
            </summary>
            <param name="connection"></param>
            <exception cref="T:System.ArgumentNullException">connection is null</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.BaseHost.OnConnected(Lind.DDD.FastSocket.SocketBase.IConnection)">
            <summary>
            OnConnected
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.BaseHost.OnStartSending(Lind.DDD.FastSocket.SocketBase.IConnection,Lind.DDD.FastSocket.SocketBase.Packet)">
            <summary>
            OnStartSending
            </summary>
            <param name="connection"></param>
            <param name="packet"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.BaseHost.OnSendCallback(Lind.DDD.FastSocket.SocketBase.IConnection,Lind.DDD.FastSocket.SocketBase.SendCallbackEventArgs)">
            <summary>
            OnSendCallback
            </summary>
            <param name="connection"></param>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.BaseHost.OnMessageReceived(Lind.DDD.FastSocket.SocketBase.IConnection,Lind.DDD.FastSocket.SocketBase.MessageReceivedEventArgs)">
            <summary>
            OnMessageReceived
            </summary>
            <param name="connection"></param>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.BaseHost.OnDisconnected(Lind.DDD.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            OnDisconnected
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.BaseHost.OnError(Lind.DDD.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            OnError
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.BaseHost.GetSocketAsyncEventArgs">
            <summary>
            get
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.BaseHost.ReleaseSocketAsyncEventArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            release
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Lind.DDD.FastSocket.SocketBase.BaseHost.SocketBufferSize">
            <summary>
            get socket buffer size
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.SocketBase.BaseHost.MessageBufferSize">
            <summary>
            get message buffer size
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.#ctor(Lind.DDD.FastSocket.Client.Protocol.IProtocol{`0})">
            <summary>
            new
            </summary>
            <param name="protocol"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.#ctor(Lind.DDD.FastSocket.Client.Protocol.IProtocol{`0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            new
            </summary>
            <param name="protocol"></param>
            <param name="socketBufferSize"></param>
            <param name="messageBufferSize"></param>
            <param name="millisecondsSendTimeout"></param>
            <param name="millisecondsReceiveTimeout"></param>
            <exception cref="T:System.ArgumentNullException">protocol is null</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.HandleUnknowResponse(Lind.DDD.FastSocket.SocketBase.IConnection,`0)">
            <summary>
            处理未知的response
            </summary>
            <param name="connection"></param>
            <param name="response"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.OnResponse(Lind.DDD.FastSocket.SocketBase.IConnection,`0)">
            <summary>
            OnResponse
            </summary>
            <param name="connection"></param>
            <param name="response"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.OnSendSucess(Lind.DDD.FastSocket.SocketBase.IConnection,Lind.DDD.FastSocket.Client.Request{`0})">
            <summary>
            on request send success
            </summary>
            <param name="connection"></param>
            <param name="request"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.OnSendFailed(Lind.DDD.FastSocket.SocketBase.IConnection,Lind.DDD.FastSocket.Client.Request{`0})">
            <summary>
            on request send failed
            </summary>
            <param name="connection"></param>
            <param name="request"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.OnSendTimeout(Lind.DDD.FastSocket.Client.Request{`0})">
            <summary>
            on request send timeout
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.OnReceiveTimeout(Lind.DDD.FastSocket.SocketBase.IConnection,Lind.DDD.FastSocket.Client.Request{`0})">
            <summary>
            on request receive timeout
            </summary>
            <param name="connection"></param>
            <param name="request"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.Send(Lind.DDD.FastSocket.Client.Request{`0})">
            <summary>
            send request
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.EnqueueToPendingQueue(Lind.DDD.FastSocket.Client.Request{`0})">
            <summary>
            enqueue to pending queue
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.DequeueFromPendingQueue">
            <summary>
            dequeue from pending queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.DequeueAllFromPendingQueue">
            <summary>
            dequeue all from pending queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.NextRequestSeqID">
            <summary>
            产生不重复的seqID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.OnConnected(Lind.DDD.FastSocket.SocketBase.IConnection)">
            <summary>
            OnConnected
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.OnStartSending(Lind.DDD.FastSocket.SocketBase.IConnection,Lind.DDD.FastSocket.SocketBase.Packet)">
            <summary>
            OnStartSending
            </summary>
            <param name="connection"></param>
            <param name="packet"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.OnSendCallback(Lind.DDD.FastSocket.SocketBase.IConnection,Lind.DDD.FastSocket.SocketBase.SendCallbackEventArgs)">
            <summary>
            OnSendCallback
            </summary>
            <param name="connection"></param>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.OnMessageReceived(Lind.DDD.FastSocket.SocketBase.IConnection,Lind.DDD.FastSocket.SocketBase.MessageReceivedEventArgs)">
            <summary>
            OnMessageReceived
            </summary>
            <param name="connection"></param>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.OnDisconnected(Lind.DDD.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            OnDisconnected
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="P:Lind.DDD.FastSocket.Client.BaseSocketClient`1.MillisecondsSendTimeout">
            <summary>
            发送超时毫秒数
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Client.BaseSocketClient`1.MillisecondsReceiveTimeout">
            <summary>
            接收超时毫秒数
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.BaseSocketClient`1.PendingSendQueue">
            <summary>
            pending send queue
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.PendingSendQueue.Finalize">
            <summary>
            new
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.PendingSendQueue.#ctor(Lind.DDD.FastSocket.Client.BaseSocketClient{`0},System.Int32)">
            <summary>
            new
            </summary>
            <param name="client"></param>
            <param name="millisecondsSendTimeout"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.PendingSendQueue.Enqueue(Lind.DDD.FastSocket.Client.Request{`0})">
            <summary>
            入列
            </summary>
            <param name="request"></param>
            <exception cref="T:System.ArgumentNullException">request is null</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.PendingSendQueue.Dequeue">
            <summary>
            dequeue
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.PendingSendQueue.DequeueAll">
            <summary>
            出列全部
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.PendingSendQueue.Loop">
            <summary>
            loop
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.BaseSocketClient`1.RequestCollection">
            <summary>
            request collection
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.RequestCollection.Finalize">
            <summary>
            new
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.RequestCollection.#ctor(Lind.DDD.FastSocket.Client.BaseSocketClient{`0},System.Int32)">
            <summary>
            new
            </summary>
            <param name="client"></param>
            <param name="millisecondsReceiveTimeout"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.RequestCollection.Add(Lind.DDD.FastSocket.Client.Request{`0})">
            <summary>
            add
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.RequestCollection.Remove(System.Int32)">
            <summary>
            remove
            </summary>
            <param name="seqID"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.RequestCollection.Remove(Lind.DDD.FastSocket.SocketBase.IConnection)">
            <summary>
            clear
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.BaseSocketClient`1.RequestCollection.Loop">
            <summary>
            loop
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.PooledSocketClient`1.#ctor(Lind.DDD.FastSocket.Client.Protocol.IProtocol{`0})">
            <summary>
            new
            </summary>
            <param name="protocol"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.PooledSocketClient`1.#ctor(Lind.DDD.FastSocket.Client.Protocol.IProtocol{`0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            new
            </summary>
            <param name="protocol"></param>
            <param name="socketBufferSize"></param>
            <param name="messageBufferSize"></param>
            <param name="millisecondsSendTimeout"></param>
            <param name="millisecondsReceiveTimeout"></param>
            <exception cref="T:System.ArgumentNullException">protocol is null</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.PooledSocketClient`1.InitServerPool">
            <summary>
            create <see cref="T:Lind.DDD.FastSocket.Client.IServerPool"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.PooledSocketClient`1.OnServerPoolConnected(System.String,Lind.DDD.FastSocket.SocketBase.IConnection)">
            <summary>
            on server pool connected
            </summary>
            <param name="name"></param>
            <param name="connection"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.PooledSocketClient`1.OnServerPoolServerAvailable(System.String,Lind.DDD.FastSocket.SocketBase.IConnection)">
            <summary>
            on server available
            </summary>
            <param name="name"></param>
            <param name="connection"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.PooledSocketClient`1.Send(Lind.DDD.FastSocket.Client.Request{`0})">
            <summary>
            send request
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.PooledSocketClient`1.RegisterServerNode(System.String,System.Net.IPEndPoint)">
            <summary>
            add server node
            </summary>
            <param name="name"></param>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.PooledSocketClient`1.UnRegisterServerNode(System.String)">
            <summary>
            remove server node by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.PooledSocketClient`1.GetAllNodeNames">
            <summary>
            get all node names
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.AsyncBinarySocketClient.#ctor">
            <summary>
            new
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.AsyncBinarySocketClient.#ctor(System.Int32,System.Int32)">
            <summary>
            new
            </summary>
            <param name="socketBufferSize"></param>
            <param name="messageBufferSize"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.AsyncBinarySocketClient.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            new
            </summary>
            <param name="socketBufferSize"></param>
            <param name="messageBufferSize"></param>
            <param name="millisecondsSendTimeout"></param>
            <param name="millisecondsReceiveTimeout"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.AsyncBinarySocketClient.Send``1(System.String,System.Byte[],System.Func{Lind.DDD.FastSocket.Client.Response.AsyncBinaryResponse,``0},System.Object)">
            <summary>
            send
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="cmdName"></param>
            <param name="payload"></param>
            <param name="funcResultFactory"></param>
            <param name="asyncState"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.AsyncBinarySocketClient.Send``1(System.Byte[],System.String,System.Byte[],System.Func{Lind.DDD.FastSocket.Client.Response.AsyncBinaryResponse,``0},System.Object)">
            <summary>
            new
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="consistentKey"></param>
            <param name="cmdName"></param>
            <param name="payload"></param>
            <param name="funcResultFactory"></param>
            <param name="asyncState"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">cmdName is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException">funcResultFactory is null.</exception>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.DSSBinarySocketClient">
            <summary>
            异步socket客户端
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.DSSBinarySocketClient.#ctor">
            <summary>
            new
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.DSSBinarySocketClient.#ctor(System.Int32,System.Int32)">
            <summary>
            new
            </summary>
            <param name="socketBufferSize"></param>
            <param name="messageBufferSize"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.DSSBinarySocketClient.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            new
            </summary>
            <param name="socketBufferSize">buffer存储数据大叔，默认8192</param>
            <param name="messageBufferSize"></param>
            <param name="millisecondsSendTimeout"></param>
            <param name="millisecondsReceiveTimeout"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.DSSBinarySocketClient.Send``1(System.String,System.Int16,System.String,System.Byte[],System.Func{Lind.DDD.FastSocket.Client.Response.DSSBinaryResponse,``0},System.Object)">
            <summary>
            发送数据到服务端
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="cmdName"></param>
            <param name="projectID"></param>
            <param name="versionNumber"></param>
            <param name="payload"></param>
            <param name="funcResultFactory"></param>
            <param name="asyncState"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.DSSBinarySocketClient.Send``1(System.String,System.Int16,System.Int16,System.String,System.Byte[],System.Func{Lind.DDD.FastSocket.Client.Response.DSSBinaryResponse,``0},System.Object)">
            <summary>
            发送数据到服务端
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="cmdName"></param>
            <param name="projectID"></param>
            <param name="extProperty"></param>
            <param name="versionNumber"></param>
            <param name="payload"></param>
            <param name="funcResultFactory"></param>
            <param name="asyncState"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.DSSBinarySocketClient.Send``1(System.Byte[],System.String,System.Int16,System.String,System.Int16,System.String,System.Byte[],System.Func{Lind.DDD.FastSocket.Client.Response.DSSBinaryResponse,``0},System.Object)">
            <summary>
            发送数据到服务端
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="consistentKey"></param>
            <param name="cmdName"></param>
            <param name="projectID"></param>
            <param name="extProperty"></param>
            <param name="versionNumber"></param>
            <param name="payload"></param>
            <param name="funcResultFactory"></param>
            <param name="asyncState"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.Protocol.AsyncBinaryProtocol">
            <summary>
            异步二进制协议
            协议格式
            [Message Length(int32)][SeqID(int32)][Request|Response Flag Length(int16)][Request|Response Flag + Body Buffer]
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.Protocol.IProtocol`1">
            <summary>
            协议接口
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.Protocol.IProtocol`1.FindResponse(Lind.DDD.FastSocket.SocketBase.IConnection,System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
            Find Response
            </summary>
            <param name="connection"></param>
            <param name="buffer"></param>
            <param name="readlength"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.Protocol.AsyncBinaryProtocol.FindResponse(Lind.DDD.FastSocket.SocketBase.IConnection,System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
            find response
            </summary>
            <param name="connection"></param>
            <param name="buffer"></param>
            <param name="readlength"></param>
            <returns></returns>
            <exception cref="T:Lind.DDD.FastSocket.Client.Protocol.BadProtocolException">bad async binary protocl</exception>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.Protocol.BadProtocolException">
            <summary>
            bad protocol exception
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.Protocol.BadProtocolException.#ctor">
            <summary>
            new
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.Protocol.BadProtocolException.#ctor(System.String)">
            <summary>
            new
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.Protocol.DSSBinaryProtocol">
            <summary>
            异步二进制协议
            从服务器返回信息时，用来解析成DSSBinaryProtocol对象（自定义协议）
            协议格式
            [Message Length(int32)][SeqID(int32)][ProjectID(int16)][ExtProperty(int16)][Cmd Length(int16)][VersionNumber Length(int16)][Cmd + VersonNumber + Body Buffer]
            其中参数TableName和VersonNumber长度为40，不够自动在左侧补空格
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.Protocol.DSSBinaryProtocol.FindResponse(Lind.DDD.FastSocket.SocketBase.IConnection,System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
            find response
            </summary>
            <param name="connection"></param>
            <param name="buffer"></param>
            <param name="readlength"></param>
            <returns></returns>
            <exception cref="T:Lind.DDD.FastSocket.Client.Protocol.BadProtocolException">bad async binary protocl</exception>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.Protocol.ThriftProtocol">
            <summary>
            thrift protocol
            [message len,4][version,4][cmd len,4][cmd][seqID,4][data...,N]
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.Protocol.ThriftProtocol.FindResponse(Lind.DDD.FastSocket.SocketBase.IConnection,System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
            find response
            </summary>
            <param name="connection"></param>
            <param name="buffer"></param>
            <param name="readlength"></param>
            <returns></returns>
            <exception cref="T:Lind.DDD.FastSocket.Client.Protocol.BadProtocolException">bad thrift protocol</exception>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.Request`1">
            <summary>
            request
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.Packet">
            <summary>
            packet
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.Packet.SentSize">
            <summary>
            get or set sent size.
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.Packet.BeginTime">
            <summary>
            get begin time
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.Packet.Payload">
            <summary>
            get payload
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Packet.#ctor(System.Byte[])">
            <summary>
            new
            </summary>
            <param name="payload"></param>
            <exception cref="T:System.ArgumentNullException">payload is null.</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Packet.IsSent">
            <summary>
            获取一个值，该值指示当前packet是否已发送完毕.
            </summary>
            <returns>true表示已发送完毕</returns>
        </member>
        <member name="P:Lind.DDD.FastSocket.SocketBase.Packet.Tag">
            <summary>
            get or set tag object
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.Request`1.ConsistentKey">
            <summary>
            一致性哈希标识code
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.Request`1.SeqID">
            <summary>
            seqID
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.Request`1.CmdName">
            <summary>
            get command name.
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.Request`1.MillisecondsReceiveTimeout">
            <summary>
            get or set receive time out
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.Request`1.CurrConnection">
            <summary>
            connectionID
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.Request`1.SentTime">
            <summary>
            sent time
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.Request`1._onException">
            <summary>
            异常回调
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.Request`1._onResult">
            <summary>
            结果回调
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.Request`1.#ctor(System.Int32,System.String,System.Byte[],System.Action{System.Exception},System.Action{`0})">
            <summary>
            new
            </summary>
            <param name="seqID">seqID</param>
            <param name="cmdName">command name</param>
            <param name="payload">发送内容</param>
            <param name="onException">异常回调</param>
            <param name="onResult">结果回调</param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.Request`1.#ctor(System.Byte[],System.Int32,System.String,System.Byte[],System.Action{System.Exception},System.Action{`0})">
            <summary>
            new
            </summary>
            <param name="consistentKey">一致性哈希标识code, 可为null</param>
            <param name="seqID">seqID</param>
            <param name="cmdName">command name</param>
            <param name="payload">发送内容</param>
            <param name="onException">异常回调</param>
            <param name="onResult">结果回调</param>
            <exception cref="T:System.ArgumentNullException">onException is null</exception>
            <exception cref="T:System.ArgumentNullException">onResult is null</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.Request`1.SetException(System.Exception)">
            <summary>
            set Exception
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.Request`1.SetResult(`0)">
            <summary>
            set Result
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.RequestException">
            <summary>
            socket request exception
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.RequestException.Error">
            <summary>
            error
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.RequestException.CmdName">
            <summary>
            get cmdName
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.RequestException.#ctor(Lind.DDD.FastSocket.Client.RequestException.Errors,System.String)">
            <summary>
            new
            </summary>
            <param name="error"></param>
            <param name="cmdName"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.RequestException.Errors">
            <summary>
            error type enum
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.RequestException.Errors.Unknow">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.RequestException.Errors.PendingSendTimeout">
            <summary>
            等待发送超时
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.RequestException.Errors.ReceiveTimeout">
            <summary>
            接收超时
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.Response.AsyncBinaryResponse">
            <summary>
            async binary response
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.Response.IResponse">
            <summary>
            response interface.
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Client.Response.IResponse.SeqID">
            <summary>
            seqID
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.Response.AsyncBinaryResponse.Flag">
            <summary>
            flag
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.Response.AsyncBinaryResponse.Buffer">
            <summary>
            buffer
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.Response.AsyncBinaryResponse.#ctor(System.String,System.Int32,System.Byte[])">
            <summary>
            new
            </summary>
            <param name="flag"></param>
            <param name="seqID"></param>
            <param name="buffer"></param>
        </member>
        <member name="P:Lind.DDD.FastSocket.Client.Response.AsyncBinaryResponse.SeqID">
            <summary>
            seqID
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.Response.DSSBinaryResponse">
            <summary>
            数据同步系统DSS使用的Socket协议，我们称为DSSBinary协议
            [Message Length(int32)][SeqID(int32)][ProjectID(int16)][ExtProperty(int16)][Cmd Length(int16)][VersonNumber Length(int16)][Cmd + VersonNumber + Body Buffer]
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.Response.DSSBinaryResponse.Buffer">
            <summary>
            要操作的表对象，以字节数组形式进行传输
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Client.Response.DSSBinaryResponse.SeqID">
            <summary>
            流水ID
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Client.Response.DSSBinaryResponse.ProjectID">
            <summary>
            项目类型编号
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Client.Response.DSSBinaryResponse.ProjectName">
            <summary>
            项目名称
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Client.Response.DSSBinaryResponse.ExtProperty">
            <summary>
            扩展属性，具体项目可以自已定义
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Client.Response.DSSBinaryResponse.VersionNumber">
            <summary>
            本次传输的版本号，所有客户端唯一[项目名称(4字节)+guid(36字节)]
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Client.Response.DSSBinaryResponse.Flag">
            <summary>
            命令名称
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.Response.ThriftResponse">
            <summary>
            thrift response.
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.Response.ThriftResponse.Buffer">
            <summary>
            buffer
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.Response.ThriftResponse.#ctor(System.Int32,System.Byte[])">
            <summary>
            new
            </summary>
            <param name="seqID"></param>
            <param name="buffer"></param>
        </member>
        <member name="P:Lind.DDD.FastSocket.Client.Response.ThriftResponse.SeqID">
            <summary>
            get seqID
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.DefaultServerPool">
            <summary>
            default server pool
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.IServerPool">
            <summary>
            server pool interface.
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.IServerPool.TryRegisterNode(System.String,System.Net.EndPoint)">
            <summary>
            try register server node.
            </summary>
            <param name="name"></param>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.IServerPool.UnRegisterNode(System.String)">
            <summary>
            remove server node
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.IServerPool.Acquire">
            <summary>
            acquire a connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.IServerPool.Acquire(System.Byte[])">
            <summary>
            acquire a connection
            </summary>
            <param name="hash">一致性哈希值</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.IServerPool.GetAllNodeNames">
            <summary>
            get all node names
            </summary>
            <returns></returns>
        </member>
        <member name="E:Lind.DDD.FastSocket.Client.IServerPool.Connected">
            <summary>
            socket connected event
            </summary>
        </member>
        <member name="E:Lind.DDD.FastSocket.Client.IServerPool.ServerAvailable">
            <summary>
            server available event
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.DefaultServerPool._dicNodes">
            <summary>
            key:node name
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.DefaultServerPool._dicConnections">
            <summary>
            key:node name
            value:socket connection
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.DefaultServerPool._arrConnections">
            <summary>
            socket connection array.
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.DefaultServerPool._hashConnections">
            <summary>
            consistent hash connections.
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.DefaultServerPool.#ctor(Lind.DDD.FastSocket.SocketBase.IHost)">
            <summary>
            new
            </summary>
            <param name="host"></param>
            <exception cref="T:System.ArgumentNullException">host is null</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.DefaultServerPool.TryRegisterNode(System.String,System.Net.EndPoint)">
            <summary>
            try register server node.
            </summary>
            <param name="name"></param>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.DefaultServerPool.UnRegisterNode(System.String)">
            <summary>
            remove server node
            </summary>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">name is null or empty</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.DefaultServerPool.Acquire">
            <summary>
            acquire a connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.DefaultServerPool.Acquire(System.Byte[])">
            <summary>
            acquire a connection
            </summary>
            <param name="hash">一致性哈希值</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.DefaultServerPool.GetAllNodeNames">
            <summary>
            get all node names
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.DefaultServerPool.OnConnected(Lind.DDD.FastSocket.Client.SocketConnector,Lind.DDD.FastSocket.SocketBase.IConnection)">
            <summary>
            on connected
            </summary>
            <param name="node"></param>
            <param name="connection"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.DefaultServerPool.OnDisconnected(Lind.DDD.FastSocket.Client.SocketConnector,Lind.DDD.FastSocket.SocketBase.IConnection)">
            <summary>
            on disconnected
            </summary>
            <param name="node"></param>
            <param name="connection"></param>
        </member>
        <member name="E:Lind.DDD.FastSocket.Client.DefaultServerPool.Connected">
            <summary>
            socket connected event
            </summary>
        </member>
        <member name="E:Lind.DDD.FastSocket.Client.DefaultServerPool.ServerAvailable">
            <summary>
            server available event
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.SocketConnector">
            <summary>
            socket connector
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.SocketConnector.Name">
            <summary>
            get node name
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.SocketConnector.EndPoint">
            <summary>
            get node endpoint
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Client.SocketConnector.Host">
            <summary>
            get node owner host
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.SocketConnector.#ctor(System.String,System.Net.EndPoint,Lind.DDD.FastSocket.SocketBase.IHost,System.Action{Lind.DDD.FastSocket.Client.SocketConnector,Lind.DDD.FastSocket.SocketBase.IConnection},System.Action{Lind.DDD.FastSocket.Client.SocketConnector,Lind.DDD.FastSocket.SocketBase.IConnection})">
            <summary>
            new
            </summary>
            <param name="name"></param>
            <param name="endPoint"></param>
            <param name="host"></param>
            <param name="onConnected"></param>
            <param name="onDisconnected"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.SocketConnector.Start">
            <summary>
            start
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.SocketConnector.Stop">
            <summary>
            stop
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.SocketConnector.OnDisconnected(Lind.DDD.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            断开连接
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.SocketConnector.BeginConnect(System.Net.EndPoint,Lind.DDD.FastSocket.SocketBase.IHost,System.Action{Lind.DDD.FastSocket.SocketBase.IConnection})">
            <summary>
            begin connect
            </summary>
            <param name="endPoint"></param>
            <param name="host"></param>
            <param name="callback"></param>
            <exception cref="T:System.ArgumentNullException">endPoint is null</exception>
            <exception cref="T:System.ArgumentNullException">host is null</exception>
            <exception cref="T:System.ArgumentNullException">callback is null</exception>
        </member>
        <member name="T:Lind.DDD.FastSocket.Client.ThriftClient">
            <summary>
            thrift client
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.ThriftClient.#ctor">
            <summary>
            new
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.ThriftClient.#ctor(System.Int32,System.Int32)">
            <summary>
            new
            </summary>
            <param name="socketBufferSize"></param>
            <param name="messageBufferSize"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.ThriftClient.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            new
            </summary>
            <param name="socketBufferSize"></param>
            <param name="messageBufferSize"></param>
            <param name="millisecondsSendTimeout"></param>
            <param name="millisecondsReceiveTimeout"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.ThriftClient.Send(System.String,System.String,System.Int32,System.Byte[],System.Action{System.Exception},System.Action{System.Byte[]})">
            <summary>
            send
            </summary>
            <param name="service"></param>
            <param name="cmdName"></param>
            <param name="seqID"></param>
            <param name="payload"></param>
            <param name="onException"></param>
            <param name="onResult"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Client.ThriftClient.Send(System.Byte[],System.String,System.String,System.Int32,System.Byte[],System.Action{System.Exception},System.Action{System.Byte[]})">
            <summary>
            sned
            </summary>
            <param name="consistentKey"></param>
            <param name="service"></param>
            <param name="cmdName"></param>
            <param name="seqID"></param>
            <param name="payload"></param>
            <param name="onException"></param>
            <param name="onResult"></param>
            <exception cref="T:System.ArgumentNullException">payload is null or empty</exception>
            <exception cref="T:System.ArgumentNullException">onException is null</exception>
            <exception cref="T:System.ArgumentNullException">onResult is null</exception>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.BaseSocketServer">
            <summary>
            abstract socket server
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.BaseSocketServer.#ctor(System.Int32,System.Int32)">
            <summary>
            new
            </summary>
            <param name="socketBufferSize"></param>
            <param name="messageBufferSize"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.BaseSocketServer.AddListener(System.String,System.Net.IPEndPoint)">
            <summary>
            add socket listener
            </summary>
            <param name="name"></param>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.CommandSocketService`1">
            <summary>
            socket service for command.
            </summary>
            <typeparam name="TCommandInfo"></typeparam>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.ISocketService`1">
            <summary>
            socket service interface.
            </summary>
            <typeparam name="TCommandInfo"></typeparam>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.ISocketService`1.OnConnected(Lind.DDD.FastSocket.SocketBase.IConnection)">
            <summary>
            当建立socket连接时，会调用此方法
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.ISocketService`1.OnStartSending(Lind.DDD.FastSocket.SocketBase.IConnection,Lind.DDD.FastSocket.SocketBase.Packet)">
            <summary>
            开始发送<see cref="T:Lind.DDD.FastSocket.SocketBase.Packet"/>
            </summary>
            <param name="connection"></param>
            <param name="packet"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.ISocketService`1.OnSendCallback(Lind.DDD.FastSocket.SocketBase.IConnection,Lind.DDD.FastSocket.SocketBase.SendCallbackEventArgs)">
            <summary>
            发送回调
            </summary>
            <param name="connection"></param>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.ISocketService`1.OnReceived(Lind.DDD.FastSocket.SocketBase.IConnection,`0)">
            <summary>
            当接收到客户端新消息时，会调用此方法.
            </summary>
            <param name="connection"></param>
            <param name="cmdInfo"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.ISocketService`1.OnDisconnected(Lind.DDD.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            当socket连接断开时，会调用此方法
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.ISocketService`1.OnException(Lind.DDD.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            当发生异常时，会调用此方法
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="F:Lind.DDD.FastSocket.Server.CommandSocketService`1._dicCommand">
            <summary>
            command dictionary.
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.CommandSocketService`1.#ctor">
            <summary>
            new
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.CommandSocketService`1.OnConnected(Lind.DDD.FastSocket.SocketBase.IConnection)">
            <summary>
            当建立socket连接时，会调用此方法
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.CommandSocketService`1.OnStartSending(Lind.DDD.FastSocket.SocketBase.IConnection,Lind.DDD.FastSocket.SocketBase.Packet)">
            <summary>
            start sending
            </summary>
            <param name="connection"></param>
            <param name="packet"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.CommandSocketService`1.OnSendCallback(Lind.DDD.FastSocket.SocketBase.IConnection,Lind.DDD.FastSocket.SocketBase.SendCallbackEventArgs)">
            <summary>
            send callback
            </summary>
            <param name="connection"></param>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.CommandSocketService`1.OnReceived(Lind.DDD.FastSocket.SocketBase.IConnection,`0)">
            <summary>
            当接收到客户端新消息时，会调用此方法.
            </summary>
            <param name="connection"></param>
            <param name="cmdInfo"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.CommandSocketService`1.OnDisconnected(Lind.DDD.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            OnDisconnected
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.CommandSocketService`1.OnException(Lind.DDD.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            OnException
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.CommandSocketService`1.AddCommand(Lind.DDD.FastSocket.Server.Command.ICommand{`0})">
            <summary>
            add command.
            </summary>
            <param name="cmd"></param>
            <exception cref="T:System.ArgumentNullException">cmd is null</exception>
            <exception cref="T:System.ArgumentNullException">cmd.Name is null</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.CommandSocketService`1.HandleUnKnowCommand(Lind.DDD.FastSocket.SocketBase.IConnection,`0)">
            <summary>
            handle unknow command.
            </summary>
            <param name="connection"></param>
            <param name="commandInfo"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Command.AsyncBinaryCommandInfo">
            <summary>
            async binary command info.
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Command.ICommandInfo">
            <summary>
            command info interface.
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Command.ICommandInfo.CmdName">
            <summary>
            get the command name
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Command.AsyncBinaryCommandInfo.#ctor(System.String,System.Int32,System.Byte[])">
            <summary>
            new
            </summary>
            <param name="cmdName"></param>
            <param name="seqID"></param>
            <param name="buffer"></param>
            <exception cref="T:System.ArgumentNullException">cmdName is null or empty.</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Command.AsyncBinaryCommandInfo.Reply(Lind.DDD.FastSocket.SocketBase.IConnection,System.Byte[])">
            <summary>
            reply
            </summary>
            <param name="connection"></param>
            <param name="payload"></param>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Command.AsyncBinaryCommandInfo.CmdName">
            <summary>
            get the current command name.
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Command.AsyncBinaryCommandInfo.SeqID">
            <summary>
            seq id.
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Command.AsyncBinaryCommandInfo.Buffer">
            <summary>
            主体内容
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Command.DSSBinaryCommandInfo">
            <summary>
            async binary command info.
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Command.DSSBinaryCommandInfo.#ctor(System.Int32,System.Int16,System.String,System.Int16,System.String,System.String,System.Byte[])">
            <summary>
            new
            </summary>
            <param name="cmdName"></param>
            <param name="seqID"></param>
            <param name="buffer"></param>
            <exception cref="T:System.ArgumentNullException">cmdName is null or empty.</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Command.DSSBinaryCommandInfo.Reply(Lind.DDD.FastSocket.SocketBase.IConnection,System.Byte[])">
            <summary>
            回调客户端
            </summary>
            <param name="connection"></param>
            <param name="payload"></param>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Command.DSSBinaryCommandInfo.VersionNumber">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Command.DSSBinaryCommandInfo.ProjectID">
            <summary>
            项目号
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Command.DSSBinaryCommandInfo.ExtProperty">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Command.DSSBinaryCommandInfo.CmdName">
            <summary>
            get the current command name.
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Command.DSSBinaryCommandInfo.SeqID">
            <summary>
            seq id.
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Command.DSSBinaryCommandInfo.Buffer">
            <summary>
            主体内容,存储的对象
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Command.ICommand">
            <summary>
            command interface.
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Command.ICommand.Name">
            <summary>
            get the command name.
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Command.ICommand`1">
            <summary>
            command interfce.
            </summary>
            <typeparam name="TCommandInfo"></typeparam>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Command.ICommand`1.ExecuteCommand(Lind.DDD.FastSocket.SocketBase.IConnection,`0)">
            <summary>
            执行命令
            </summary>
            <param name="connection"></param>
            <param name="commandInfo"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Command.StringCommandInfo">
            <summary>
            string command info.
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Command.StringCommandInfo.#ctor(System.String,System.String[])">
            <summary>
            new
            </summary>
            <param name="cmdName"></param>
            <param name="parameters"></param>
            <exception cref="T:System.ArgumentNullException">cmdName is null or empty</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Command.StringCommandInfo.Reply(Lind.DDD.FastSocket.SocketBase.IConnection,System.String)">
            <summary>
            reply
            </summary>
            <param name="connection"></param>
            <param name="value"></param>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Command.StringCommandInfo.CmdName">
            <summary>
            get the current command name.
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Command.StringCommandInfo.Parameters">
            <summary>
            参数
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Command.ThriftCommandInfo">
            <summary>
            thrift command info.
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Command.ThriftCommandInfo.#ctor(System.Byte[])">
            <summary>
            new
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Command.ThriftCommandInfo.CmdName">
            <summary>
            get the current command name.
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Command.ThriftCommandInfo.Buffer">
            <summary>
            buffer
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Config.Server">
            <summary>
            server
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Config.Server.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Config.Server.Port">
            <summary>
            端口号。
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Config.Server.SocketBufferSize">
            <summary>
            Socket Buffer Size
            默认8192 bytes
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Config.Server.MessageBufferSize">
            <summary>
            Message Buffer Size
            默认1024 bytes
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Config.Server.MaxMessageSize">
            <summary>
            max message size,
            默认4MB
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Config.Server.MaxConnections">
            <summary>
            最大连接数，默认2W
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Config.Server.ServiceType">
            <summary>
            ServiceType
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Config.Server.Protocol">
            <summary>
            协议, 默认二进制协议
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Config.ServerCollection">
            <summary>
            服务器集合。
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Config.ServerCollection.CreateNewElement">
            <summary>
            创建新元素。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Config.ServerCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            获取指定元素的Key。
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Config.ServerCollection.Item(System.Int32)">
            <summary>
            获取指定位置的对象。
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Config.SocketServerConfig">
            <summary>
            socket server config.
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.Config.SocketServerConfig.Servers">
            <summary>
            服务器集合。
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.ISocketListener">
            <summary>
            socket listener
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.ISocketListener.Start">
            <summary>
            start listen
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.ISocketListener.Stop">
            <summary>
            stop listen
            </summary>
        </member>
        <member name="E:Lind.DDD.FastSocket.Server.ISocketListener.Accepted">
            <summary>
            socket accepted event
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.ISocketListener.Name">
            <summary>
            get name
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.ISocketListener.EndPoint">
            <summary>
            get endpoint
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.IUdpServer">
            <summary>
            upd server interface
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.IUdpServer.Start">
            <summary>
            开始
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.IUdpServer.Stop">
            <summary>
            stop
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.IUdpServer.SendTo(System.Net.EndPoint,System.Byte[])">
            <summary>
            异步发送
            </summary>
            <param name="endPoint"></param>
            <param name="payload"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.IUdpServer`1">
            <summary>
            upd server interface
            </summary>
            <typeparam name="TCommandInfo"></typeparam>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.IUdpService`1">
            <summary>
            udp service interface.
            </summary>
            <typeparam name="TCommandInfo"></typeparam>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.IUdpService`1.OnReceived(Lind.DDD.FastSocket.Server.UdpSession,`0)">
            <summary>
            OnReceived
            </summary>
            <param name="session"></param>
            <param name="cmdInfo"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.IUdpService`1.OnError(Lind.DDD.FastSocket.Server.UdpSession,System.Exception)">
            <summary>
            OnError
            </summary>
            <param name="session"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.PacketBuilder">
            <summary>
            <see cref="T:Lind.DDD.FastSocket.SocketBase.Packet"/> builder
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.PacketBuilder.ToAsyncBinary(System.String,System.Int32,System.Byte[])">
            <summary>
            to async binary <see cref="T:Lind.DDD.FastSocket.SocketBase.Packet"/>
            </summary>
            <param name="responseFlag"></param>
            <param name="seqID"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.PacketBuilder.ToDSSBinary(System.Int32,System.Int16,System.String,System.Int16,System.String,System.String,System.Byte[])">
            <summary>
             封装DSSBinary包
            </summary>
            <param name="seqID"></param>
            <param name="responseFlag"></param>
            <param name="versionNumber"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.PacketBuilder.ToCommandLine(System.String)">
            <summary>
            to command line <see cref="T:Lind.DDD.FastSocket.SocketBase.Packet"/>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Protocol.AsyncBinaryProtocol">
            <summary>
            异步二进制协议
            协议格式
            [Message Length(int32)][SeqID(int32)][Request|Response Flag Length(int16)][Request|Response Flag + Body Buffer]
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Protocol.IProtocol`1">
            <summary>
            协议接口
            </summary>
            <typeparam name="TCommandInfo"></typeparam>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Protocol.IProtocol`1.FindCommandInfo(Lind.DDD.FastSocket.SocketBase.IConnection,System.ArraySegment{System.Byte},System.Int32,System.Int32@)">
            <summary>
            Find CommandInfo
            </summary>
            <param name="connection"></param>
            <param name="buffer"></param>
            <param name="maxMessageSize"></param>
            <param name="readlength"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Protocol.AsyncBinaryProtocol.FindCommandInfo(Lind.DDD.FastSocket.SocketBase.IConnection,System.ArraySegment{System.Byte},System.Int32,System.Int32@)">
            <summary>
            find command
            </summary>
            <param name="connection"></param>
            <param name="buffer"></param>
            <param name="maxMessageSize"></param>
            <param name="readlength"></param>
            <returns></returns>
            <exception cref="T:Lind.DDD.FastSocket.Server.Protocol.BadProtocolException">bad async binary protocl</exception>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Protocol.BadProtocolException">
            <summary>
            bad protocol exception
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Protocol.BadProtocolException.#ctor">
            <summary>
            new
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Protocol.BadProtocolException.#ctor(System.String)">
            <summary>
            new
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Protocol.CommandLineProtocol">
            <summary>
            命令行协议(telnet协议)
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Protocol.CommandLineProtocol.FindCommandInfo(Lind.DDD.FastSocket.SocketBase.IConnection,System.ArraySegment{System.Byte},System.Int32,System.Int32@)">
            <summary>
            find command
            [cmdstr\n\r]
            </summary>
            <param name="connection"></param>
            <param name="buffer"></param>
            <param name="maxMessageSize"></param>
            <param name="readlength"></param>
            <returns></returns>
            <exception cref="T:Lind.DDD.FastSocket.Server.Protocol.BadProtocolException">bad command line protocol</exception>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Protocol.DSSBinaryProtocol">
            <summary>
            数据中心二进制协议
            协议的主体是命令，即你的协议去服务你的命令
            [Message Length(int32)][SeqID(int32)][ProjectID(int16)][ExtProperty(int16)][Cmd Length(int16)][VersonNumber Length(int16)][Cmd + VersonNumber + Body Buffer]
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Protocol.DSSBinaryProtocol.FindCommandInfo(Lind.DDD.FastSocket.SocketBase.IConnection,System.ArraySegment{System.Byte},System.Int32,System.Int32@)">
            <summary>
            将客户端转来的byte[]转换成指定对象（自定义协议）
            </summary>
            <param name="connection"></param>
            <param name="buffer"></param>
            <param name="maxMessageSize"></param>
            <param name="readlength"></param>
            <returns></returns>
            <exception cref="T:Lind.DDD.FastSocket.Server.Protocol.BadProtocolException">bad async binary protocl</exception>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Protocol.IUdpProtocol`1">
            <summary>
            a upd protocol
            </summary>
            <typeparam name="TCommandInfo"></typeparam>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Protocol.IUdpProtocol`1.FindCommandInfo(System.ArraySegment{System.Byte})">
            <summary>
            find command info
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Protocol.ProtocolNames">
            <summary>
            ProtocolNames
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Server.Protocol.ProtocolNames.AsyncBinary">
            <summary>
            异步binary协议
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Server.Protocol.ProtocolNames.Thrift">
            <summary>
            thrift协议
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Server.Protocol.ProtocolNames.CommandLine">
            <summary>
            命令行协议
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Server.Protocol.ProtocolNames.DSSBinary">
            <summary>
            数据同步中心协议，支持版本号
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.Protocol.ThriftProtocol">
            <summary>
            thrift protocol
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.Protocol.ThriftProtocol.FindCommandInfo(Lind.DDD.FastSocket.SocketBase.IConnection,System.ArraySegment{System.Byte},System.Int32,System.Int32@)">
            <summary>
            find command
            </summary>
            <param name="connection"></param>
            <param name="buffer"></param>
            <param name="maxMessageSize"></param>
            <param name="readlength"></param>
            <returns></returns>
            <exception cref="T:Lind.DDD.FastSocket.Server.Protocol.BadProtocolException">bad thrift protocol</exception>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.SocketListener">
            <summary>
            socket listener
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketListener.#ctor(System.String,System.Net.IPEndPoint,Lind.DDD.FastSocket.SocketBase.IHost)">
            <summary>
            new
            </summary>
            <param name="name"></param>
            <param name="endPoint"></param>
            <param name="host"></param>
            <exception cref="T:System.ArgumentNullException">name is null or empty</exception>
            <exception cref="T:System.ArgumentNullException">endPoint is null</exception>
            <exception cref="T:System.ArgumentNullException">host is null</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketListener.Start">
            <summary>
            start
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketListener.Stop">
            <summary>
            stop
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketListener.AcceptAsync(System.Net.Sockets.Socket)">
            <summary>
            accept socket.
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketListener.AcceptAsyncCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            async accept socket completed handle.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Lind.DDD.FastSocket.Server.SocketListener.Accepted">
            <summary>
            socket accepted event
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.SocketListener.Name">
            <summary>
            get listener name
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.Server.SocketListener.EndPoint">
            <summary>
            get listener endPoint
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.SocketServer`1">
            <summary>
            socket server.
            </summary>
            <typeparam name="TCommandInfo"></typeparam>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketServer`1.#ctor(Lind.DDD.FastSocket.Server.ISocketService{`0},Lind.DDD.FastSocket.Server.Protocol.IProtocol{`0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            new
            </summary>
            <param name="socketService"></param>
            <param name="protocol"></param>
            <param name="socketBufferSize"></param>
            <param name="messageBufferSize"></param>
            <param name="maxMessageSize"></param>
            <param name="maxConnections"></param>
            <exception cref="T:System.ArgumentNullException">socketService is null.</exception>
            <exception cref="T:System.ArgumentNullException">protocol is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">maxMessageSize</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">maxConnections</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketServer`1.listener_Accepted(Lind.DDD.FastSocket.Server.ISocketListener,Lind.DDD.FastSocket.SocketBase.IConnection)">
            <summary>
            socket accepted handler
            </summary>
            <param name="listener"></param>
            <param name="connection"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketServer`1.Start">
            <summary>
            start
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketServer`1.Stop">
            <summary>
            stop
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketServer`1.AddListener(System.String,System.Net.IPEndPoint)">
            <summary>
            add socket listener
            </summary>
            <param name="name"></param>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketServer`1.OnConnected(Lind.DDD.FastSocket.SocketBase.IConnection)">
            <summary>
            OnConnected
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketServer`1.OnStartSending(Lind.DDD.FastSocket.SocketBase.IConnection,Lind.DDD.FastSocket.SocketBase.Packet)">
            <summary>
            start sending
            </summary>
            <param name="connection"></param>
            <param name="packet"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketServer`1.OnSendCallback(Lind.DDD.FastSocket.SocketBase.IConnection,Lind.DDD.FastSocket.SocketBase.SendCallbackEventArgs)">
            <summary>
            send callback
            </summary>
            <param name="connection"></param>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketServer`1.OnMessageReceived(Lind.DDD.FastSocket.SocketBase.IConnection,Lind.DDD.FastSocket.SocketBase.MessageReceivedEventArgs)">
            <summary>
            OnMessageReceived
            </summary>
            <param name="connection"></param>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketServer`1.OnDisconnected(Lind.DDD.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            OnDisconnected
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketServer`1.OnError(Lind.DDD.FastSocket.SocketBase.IConnection,System.Exception)">
            <summary>
            onError
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.SocketServerManager">
            <summary>
            Socket server manager.
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketServerManager.Init">
            <summary>
            初始化Socket Server
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketServerManager.Init(System.String)">
            <summary>
            初始化Socket Server
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketServerManager.Init(Lind.DDD.FastSocket.Server.Config.SocketServerConfig)">
            <summary>
            初始化Socket Server
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketServerManager.GetProtocol(System.String)">
            <summary>
            get protocol.
            </summary>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketServerManager.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.SocketServerManager.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.UdpServer`1">
            <summary>
            upd server
            </summary>
            <typeparam name="TCommandInfo"></typeparam>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.Utils.DisposableBase">
            <summary>
            disposable base
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.DisposableBase.Finalize">
            <summary>
            finalize
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.DisposableBase.Dispose">
            <summary>
            dispose
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.DisposableBase.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">true表示清理托管资源</param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.DisposableBase.Free(System.Boolean)">
            <summary>
            free
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.DisposableBase.CheckDisposedWithException">
            <summary>
            检测并抛出<see cref="T:System.ObjectDisposedException"/>
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.SocketBase.Utils.DisposableBase.IsDisposed">
            <summary>
            true表示已disposed
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.UdpServer`1.#ctor(System.Int32,Lind.DDD.FastSocket.Server.Protocol.IUdpProtocol{`0},Lind.DDD.FastSocket.Server.IUdpService{`0})">
            <summary>
            new
            </summary>
            <param name="port"></param>
            <param name="protocol"></param>
            <param name="service"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.UdpServer`1.#ctor(System.Int32,System.Int32,System.Int32,Lind.DDD.FastSocket.Server.Protocol.IUdpProtocol{`0},Lind.DDD.FastSocket.Server.IUdpService{`0})">
            <summary>
            new
            </summary>
            <param name="port"></param>
            <param name="messageBufferSize"></param>
            <param name="receiveThreads"></param>
            <param name="protocol"></param>
            <param name="service"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentNullException">protocol is null.</exception>
            <exception cref="T:System.ArgumentNullException">service is null.</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.UdpServer`1.BeginReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            异步接收数据
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.UdpServer`1.ReceiveCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            completed handle
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.UdpServer`1.Start">
            <summary>
            start
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.UdpServer`1.Stop">
            <summary>
            stop
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.UdpServer`1.SendTo(System.Net.EndPoint,System.Byte[])">
            <summary>
            send to...
            </summary>
            <param name="endPoint"></param>
            <param name="payload"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.UdpServer`1.Free(System.Boolean)">
            <summary>
            free
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.UdpServer`1.AsyncSendPool">
            <summary>
            用于异步发送的<see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/>对象池
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.UdpServer`1.AsyncSendPool.#ctor(System.Int32,System.Net.Sockets.Socket)">
            <summary>
            new
            </summary>
            <param name="messageBufferSize"></param>
            <param name="socket"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.UdpServer`1.AsyncSendPool.GetSocketAsyncEventArgs">
            <summary>
            get
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.UdpServer`1.AsyncSendPool.ReleaseSocketAsyncEventArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            release
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.UdpServer`1.AsyncSendPool.SendCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            send completed handle
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.UdpServer`1.AsyncSendPool.SendAsync(System.Net.EndPoint,System.Byte[])">
            <summary>
            sned async
            </summary>
            <param name="endPoint"></param>
            <param name="payload"></param>
            <exception cref="T:System.ArgumentNullException">endPoint is null</exception>
            <exception cref="T:System.ArgumentNullException">payload is null or empty</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">payload length大于messageBufferSize</exception>
        </member>
        <member name="T:Lind.DDD.FastSocket.Server.UdpSession">
            <summary>
            upd session
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.Server.UdpSession.RemoteEndPoint">
            <summary>
            get remote endPoint
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.UdpSession.#ctor(System.Net.EndPoint,Lind.DDD.FastSocket.Server.IUdpServer)">
            <summary>
            new
            </summary>
            <param name="remoteEndPoint"></param>
            <param name="server"></param>
            <exception cref="T:System.ArgumentNullException">server is null</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.Server.UdpSession.SendAsync(System.Byte[])">
            <summary>
            sned async
            </summary>
            <param name="payload"></param>
            <exception cref="T:System.ArgumentNullException">payload is null or empty</exception>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.ConnectionCollection">
            <summary>
            socket connection collection
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.ConnectionCollection._dic">
            <summary>
            key:ConnectionID
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.ConnectionCollection.Add(Lind.DDD.FastSocket.SocketBase.IConnection)">
            <summary>
            add
            </summary>
            <param name="connection"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">connection is null</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.ConnectionCollection.Remove(System.Int64)">
            <summary>
            remove connection by id.
            </summary>
            <param name="connectionID"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.ConnectionCollection.Get(System.Int64)">
            <summary>
            get by connection id
            </summary>
            <param name="connectionID"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.ConnectionCollection.ToArray">
            <summary>
            to array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.ConnectionCollection.Count">
            <summary>
            count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.ConnectionCollection.DisconnectAll">
            <summary>
            断开所有连接
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.DefaultConnection">
            <summary>
            default socket connection
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.IConnection">
            <summary>
            a connection interface.
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.IConnection.BeginSend(Lind.DDD.FastSocket.SocketBase.Packet)">
            <summary>
            异步发送数据
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.IConnection.BeginReceive">
            <summary>
            异步接收数据
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.IConnection.BeginDisconnect(System.Exception)">
            <summary>
            异步断开连接
            </summary>
        </member>
        <member name="E:Lind.DDD.FastSocket.SocketBase.IConnection.StartSending">
            <summary>
            packet start sending event
            </summary>
        </member>
        <member name="E:Lind.DDD.FastSocket.SocketBase.IConnection.SendCallback">
            <summary>
            packet send callback event
            </summary>
        </member>
        <member name="E:Lind.DDD.FastSocket.SocketBase.IConnection.MessageReceived">
            <summary>
            message received event
            </summary>
        </member>
        <member name="E:Lind.DDD.FastSocket.SocketBase.IConnection.Disconnected">
            <summary>
            disconnected event
            </summary>
        </member>
        <member name="E:Lind.DDD.FastSocket.SocketBase.IConnection.Error">
            <summary>
            connection error event
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.SocketBase.IConnection.Active">
            <summary>
            return the connection is active.
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.SocketBase.IConnection.ConnectionID">
            <summary>
            get the connection id.
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.SocketBase.IConnection.LocalEndPoint">
            <summary>
            获取本地IP地址
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.SocketBase.IConnection.RemoteEndPoint">
            <summary>
            获取远程IP地址
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.SocketBase.IConnection.UserData">
            <summary>
            获取或设置与用户数据
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.#ctor(System.Int64,System.Net.Sockets.Socket,Lind.DDD.FastSocket.SocketBase.IHost)">
            <summary>
            new
            </summary>
            <param name="connectionID"></param>
            <param name="socket"></param>
            <param name="host"></param>
            <exception cref="T:System.ArgumentNullException">socket is null</exception>
            <exception cref="T:System.ArgumentNullException">host is null</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.BeginSend(Lind.DDD.FastSocket.SocketBase.Packet)">
            <summary>
            异步发送数据
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.BeginReceive">
            <summary>
            异步接收数据
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.BeginDisconnect(System.Exception)">
            <summary>
            异步断开连接
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.Free">
            <summary>
            dispose
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.OnStartSending(Lind.DDD.FastSocket.SocketBase.Packet)">
            <summary>
            fire StartSending
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.OnSendCallback(Lind.DDD.FastSocket.SocketBase.SendCallbackEventArgs)">
            <summary>
            fire SendCallback
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.OnMessageReceived(Lind.DDD.FastSocket.SocketBase.MessageReceivedEventArgs)">
            <summary>
            fire MessageReceived
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.OnDisconnected(System.Exception)">
            <summary>
            fire Disconnected
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.OnError(System.Exception)">
            <summary>
            fire Error
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.SendPacketInternal(Lind.DDD.FastSocket.SocketBase.Packet)">
            <summary>
            internal send packet.
            </summary>
            <param name="packet"></param>
            <exception cref="T:System.ArgumentNullException">packet is null</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.SendPacketInternal(Lind.DDD.FastSocket.SocketBase.Packet,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            internal send packet.
            </summary>
            <param name="packet"></param>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.SendAsyncCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            async send callback
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.ReceiveInternal(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            receive
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.ReceiveAsyncCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            async receive callback
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.MessageProcessCallback(System.ArraySegment{System.Byte},System.Int32)">
            <summary>
            message process callback
            </summary>
            <param name="payload"></param>
            <param name="readlength"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">readlength less than 0 or greater than payload.Count.</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.DisconnectInternal(System.Exception)">
            <summary>
            disconnect
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.DisconnectCallback(System.IAsyncResult)">
            <summary>
            disconnect callback
            </summary>
            <param name="result"></param>
        </member>
        <member name="E:Lind.DDD.FastSocket.SocketBase.DefaultConnection.StartSending">
            <summary>
            packet start sending event
            </summary>
        </member>
        <member name="E:Lind.DDD.FastSocket.SocketBase.DefaultConnection.SendCallback">
            <summary>
            packet send callback event
            </summary>
        </member>
        <member name="E:Lind.DDD.FastSocket.SocketBase.DefaultConnection.MessageReceived">
            <summary>
            message received event
            </summary>
        </member>
        <member name="E:Lind.DDD.FastSocket.SocketBase.DefaultConnection.Disconnected">
            <summary>
            连接断开事件
            </summary>
        </member>
        <member name="E:Lind.DDD.FastSocket.SocketBase.DefaultConnection.Error">
            <summary>
            connection error event
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.SocketBase.DefaultConnection.Active">
            <summary>
            return the connection is active.
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.SocketBase.DefaultConnection.ConnectionID">
            <summary>
            get the connection id.
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.SocketBase.DefaultConnection.LocalEndPoint">
            <summary>
            获取本地IP地址
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.SocketBase.DefaultConnection.RemoteEndPoint">
            <summary>
            获取远程IP地址
            </summary>
        </member>
        <member name="P:Lind.DDD.FastSocket.SocketBase.DefaultConnection.UserData">
            <summary>
            获取或设置与用户数据
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.DefaultConnection.SendQueue">
            <summary>
            packet send queue
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.SendQueue.TrySend(Lind.DDD.FastSocket.SocketBase.Packet)">
            <summary>
            try send
            </summary>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.SendQueue.TrySendNext">
            <summary>
            try sned next packet
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.DefaultConnection.SendQueue.Close">
            <summary>
            close
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.DefaultConnection.SendResult">
            <summary>
            send result
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.DefaultConnection.SendResult.Closed">
            <summary>
            closed
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.DefaultConnection.SendResult.SendCurr">
            <summary>
            send current
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.DefaultConnection.SendResult.Enqueued">
            <summary>
            已入列
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.DisconnectedHandler">
            <summary>
            connection disconnected delegate
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.ErrorHandler">
            <summary>
            error delegate
            </summary>
            <param name="connection"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.MessageReceivedHandler">
            <summary>
            message received delegate
            </summary>
            <param name="connection"></param>
            <param name="e"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.MessageProcessHandler">
            <summary>
            消息处理handler
            </summary>
            <param name="buffer"></param>
            <param name="readlength"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.MessageReceivedEventArgs">
            <summary>
            message received eventArgs
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.MessageReceivedEventArgs.Buffer">
            <summary>
            Buffer
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.MessageReceivedEventArgs.#ctor(System.ArraySegment{System.Byte},Lind.DDD.FastSocket.SocketBase.MessageProcessHandler)">
            <summary>
            new
            </summary>
            <param name="buffer"></param>
            <param name="processCallback"></param>
            <exception cref="T:System.ArgumentNullException">processCallback is null</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.MessageReceivedEventArgs.SetReadlength(System.Int32)">
            <summary>
            设置已读取长度
            </summary>
            <param name="readlength"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.SendCallbackHandler">
            <summary>
            send callback delegate
            </summary>
            <param name="connection"></param>
            <param name="e"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.SendCallbackEventArgs">
            <summary>
            send callback eventArgs
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.SendCallbackEventArgs.Packet">
            <summary>
            packet
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.SendCallbackEventArgs.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.SendCallbackEventArgs.#ctor(Lind.DDD.FastSocket.SocketBase.Packet,Lind.DDD.FastSocket.SocketBase.SendCallbackStatus)">
            <summary>
            new
            </summary>
            <param name="packet"></param>
            <param name="status"></param>
            <exception cref="T:System.ArgumentNullException">packet is null</exception>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.SendCallbackStatus">
            <summary>
            packet send status
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.SendCallbackStatus.Success">
            <summary>
            发送成功
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.SendCallbackStatus.Failed">
            <summary>
            发送失败
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.StartSendingHandler">
            <summary>
            begin send handler
            </summary>
            <param name="connection"></param>
            <param name="packet"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.Log.ConsoleListener">
            <summary>
            console trace listener
            </summary>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.Log.ITraceListener">
            <summary>
            trace listener interface.
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.ITraceListener.Debug(System.String)">
            <summary>
            debug
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.ITraceListener.Error(System.String,System.Exception)">
            <summary>
            error
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.ITraceListener.Info(System.String)">
            <summary>
            info
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.ConsoleListener.Debug(System.String)">
            <summary>
            debug
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.ConsoleListener.Error(System.String,System.Exception)">
            <summary>
            error
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.ConsoleListener.Info(System.String)">
            <summary>
            info
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.Log.DiagnosticListener">
            <summary>
            diagnostic listener
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.DiagnosticListener.Debug(System.String)">
            <summary>
            debug
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.DiagnosticListener.Error(System.String,System.Exception)">
            <summary>
            error
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.DiagnosticListener.Info(System.String)">
            <summary>
            info
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.Log.ListenerWrapper">
            <summary>
            trace listener wrapper
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.ListenerWrapper.#ctor(System.Action{System.String},System.Action{System.String,System.Exception},System.Action{System.String})">
            <summary>
            new
            </summary>
            <param name="onDebug"></param>
            <param name="onError"></param>
            <param name="onInfo"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.ListenerWrapper.Debug(System.String)">
            <summary>
            debug
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.ListenerWrapper.Error(System.String,System.Exception)">
            <summary>
            error
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.ListenerWrapper.Info(System.String)">
            <summary>
            info
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.Log.Trace">
            <summary>
            trace
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.Trace.EnableConsole">
            <summary>
            enable console trace listener
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.Trace.EnableDiagnostic">
            <summary>
            enable diagnostic
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.Trace.AddListener(Lind.DDD.FastSocket.SocketBase.Log.ITraceListener)">
            <summary>
            add listener
            </summary>
            <param name="listener"></param>
            <exception cref="T:System.ArgumentNullException">listener is null</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.Trace.Debug(System.String)">
            <summary>
            debug
            </summary>
            <param name="message"></param>
            <exception cref="T:System.ArgumentNullException">message is null</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.Trace.Info(System.String)">
            <summary>
            info
            </summary>
            <param name="message"></param>
            <exception cref="T:System.ArgumentNullException">message is null</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Log.Trace.Error(System.String,System.Exception)">
            <summary>
            error
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
            <exception cref="T:System.ArgumentNullException">message is null</exception>
        </member>
        <member name="T:FastSocket.SocketBase.SerializeHelper">
            <summary>
            序列化辅助类
            </summary>
        </member>
        <member name="M:FastSocket.SocketBase.SerializeHelper.SerializeToBinary(System.Object)">
            <summary>
            将对象序列化到字节流
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FastSocket.SocketBase.SerializeHelper.DeserializeFromBinary(System.Byte[])">
            <summary>
            将字节流反序列化成对象
            </summary>
            <param name="someBytes"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.Utils.ConsistentHashContainer`1">
            <summary>
            一致性哈希container
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.#ctor(System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            new
            </summary>
            <param name="source"></param>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.Get(System.UInt32)">
            <summary>
            Given an item key hash, 
            this method returns the Server which is closest on the server key continuum.
            </summary>
            <param name="consistentKey"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.Get(System.Byte[])">
            <summary>
            get
            </summary>
            <param name="consistentKey"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.FNV1_32">
            <summary>
            Fowler-Noll-Vo hash, variant 1, 32-bit version.
            http://www.isthe.com/chongo/tech/comp/fnv/
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.FNV1_32.hash">
            <summary>
            hash
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.FNV1_32.#ctor">
            <summary>
            new
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.FNV1_32.Initialize">
            <summary>
            init
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.FNV1_32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            hashcore
            </summary>
            <param name="array"></param>
            <param name="ibStart"></param>
            <param name="cbSize"></param>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.FNV1_32.HashFinal">
            <summary>
            hash final
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.ModifiedFNV1_32">
            <summary>
            Modified Fowler-Noll-Vo hash, 32-bit version.
            http://home.comcast.net/~bretm/hash/6.html
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.ConsistentHashContainer`1.ModifiedFNV1_32.HashFinal">
            <summary>
            hashFinal.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.Utils.Date">
            <summary>
            关于时间的一些操作
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.Utils.Date.unixEpoch">
            <summary>
            unix下的纪元时间
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.Utils.Date.dateTimeMaxValueMillisecondsSinceEpoch">
            <summary>
            the max milliseconds since epoch.
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.Date.ToUniversalTime(System.DateTime)">
            <summary>
            Converts a DateTime to UTC (with special handling for MinValue and MaxValue).
            </summary>
            <param name="dateTime">A DateTime.</param>
            <returns>The DateTime in UTC.</returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.Date.ToMillisecondsSinceEpoch(System.DateTime)">
            <summary>
            Converts a DateTime to number of milliseconds since Unix epoch.
            </summary>
            <param name="dateTime">A DateTime.</param>
            <returns>Number of seconds since Unix epoch.</returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.Date.ToSecondsSinceEpoch(System.DateTime)">
            <summary>
            Converts a DateTime to number of seconds since Unix epoch.
            </summary>
            <param name="dateTime">A DateTime.</param>
            <returns>Number of seconds since Unix epoch.</returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.Date.ToDateTimeFromMillisecondsSinceEpoch(System.Int64)">
            <summary>
            Converts from number of milliseconds since Unix epoch to DateTime.
            </summary>
            <param name="millisecondsSinceEpoch">The number of milliseconds since Unix epoch.</param>
            <returns>A DateTime.</returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.Date.ToDateTimeFromSecondsSinceEpoch(System.Int64)">
            <summary>
            Converts from number of seconds since Unix epoch to DateTime.
            </summary>
            <param name="secondsSinceEpoch">The number of seconds since Unix epoch.</param>
            <returns>A DateTime.</returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.Date.ToLocalTime(System.DateTime,System.DateTimeKind)">
            <summary>
            Converts a DateTime to local time (with special handling for MinValue and MaxValue).
            </summary>
            <param name="dateTime">A DateTime.</param>
            <param name="kind">A DateTimeKind.</param>
            <returns>The DateTime in local time.</returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.Date.SpecifyKind(System.DateTime,System.DateTimeKind)">
            <summary>
            SpecifyKind
            </summary>
            <param name="dt"></param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.Utils.IPUtility">
            <summary>
            ip utility
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.Utils.IPUtility.ipABegin">
            <summary>
            A类: 10.0.0.0-10.255.255.255
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.Utils.IPUtility.ipAEnd">
            <summary>
            A类: 10.0.0.0-10.255.255.255
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.Utils.IPUtility.ipBBegin">
            <summary>
            B类: 172.16.0.0-172.31.255.255   
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.Utils.IPUtility.ipBEnd">
            <summary>
            B类: 172.16.0.0-172.31.255.255   
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.Utils.IPUtility.ipCBegin">
            <summary>
            C类: 192.168.0.0-192.168.255.255
            </summary>
        </member>
        <member name="F:Lind.DDD.FastSocket.SocketBase.Utils.IPUtility.ipCEnd">
            <summary>
            C类: 192.168.0.0-192.168.255.255
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.IPUtility.#cctor">
            <summary>
            static new
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.IPUtility.ConvertToNumber(System.String)">
            <summary>
            ipaddress convert to long
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.IPUtility.ConvertToNumber(System.Net.IPAddress)">
            <summary>
            ipaddress convert to long
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.IPUtility.IsIntranet(System.String)">
            <summary>
            true表示为内网IP
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.IPUtility.IsIntranet(System.Net.IPAddress)">
            <summary>
            true表示为内网IP
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.IPUtility.IsIntranet(System.Int64)">
            <summary>
            true表示为内网IP
            </summary>
            <param name="longIP"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.IPUtility.GetLocalIntranetIP">
            <summary>
            获取本机内网IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.IPUtility.GetLocalIntranetIPList">
            <summary>
            获取本机内网IP列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.Utils.NetworkBitConverter">
            <summary>
            network bit converter.
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.NetworkBitConverter.GetBytes(System.Int16)">
            <summary>
            以网络字节数组的形式返回指定的 16 位有符号整数值。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.NetworkBitConverter.GetBytes(System.Int32)">
            <summary>
            以网络字节数组的形式返回指定的 32 位有符号整数值。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.NetworkBitConverter.GetBytes(System.Int64)">
            <summary>
            以网络字节数组的形式返回指定的 64 位有符号整数值。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.NetworkBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            返回由网络字节数组中指定位置的两个字节转换来的 16 位有符号整数。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.NetworkBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            返回由网络字节数组中指定位置的四个字节转换来的 32 位有符号整数。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.NetworkBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            返回由网络字节数组中指定位置的八个字节转换来的 64 位有符号整数。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.Utils.ReflectionHelper">
            <summary>
            反射帮助类。
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.ReflectionHelper.GetImplementObjects``1(System.Reflection.Assembly)">
            <summary>
            获取实现了指定类口类型的基类实例。
            </summary>
            <typeparam name="T">接口类型</typeparam>
            <param name="assembly">指定的程序集</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">assembly is null</exception>
        </member>
        <member name="T:Lind.DDD.FastSocket.SocketBase.Utils.TaskEx">
            <summary>
            task ex
            </summary>
        </member>
        <member name="M:Lind.DDD.FastSocket.SocketBase.Utils.TaskEx.Delay(System.Int32,System.Action)">
            <summary>
            延迟执行某个动作
            </summary>
            <param name="dueTime"></param>
            <param name="callback"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">dueTime</exception>
            <exception cref="T:System.ArgumentNullException">callback is null</exception>
        </member>
        <member name="M:Thrift.Collections.TCollections.Equals(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            This will return true if the two collections are value-wise the same.
            If the collection contains a collection, the collections will be compared using this method.
            </summary>
        </member>
        <member name="M:Thrift.Collections.TCollections.GetHashCode(System.Collections.IEnumerable)">
            <summary>
            This returns a hashcode based on the value of the enumerable.
            </summary>
        </member>
        <member name="T:Thrift.Protocol.TBinaryProtocol.Factory">
            Factory
        </member>
        <member name="F:Thrift.Protocol.TCompactProtocol.lastField_">
            Used to keep track of the last field for the current and previous structs,
            so we can do the delta stuff.
        </member>
        <member name="F:Thrift.Protocol.TCompactProtocol.booleanField_">
            If we encounter a boolean field begin, save the TField here so it can 
            have the value incorporated.
        </member>
        <member name="F:Thrift.Protocol.TCompactProtocol.boolValue_">
            If we Read a field header, and it's a boolean field, save the boolean 
            value here so that ReadBool can use it.
        </member>
        <member name="F:Thrift.Protocol.TCompactProtocol.byteDirectBuffer">
            Writes a byte without any possibility of all that field header nonsense. 
            Used internally by other writing methods that know they need to Write a byte.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteByteDirect(System.Int32)">
            Writes a byte without any possibility of all that field header nonsense.
        </member>
        <member name="F:Thrift.Protocol.TCompactProtocol.i32buf">
            Write an i32 as a varint. Results in 1-5 bytes on the wire.
            TODO: make a permanent buffer like WriteVarint64?
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteMessageBegin(Thrift.Protocol.TMessage)">
            Write a message header to the wire. Compact Protocol messages contain the
            protocol version so we can migrate forwards in the future if need be.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteStructBegin(Thrift.Protocol.TStruct)">
            Write a struct begin. This doesn't actually put anything on the wire. We 
            use it as an opportunity to put special placeholder markers on the field
            stack so we can get the field id deltas correct.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteStructEnd">
            Write a struct end. This doesn't actually put anything on the wire. We use
            this as an opportunity to pop the last field from the current struct off
            of the field stack.
        </member>
        <!-- 对于成员“M:Thrift.Protocol.TCompactProtocol.WriteFieldBegin(Thrift.Protocol.TField)”忽略有格式错误的 XML 注释 -->
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteFieldBeginInternal(Thrift.Protocol.TField,System.Byte)">
            The workhorse of WriteFieldBegin. It has the option of doing a 
            'type override' of the type header. This is used specifically in the 
            boolean field case.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteFieldStop">
            Write the STOP symbol so we know there are no more fields in this struct.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteMapBegin(Thrift.Protocol.TMap)">
            Write a map header. If the map is empty, omit the key and value type 
            headers, as we don't need any additional information to skip it.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteListBegin(Thrift.Protocol.TList)">
            Write a list header.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteSetBegin(Thrift.Protocol.TSet)">
            Write a set header.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteBool(System.Boolean)">
            Write a boolean value. Potentially, this could be a boolean field, in 
            which case the field header info isn't written yet. If so, decide what the
            right type header is for the value and then Write the field header. 
            Otherwise, Write a single byte.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteByte(System.SByte)">
            Write a byte. Nothing to see here!
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteI16(System.Int16)">
            Write an I16 as a zigzag varint.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteI32(System.Int32)">
            Write an i32 as a zigzag varint.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteI64(System.Int64)">
            Write an i64 as a zigzag varint.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteDouble(System.Double)">
            Write a double to the wire as 8 bytes.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteString(System.String)">
            Write a string to the wire with a varint size preceding.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteBinary(System.Byte[])">
            Write a byte array, using a varint for the size. 
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.WriteCollectionBegin(Thrift.Protocol.TType,System.Int32)">
            Abstract method for writing the start of lists and sets. List and sets on 
            the wire differ only by the type indicator.
        </member>
        <member name="F:Thrift.Protocol.TCompactProtocol.varint64out">
            Write an i64 as a varint. Results in 1-10 bytes on the wire.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.longToZigzag(System.Int64)">
            Convert l into a zigzag long. This allows negative numbers to be 
            represented compactly as a varint.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.intToZigZag(System.Int32)">
            Convert n into a zigzag int. This allows negative numbers to be 
            represented compactly as a varint.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.fixedLongToBytes(System.Int64,System.Byte[],System.Int32)">
            Convert a long into little-endian bytes in buf starting at off and going 
            until off+7.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadMessageBegin">
            Read a message header. 
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadStructBegin">
            Read a struct begin. There's nothing on the wire for this, but it is our
            opportunity to push a new struct begin marker onto the field stack.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadStructEnd">
            Doesn't actually consume any wire data, just removes the last field for 
            this struct from the field stack.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadFieldBegin">
            Read a field header off the wire. 
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadMapBegin">
            Read a map header off the wire. If the size is zero, skip Reading the key
            and value type. This means that 0-length maps will yield TMaps without the
            "correct" types.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadListBegin">
            Read a list header off the wire. If the list size is 0-14, the size will 
            be packed into the element type header. If it's a longer list, the 4 MSB
            of the element type header will be 0xF, and a varint will follow with the
            true size.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadSetBegin">
            Read a set header off the wire. If the set size is 0-14, the size will 
            be packed into the element type header. If it's a longer set, the 4 MSB
            of the element type header will be 0xF, and a varint will follow with the
            true size.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadBool">
            Read a boolean off the wire. If this is a boolean field, the value should
            already have been Read during ReadFieldBegin, so we'll just consume the
            pre-stored value. Otherwise, Read a byte.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadByte">
            Read a single byte off the wire. Nothing interesting here.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadI16">
            Read an i16 from the wire as a zigzag varint.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadI32">
            Read an i32 from the wire as a zigzag varint.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadI64">
            Read an i64 from the wire as a zigzag varint.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadDouble">
            No magic here - just Read a double off the wire.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadString">
            Reads a byte[] (via ReadBinary), and then UTF-8 decodes it.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadBinary">
            Read a byte[] from the wire. 
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadBinary(System.Int32)">
            Read a byte[] of a known length from the wire. 
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadVarint32">
            Read an i32 from the wire as a varint. The MSB of each byte is set
            if there is another byte to follow. This can Read up to 5 bytes.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.ReadVarint64">
            Read an i64 from the wire as a proper varint. The MSB of each byte is set 
            if there is another byte to follow. This can Read up to 10 bytes.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.zigzagToInt(System.UInt32)">
            Convert from zigzag int to int.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.zigzagToLong(System.UInt64)">
            Convert from zigzag long to long.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.bytesToLong(System.Byte[])">
            Note that it's important that the mask bytes are long literals, 
            otherwise they'll default to ints, and when you shift an int left 56 bits,
            you just get a messed up int.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.getTType(System.Byte)">
            Given a TCompactProtocol.Types constant, convert it to its corresponding 
            TType value.
        </member>
        <member name="M:Thrift.Protocol.TCompactProtocol.getCompactType(Thrift.Protocol.TType)">
            Given a TType value, find the appropriate TCompactProtocol.Types constant.
        </member>
        <member name="T:Thrift.Protocol.TCompactProtocol.Types">
            All of the on-wire type codes.
        </member>
        <member name="T:Thrift.Protocol.TCompactProtocol.Factory">
            Factory
        </member>
        <member name="T:Thrift.Protocol.TJSONProtocol">
             <summary>
             JSON protocol implementation for thrift.
            
             This is a full-featured protocol supporting Write and Read.
            
             Please see the C++ class header for a detailed description of the
             protocol's wire format.
            
             Adapted from the Java version.
             </summary>
        </member>
        <member name="M:Thrift.Protocol.TJSONProtocol.PushContext(Thrift.Protocol.TJSONProtocol.JSONBaseContext)">
            <summary>
             Push a new JSON context onto the stack.
            </summary>
        </member>
        <member name="M:Thrift.Protocol.TJSONProtocol.PopContext">
            <summary>
             Pop the last JSON context off the stack
            </summary>
        </member>
        <member name="M:Thrift.Protocol.TJSONProtocol.#ctor(Thrift.Transport.TTransport)">
            <summary>
             TJSONProtocol Constructor
            </summary>
        </member>
        <member name="M:Thrift.Protocol.TJSONProtocol.ReadJSONSyntaxChar(System.Byte[])">
            <summary>
             Read a byte that must match b[0]; otherwise an exception is thrown.
             Marked protected to avoid synthetic accessor in JSONListContext.Read
             and JSONPairContext.Read
            </summary>
        </member>
        <member name="M:Thrift.Protocol.TJSONProtocol.HexVal(System.Byte)">
            <summary>
             Convert a byte containing a hex char ('0'-'9' or 'a'-'f') into its
             corresponding hex value
            </summary>
        </member>
        <member name="M:Thrift.Protocol.TJSONProtocol.HexChar(System.Byte)">
            <summary>
             Convert a byte containing a hex value to its corresponding hex character
            </summary>
        </member>
        <member name="M:Thrift.Protocol.TJSONProtocol.WriteJSONString(System.Byte[])">
            <summary>
             Write the bytes in array buf as a JSON characters, escaping as needed
            </summary>
        </member>
        <member name="M:Thrift.Protocol.TJSONProtocol.WriteJSONInteger(System.Int64)">
            <summary>
             Write out number as a JSON value. If the context dictates so, it will be
             wrapped in quotes to output as a JSON string.
            </summary>
        </member>
        <member name="M:Thrift.Protocol.TJSONProtocol.WriteJSONDouble(System.Double)">
            <summary>
             Write out a double as a JSON value. If it is NaN or infinity or if the
             context dictates escaping, Write out as JSON string.
            </summary>
        </member>
        <member name="M:Thrift.Protocol.TJSONProtocol.WriteJSONBase64(System.Byte[])">
            <summary>
             Write out contents of byte array b as a JSON string with base-64 encoded
             data
            </summary>
        </member>
        <member name="M:Thrift.Protocol.TJSONProtocol.ReadJSONString(System.Boolean)">
            <summary>
             Read in a JSON string, unescaping as appropriate.. Skip Reading from the
             context if skipContext is true.
            </summary>
        </member>
        <member name="M:Thrift.Protocol.TJSONProtocol.IsJSONNumeric(System.Byte)">
            <summary>
             Return true if the given byte could be a valid part of a JSON number.
            </summary>
        </member>
        <!-- 对于成员“M:Thrift.Protocol.TJSONProtocol.ReadJSONNumericChars”忽略有格式错误的 XML 注释 -->
        <member name="M:Thrift.Protocol.TJSONProtocol.ReadJSONInteger">
            <summary>
             Read in a JSON number. If the context dictates, Read in enclosing quotes.
            </summary>
        </member>
        <member name="M:Thrift.Protocol.TJSONProtocol.ReadJSONDouble">
            <summary>
             Read in a JSON double value. Throw if the value is not wrapped in quotes
             when expected or if wrapped in quotes when not expected.
            </summary>
        </member>
        <!-- 对于成员“M:Thrift.Protocol.TJSONProtocol.ReadJSONBase64”忽略有格式错误的 XML 注释 -->
        <member name="T:Thrift.Protocol.TJSONProtocol.Factory">
            <summary>
            Factory for JSON protocol objects
            </summary>
        </member>
        <member name="T:Thrift.Protocol.TJSONProtocol.JSONBaseContext">
            <summary>
             Base class for tracking JSON contexts that may require
             inserting/Reading additional JSON syntax characters
             This base context does nothing.
            </summary>
        </member>
        <member name="T:Thrift.Protocol.TJSONProtocol.JSONListContext">
            <summary>
             Context for JSON lists. Will insert/Read commas before each item except
             for the first one
            </summary>
        </member>
        <member name="T:Thrift.Protocol.TJSONProtocol.JSONPairContext">
            <summary>
             Context for JSON records. Will insert/Read colons before the value portion
             of each record pair, and commas before each key except the first. In
             addition, will indicate that numbers in the key position need to be
             escaped in quotes (since JSON keys must be strings).
            </summary>
        </member>
        <member name="T:Thrift.Protocol.TJSONProtocol.LookaheadReader">
            <summary>
             Holds up to one byte from the transport
            </summary>
        </member>
        <member name="M:Thrift.Protocol.TJSONProtocol.LookaheadReader.Read">
            <summary>
             Return and consume the next byte to be Read, either taking it from the
             data buffer if present or getting it from the transport otherwise.
            </summary>
        </member>
        <member name="M:Thrift.Protocol.TJSONProtocol.LookaheadReader.Peek">
            <summary>
             Return the next byte to be Read without consuming, filling the data
             buffer if it has not been filled alReady.
            </summary>
        </member>
        <member name="T:Thrift.Protocol.TMultiplexedProcessor">
             TMultiplexedProcessor is a TProcessor allowing a single TServer to provide multiple services.
             To do so, you instantiate the processor and then register additional processors with it, 
             as shown in the following example:
            
                 TMultiplexedProcessor processor = new TMultiplexedProcessor();
            
                 processor.registerProcessor(
                     "Calculator",
                     new Calculator.Processor(new CalculatorHandler()));
            
                 processor.registerProcessor(
                     "WeatherReport",
                     new WeatherReport.Processor(new WeatherReportHandler()));
            
                 TServerTransport t = new TServerSocket(9090);
                 TSimpleServer server = new TSimpleServer(processor, t);
            
                 server.serve();
        </member>
        <member name="M:Thrift.Protocol.TMultiplexedProcessor.RegisterProcessor(System.String,Thrift.TProcessor)">
             'Register' a service with this TMultiplexedProcessor. This allows us to broker 
             requests to individual services by using the service name to select them at request time.
            
             Args: 
             - serviceName    Name of a service, has to be identical to the name
                              declared in the Thrift IDL, e.g. "WeatherReport".
             - processor      Implementation of a service, ususally referred to as "handlers", 
                              e.g. WeatherReportHandler implementing WeatherReport.Iface.
        </member>
        <member name="M:Thrift.Protocol.TMultiplexedProcessor.Process(Thrift.Protocol.TProtocol,Thrift.Protocol.TProtocol)">
             This implementation of process performs the following steps:
            
             - Read the beginning of the message.
             - Extract the service name from the message.
             - Using the service name to locate the appropriate processor.
             - Dispatch to the processor, with a decorated instance of TProtocol
                that allows readMessageBegin() to return the original TMessage.
              
             Throws an exception if 
             - the message type is not CALL or ONEWAY, 
             - the service name was not found in the message, or 
             - the service name has not been RegisterProcessor()ed.  
        </member>
        <member name="T:Thrift.Protocol.TMultiplexedProcessor.StoredMessageProtocol">
            Our goal was to work with any protocol.  In order to do that, we needed
            to allow them to call readMessageBegin() and get a TMessage in exactly
            the standard format, without the service name prepended to TMessage.name.
        </member>
        <member name="T:Thrift.Protocol.TProtocolDecorator">
             TProtocolDecorator forwards all requests to an enclosed TProtocol instance, 
             providing a way to author concise concrete decorator subclasses.  While it has 
             no abstract methods, it is marked abstract as a reminder that by itself, 
             it does not modify the behaviour of the enclosed TProtocol.
            
             See p.175 of Design Patterns (by Gamma et al.)
             See TMultiplexedProtocol
        </member>
        <member name="M:Thrift.Protocol.TProtocolDecorator.#ctor(Thrift.Protocol.TProtocol)">
            Encloses the specified protocol.
            @param protocol All operations will be forward to this protocol.  Must be non-null.
        </member>
        <member name="T:Thrift.Protocol.TMultiplexedProtocol">
             TMultiplexedProtocol is a protocol-independent concrete decorator that allows a Thrift 
             client to communicate with a multiplexing Thrift server, by prepending the service name 
             to the function name during function calls.
            
             NOTE: THIS IS NOT TO BE USED BY SERVERS.  
             On the server, use TMultiplexedProcessor to handle requests from a multiplexing client.
            
             This example uses a single socket transport to invoke two services:
            
                 TSocket transport = new TSocket("localhost", 9090);
                 transport.open();
                 
                 TBinaryProtocol protocol = new TBinaryProtocol(transport);
            
                 TMultiplexedProtocol mp = new TMultiplexedProtocol(protocol, "Calculator");
                 Calculator.Client service = new Calculator.Client(mp);
            
                 TMultiplexedProtocol mp2 = new TMultiplexedProtocol(protocol, "WeatherReport");
                 WeatherReport.Client service2 = new WeatherReport.Client(mp2);
            
                 System.out.println(service.add(2,2));
                 System.out.println(service2.getTemperature());
            
        </member>
        <member name="F:Thrift.Protocol.TMultiplexedProtocol.SEPARATOR">
            Used to delimit the service name from the function name 
        </member>
        <member name="M:Thrift.Protocol.TMultiplexedProtocol.#ctor(Thrift.Protocol.TProtocol,System.String)">
             Wrap the specified protocol, allowing it to be used to communicate with a
             multiplexing server.  The <code>serviceName</code> is required as it is
             prepended to the message header so that the multiplexing server can broker
             the function call to the proper service.
            
             Args:
              protocol        Your communication protocol of choice, e.g. TBinaryProtocol
              serviceName     The service name of the service communicating via this protocol.
        </member>
        <member name="M:Thrift.Protocol.TMultiplexedProtocol.WriteMessageBegin(Thrift.Protocol.TMessage)">
            Prepends the service name to the function name, separated by TMultiplexedProtocol.SEPARATOR.
            Args:
              tMessage     The original message.
        </member>
        <member name="F:Thrift.Server.TServer.processor">
            Core processor
        </member>
        <member name="F:Thrift.Server.TServer.serverTransport">
            Server transport
        </member>
        <member name="F:Thrift.Server.TServer.inputTransportFactory">
            Input Transport Factory
        </member>
        <member name="F:Thrift.Server.TServer.outputTransportFactory">
            Output Transport Factory
        </member>
        <member name="F:Thrift.Server.TServer.inputProtocolFactory">
            Input Protocol Factory
        </member>
        <member name="F:Thrift.Server.TServer.outputProtocolFactory">
            Output Protocol Factory
        </member>
        <member name="M:Thrift.Server.TServer.#ctor(Thrift.TProcessor,Thrift.Transport.TServerTransport)">
            Default constructors.
        </member>
        <member name="M:Thrift.Server.TServer.Serve">
            The run method fires up the server and gets things going.
        </member>
        <member name="T:Thrift.Server.TSimpleServer">
            <summary>
            Simple single-threaded server for testing
            </summary>
        </member>
        <member name="T:Thrift.Server.TThreadedServer">
            <summary>
            Server that uses C# threads (as opposed to the ThreadPool) when handling requests
            </summary>
        </member>
        <!-- 对于成员“M:Thrift.Server.TThreadedServer.Serve”忽略有格式错误的 XML 注释 -->
        <member name="M:Thrift.Server.TThreadedServer.Execute">
            <summary>
            Loops on processing a client forever
            threadContext will be a TTransport instance
            </summary>
            <param name="threadContext"></param>
        </member>
        <member name="T:Thrift.Server.TThreadPoolServer">
            <summary>
            Server that uses C# built-in ThreadPool to spawn threads when handling requests
            </summary>
        </member>
        <member name="M:Thrift.Server.TThreadPoolServer.Serve">
            <summary>
            Use new ThreadPool thread for each new client connection
            </summary>
        </member>
        <member name="M:Thrift.Server.TThreadPoolServer.Execute(System.Object)">
            <summary>
            Loops on processing a client forever
            threadContext will be a TTransport instance
            </summary>
            <param name="threadContext"></param>
        </member>
        <!-- 对于成员“T:Thrift.Transport.TTransportFactory”忽略有格式错误的 XML 注释 -->
        <member name="F:Thrift.Transport.TServerSocket.server">
            Underlying server with socket
        </member>
        <member name="F:Thrift.Transport.TServerSocket.port">
            Port to listen on
        </member>
        <member name="F:Thrift.Transport.TServerSocket.clientTimeout">
            Timeout for client sockets from accept
        </member>
        <member name="F:Thrift.Transport.TServerSocket.useBufferedSockets">
            Whether or not to wrap new TSocket connections in buffers
        </member>
        <member name="M:Thrift.Transport.TServerSocket.#ctor(System.Net.Sockets.TcpListener)">
            Creates a server socket from underlying socket object
        </member>
        <member name="M:Thrift.Transport.TServerSocket.#ctor(System.Net.Sockets.TcpListener,System.Int32)">
            Creates a server socket from underlying socket object
        </member>
        <member name="M:Thrift.Transport.TServerSocket.#ctor(System.Int32)">
            Creates just a port listening server socket
        </member>
        <member name="M:Thrift.Transport.TServerSocket.#ctor(System.Int32,System.Int32)">
            Creates just a port listening server socket
        </member>
        <member name="T:Lind.DDD.Upload.Demo">
            <summary>
            fastDFS分存布文件上传使用
            在图片地址后添加尺寸的后缀自动生成小像，例如 http://www.fastdfs.com/demo/pictruename_100x100.jpg
            </summary>
        </member>
        <member name="T:Lind.DDD.Upload.FileUploaderFactory">
            <summary>
            文件上传生产者
            </summary>
        </member>
        <member name="F:Lind.DDD.Upload.FileUploaderFactory.Instance">
            <summary>
            上传实例
            </summary>
        </member>
        <member name="T:Lind.DDD.Upload.IFileUploader">
            <summary>
            文件上传规范
            </summary>
        </member>
        <member name="M:Lind.DDD.Upload.IFileUploader.UploadVideo(Lind.DDD.Upload.VideoUploadParameter)">
            <summary>
            上传视频文件
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Upload.IFileUploader.UploadFile(Lind.DDD.Upload.FileUploadParameter)">
            <summary>
            上传普通文件
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Upload.IFileUploader.UploadImage(Lind.DDD.Upload.ImageUploadParameter)">
            <summary>
            上传图片
            </summary>
            <param name="param"></param>
            <returns></returns>
            <remarks>Update:cyr(Ben) 20150317</remarks>
        </member>
        <member name="T:Lind.DDD.Upload.FastDFSUploader">
            <summary>
            使用fastDFS完成文件上传
            </summary>
        </member>
        <member name="M:Lind.DDD.Upload.FastDFSUploader.MultipartUpload(Lind.DDD.Upload.UploadParameterBase)">
            <summary>
            文件分块上传，适合大文件
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Upload.FastDFSUploader.ContinueUploadPart(System.IO.Stream,System.String)">
            <summary>
            断点续传
            </summary>
            <param name="stream"></param>
            <param name="serverShortName"></param>
        </member>
        <member name="M:Lind.DDD.Upload.FastDFSUploader.BeginUploadPart(System.IO.Stream,System.String)">
            <summary>
            从指定位置开始上传文件
            </summary>
            <param name="stream"></param>
            <param name="beginOffset"></param>
            <param name="serverShortName"></param>
        </member>
        <member name="M:Lind.DDD.Upload.FastDFSUploader.NetCheck">
            <summary>
            网络可用为True,否则为False
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Upload.FastDFSUploader.GetFormatUrl(System.String)">
            <summary>
            拼接Url
            </summary>
            <param name="shortName"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Upload.FastDFSUploader.UploadVideo(Lind.DDD.Upload.VideoUploadParameter)">
            <summary>
            上传视频
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Upload.FastDFSUploader.UploadFile(Lind.DDD.Upload.FileUploadParameter)">
            <summary>
            上传普通文件
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Upload.FastDFSUploader.UploadImage(Lind.DDD.Upload.ImageUploadParameter)">
            <summary>
            上传图片
            </summary>
            <param name="param"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:Lind.DDD.Upload.FastDFSUploader.DFSGroupName">
            <summary>
            目录名,需要提前在fastDFS上建立
            </summary>
        </member>
        <member name="P:Lind.DDD.Upload.FastDFSUploader.Node">
            <summary>
            FastDFS结点
            </summary>
        </member>
        <member name="P:Lind.DDD.Upload.FastDFSUploader.Host">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="P:Lind.DDD.Upload.FastDFSUploader.FaildCount">
            <summary>
            失败次数
            </summary>
        </member>
        <member name="T:Lind.DDD.Upload.FileUploadParameter">
            <summary>
            文件上传参数对象
            </summary>
        </member>
        <member name="T:Lind.DDD.Upload.UploadParameterBase">
            <summary>
            文件上传参数基类
            </summary>
        </member>
        <member name="P:Lind.DDD.Upload.UploadParameterBase.ServiceFileName">
            <summary>
            前一次上传时生成的服务器端文件名，如果需要断点续传，需传入此文件名
            </summary>
        </member>
        <member name="P:Lind.DDD.Upload.UploadParameterBase.Stream">
            <summary>
            文件流
            </summary>
        </member>
        <member name="P:Lind.DDD.Upload.UploadParameterBase.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Lind.DDD.Upload.UploadParameterBase.MaxSize">
            <summary>
            文件大小限制（单位bit 默认1M）
            </summary>
        </member>
        <member name="P:Lind.DDD.Upload.UploadParameterBase.FilenameExtension">
            <summary>
            上传文件类型限制
            </summary>
        </member>
        <member name="T:Lind.DDD.Upload.ImageUploadParameter">
            <summary>
            图片上传参数对象
            </summary>
        </member>
        <member name="M:Lind.DDD.Upload.ImageUploadParameter.#ctor(System.IO.Stream,System.String,System.String[],System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="stream"></param>
            <param name="fileName"></param>
            <param name="filenameExtension">默认支持常用图片格式</param>
            <param name="maxSize"></param>
        </member>
        <member name="M:Lind.DDD.Upload.ImageUploadParameter.#ctor(System.IO.Stream,System.String,System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="stream"></param>
            <param name="fileName"></param>
            <param name="maxSize">单位为M</param>
        </member>
        <member name="T:Lind.DDD.Upload.VideoUploadParameter">
            <summary>
            视频上传参数对象
            </summary>
        </member>
        <member name="T:Lind.DDD.Upload.FileUploadResult">
            <summary>
            文件上传返回对象
            </summary>
        </member>
        <member name="T:Lind.DDD.Upload.UploadResultBase">
            <summary>
            上传文件返回对象基类
            </summary>
        </member>
        <member name="P:Lind.DDD.Upload.UploadResultBase.FilePath">
            <summary>
            返回文件地址
            </summary>
        </member>
        <member name="P:Lind.DDD.Upload.UploadResultBase.ErrorMessage">
            <summary>
            错误消息列表
            </summary>
        </member>
        <member name="P:Lind.DDD.Upload.UploadResultBase.IsValid">
            <summary>
            是否上传成功
            </summary>
        </member>
        <member name="T:Lind.DDD.Upload.ImageUploadResult">
            <summary>
            图像上传返回对象
            </summary>
        </member>
        <member name="T:Lind.DDD.Upload.VideoUploadResult">
            <summary>
            视频上传返回对象
            </summary>
        </member>
        <member name="M:Lind.DDD.Upload.VideoUploadResult.ToString">
            <summary>
            把VideoPath和ScreenshotPaths拼起来  以竖线（|）隔开
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lind.DDD.Upload.VideoUploadResult.ScreenshotPaths">
            <summary>
            上传的视频截图地址
            </summary>
        </member>
        <member name="P:Lind.DDD.Upload.VideoUploadResult.UploadStatus">
            <summary> 
            上传状态
            </summary>
        </member>
        <member name="T:Lind.DDD.Upload.UploadStatus">
            <summary>
            上传状态
            </summary>
        </member>
        <member name="F:Lind.DDD.Upload.UploadStatus.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:Lind.DDD.Upload.UploadStatus.Interrupted">
            <summary>
            中断
            </summary>
        </member>
        <member name="F:Lind.DDD.Upload.UploadStatus.Faild">
            <summary>
            失败
            </summary>
        </member>
        <member name="T:Lind.DDD.Utils.ILog">
            <summary>
            日志操作规范
            </summary>
        </member>
        <member name="T:Lind.DDD.Utils.ILogFormatter">
            <summary>
            日志格式规范
            </summary>
        </member>
        <member name="T:Lind.DDD.Utils.TextLog">
            <summary>
            实现一个文本日志
            </summary>
        </member>
        <member name="T:Lind.DDD.Utils.FormatStandard">
            <summary>
            实现一个标准的格式
            </summary>
        </member>
        <member name="T:Lind.DDD.Utils.CoderTimeLogs">
            <summary>
            代码运行时间记录
            author:张占岭
            create date:2012-1-10
            </summary>
        </member>
        <member name="T:Lind.DDD.Utils.DataCache">
            <summary>
            缓存相关的操作类
            占占
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.DataCache.GetCache(System.String)">
            <summary>
            获取当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.DataCache.SetCache(System.String,System.Object)">
            <summary>
            设置当前应用程序指定CacheKey的Cache值
            调用：DataCache.SetCache("name", "zzl");
            </summary>
            <param name="CacheKey"></param>
            <param name="objObject"></param>
        </member>
        <member name="M:Lind.DDD.Utils.DataCache.SetCache(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            设置当前应用程序指定CacheKey的Cache值
            调用：DataCache.SetCache("name", "zzl", DateTime.Now.AddMinutes(1), TimeSpan.Zero);
            </summary>
            <param name="CacheKey"></param>
            <param name="objObject"></param>
        </member>
        <member name="M:Lind.DDD.Utils.DataCache.RemoveCache(System.String)">
            <summary>
            移除指定Cache
            </summary>
            <param name="CacheKey"></param>
        </member>
        <member name="M:Lind.DDD.Utils.DataCache.OnCacheDeleted(System.String)">
            <summary>
            触发缓存删除事件
            </summary>
        </member>
        <member name="E:Lind.DDD.Utils.DataCache.CacheDeleted">
            <summary>
            缓存删除事件
            </summary>
        </member>
        <member name="T:Lind.DDD.Utils.CacheEventHandler">
            <summary>
            缓存委托
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Lind.DDD.Utils.CacheEventArgs">
            <summary>
            缓存事件源
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.DataTableHelper.ToList``1(System.Data.DataTable)">
            <summary>    
            DataTable 转换为List 集合    
            </summary>    
            <typeparam name="TResult">类型</typeparam>    
            <param name="dt">DataTable</param>    
            <returns></returns>    
        </member>
        <member name="M:Lind.DDD.Utils.DataTableHelper.ToDataTableTow(System.Collections.IList)">
            <summary>    
            将集合类转换成DataTable    
            </summary>    
            <param name="list">集合</param>    
            <returns></returns>    
        </member>
        <member name="M:Lind.DDD.Utils.DataTableHelper.ListToDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>    
            将泛型集合类转换成DataTable    
            </summary>    
            <typeparam name="T">集合项类型</typeparam>    
            <param name="list">集合</param>    
            <returns>数据集(表)</returns>    
        </member>
        <member name="M:Lind.DDD.Utils.DataTableHelper.ToDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>    
            将泛型集合类转换成DataTable扩展方法    
            </summary>    
            <typeparam name="T">集合项类型</typeparam>    
            <param name="list">集合</param>    
            <returns>数据集(表)</returns>    
        </member>
        <member name="M:Lind.DDD.Utils.DataTableHelper.ToDataTable``1(System.Collections.Generic.IList{``0},System.String[])">
            <summary>    
            将泛型集合类转换成DataTable    
            </summary>    
            <typeparam name="T">集合项类型</typeparam>    
            <param name="list">集合</param>    
            <param name="propertyName">需要返回的列的列名</param>    
            <returns>数据集(表)</returns>    
        </member>
        <member name="M:Lind.DDD.Utils.DataTableHelper.ObjectToByteArray(System.Object)">
            <summary>
            将可序列化对象转成Byte数组
            </summary>
            <param name="o">对象</param>
            <returns>返回相关数组</returns>
        </member>
        <member name="M:Lind.DDD.Utils.DataTableHelper.ByteArrayToObject(System.Byte[])">
            <summary>
            将可序列化对象转成的byte数组还原为对象
            </summary>
            <param name="b">byte数组</param>
            <returns>相关对象</returns>
        </member>
        <member name="T:Lind.DDD.Utils.DistributedPrimaryKey">
            <summary>
            分布式主键生产者
            占12个字节的空间，由24个16进制数组成
            </summary>
        </member>
        <member name="F:Lind.DDD.Utils.DistributedPrimaryKey.epoch">
            <summary>
            The epoch.
            </summary>
        </member>
        <member name="F:Lind.DDD.Utils.DistributedPrimaryKey.inclock">
            <summary>
            The inclock.
            </summary>
        </member>
        <member name="F:Lind.DDD.Utils.DistributedPrimaryKey.inc">
            <summary>
            The inc.
            </summary>
        </member>
        <member name="F:Lind.DDD.Utils.DistributedPrimaryKey.machineHash">
            <summary>
            The machine hash.
            </summary>
        </member>
        <member name="F:Lind.DDD.Utils.DistributedPrimaryKey.procID">
            <summary>
            The proc id.
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.DistributedPrimaryKey.#cctor">
            <summary>
            Initializes static members of the <see cref="!:ObjectIdGenerator"/> class. 
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.DistributedPrimaryKey.NewID">
            <summary>
            生成一个24个数字组成的字符型主键，占用12个字符的存储空间
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Lind.DDD.Utils.DistributedPrimaryKey.Generate">
            <summary>
            Generates a byte array ObjectId.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Lind.DDD.Utils.DistributedPrimaryKey.GenerateTime">
            <summary>
            Generates time.
            </summary>
            <returns>
            The time.
            </returns>
        </member>
        <member name="M:Lind.DDD.Utils.DistributedPrimaryKey.GenerateInc">
            <summary>
            Generate an increment.
            </summary>
            <returns>
            The increment.
            </returns>
        </member>
        <member name="M:Lind.DDD.Utils.DistributedPrimaryKey.GenerateConstants">
            <summary>
            Generates constants.
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.DistributedPrimaryKey.GenerateHostHash">
            <summary>
            Generates a host hash.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Lind.DDD.Utils.DistributedPrimaryKey.GenerateProcId">
            <summary>
            Generates a proc id.
            </summary>
            <returns>
            Proc id.
            </returns>
        </member>
        <member name="T:Lind.DDD.Utils.Encryptor.DESByEncryptKey">
            <summary>
            带自定义密钥的DES(56位)
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.DESByEncryptKey.ChangeKeys">
            <summary>
            改变密钥向量
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.DESByEncryptKey.ChangeKeys(System.Byte[])">
            <summary>
            改变密钥向量
            </summary>
            <param name="keys">自定义向量</param>
        </member>
        <member name="F:Lind.DDD.Utils.Encryptor.DESByEncryptKey.PuKeys">
            <summary>
            自定义公共
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.DESByEncryptKey.EncryptDES(System.String)">
            <summary>
            DES加密
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.DESByEncryptKey.EncryptDES(System.String,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.DESByEncryptKey.DecryptDES(System.String)">
            <summary>
            DES解密
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串，失败返源串</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.DESByEncryptKey.DecryptDES(System.String,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串，失败返源串</returns>
        </member>
        <member name="T:Lind.DDD.Utils.Encryptor.DESEncryptor">
            <summary>
            DES加密类
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.DESEncryptor.DecryptString(System.String)">
            <summary>
            DES解密
            </summary>
            <param name="InputConnectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.DESEncryptor.EncryptString(System.String)">
            <summary>
            DES加密
            </summary>
            <param name="encryptedString"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.Encryptor.GetMD5(System.String,System.String)">
            <summary>
            与ASP兼容的MD5加密算法
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.Encryptor.BubbleSort(System.String[])">
            <summary>
            冒泡排序法
            按照字母序列从a到z的顺序排列
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.Encryptor.CreatUrl(System.String[],System.String,System.String,System.String)">
            <summary>
            生成URL链接或加密结果
            </summary>
            <param name="para">参数加密数组</param>
            <param name="_input_charset">编码格式</param>
            <param name="sign_type">加密类型</param>
            <param name="key">安全校验码</param>
            <returns>字符串URL或加密结果</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.MD5Encryptor.MD5(System.String)">
            <summary>
            MD5函数
            </summary>
            <param name="str">原始字符串</param>
            <returns>MD5结果</returns>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.MD5Encryptor.MD5(System.String,System.Int32)">
            <summary>
            代有加密码长度的ＭＤ５
            </summary>
            <param name="str"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.SHA256Encryptor.SHA256(System.String)">
            <summary>
            SHA256函数
            </summary>
            /// <param name="str">原始字符串</param>
            <returns>SHA256结果</returns>
        </member>
        <member name="T:Lind.DDD.Utils.Encryptor.Utility">
            <summary>
            加解密类
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.Utility.EncryptString(System.String)">
            <summary>
            加密方法
            </summary>
            <param name="str">加密字符</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.Utility.EncryptString(System.String,System.Int32,Lind.DDD.Utils.Encryptor.Utility.EncryptorType,System.String)">
            <summary>
            加密方法
            </summary>
            <param name="str">加密字符串</param>
            <param name="code">加密长度，只有MD5加密有本参数</param>
            <param name="type">产生密码类型</param>
            <param name="type">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.Utility.EncryptString(System.String,Lind.DDD.Utils.Encryptor.Utility.EncryptorType)">
            <summary>
            加密方法(32位)
            </summary>
            <param name="str">加密字符串</param>
            <param name="type">产生密码类型</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.Utility.EncryptString(System.String,System.String)">
            <summary>
            加密方法,带密钥
            </summary>
            <param name="str">加密字符串</param>
            <param name="passKey">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.Utility.DecryptString(System.String)">
            <summary>
            解密方法
            </summary>
            <param name="str">解密字符</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.Utility.DecryptString(System.String,System.String)">
            <summary>
            解密方法,带密钥
            </summary>
            <param name="str">需解密字符</param>
            <param name="passKey">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.Encryptor.Utility.DecryptString(System.String,Lind.DDD.Utils.Encryptor.Utility.EncryptorType,System.String)">
            <summary>
            解密方法
            </summary>
            <param name="str">需解密字符</param>
            <param name="type">解密方法</param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.Utils.Encryptor.Utility.EncryptorType">
            <summary>
            加密类型
            </summary>
        </member>
        <member name="F:Lind.DDD.Utils.Encryptor.Utility.EncryptorType.DES">
            <summary>
            DES加密
            </summary>
        </member>
        <member name="F:Lind.DDD.Utils.Encryptor.Utility.EncryptorType.DES3">
            <summary>
            3DES加密
            </summary>
        </member>
        <member name="F:Lind.DDD.Utils.Encryptor.Utility.EncryptorType.MD5">
            <summary>
            MD5加密
            </summary>
        </member>
        <member name="F:Lind.DDD.Utils.Encryptor.Utility.EncryptorType.Base64">
            <summary>
            Base64加密
            </summary>
        </member>
        <member name="F:Lind.DDD.Utils.Encryptor.Utility.EncryptorType.SHA256">
            <summary>
            加密方法
            </summary>
        </member>
        <member name="F:Lind.DDD.Utils.Encryptor.Utility.EncryptorType.DESByEncryptKey">
            <summary>
            DES加密（自定义密钥）
            </summary>
        </member>
        <member name="T:Lind.DDD.Utils.EnumExtensions">
            <summary>
            枚举类型扩展方法
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.EnumExtensions.GetEnumValuesFromFlagsEnum(System.Enum)">
            <summary>
            得到Flags特性的枚举的集合
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.EnumExtensions.GetDescription(System.Enum)">
            <summary>  
            获取枚举变量值的 Description 属性  
            </summary>  
            <param name="obj">枚举变量</param>  
            <returns>如果包含 Description 属性，则返回 Description 属性的值，否则返回枚举变量值的名称</returns>  
        </member>
        <member name="T:Lind.DDD.Utils.GuidHelper">
            <summary>
            关于GUID码的扩展功能
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.GuidHelper.GetGuidString">
            <summary>
            得到GUID码的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.GuidHelper.GetGuidLong">
            <summary>
            得到GUID码的长整形结构
            后话：原来BitConverter.ToInt64方法，只取buffer从startIndex开始向后加7个字节的值。
            也就是说，我们16字节的高8个字节被忽略掉了。GUID理想情况下，要2^128个数据才会出现冲突，
            而转换后，把字节数减半，也就是2^64数据就会出现冲突。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.ImageHelper.ImageHelper.GetImage(System.String,System.String)">
            <summary>
            在图片上输出文字
            </summary>
            <param name="fileName"></param>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.ImageHelper.ImageHelper.WordToImageStream(System.IO.Stream,System.String)">
            <summary>
            把文字加到图像流中
            </summary>
            <param name="stream"></param>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.ImageHelper.ImageHelper.GetImageWord(System.String,System.Char)">
            <summary>
            获取文字图片
            </summary>
            <param name="fileName"></param>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.ImageHelper.ImageHelper.StreamToBytes(System.IO.Stream)">
            <summary> 
            将 Stream 转成 byte[] 
            </summary> 
        </member>
        <member name="M:Lind.DDD.Utils.ImageHelper.ImageHelper.BytesToStream(System.Byte[])">
            <summary> 
            将 byte[] 转成 Stream 
            </summary> 
        </member>
        <member name="T:Lind.DDD.Utils.ImageHelper.WaterMark">
            <summary>
            水印
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.ImageHelper.WaterMark.Create">
            <summary>
            立即生成水印效果图
            </summary>
            <returns>生成成功返回true,否则返回false</returns>
        </member>
        <member name="P:Lind.DDD.Utils.ImageHelper.WaterMark.FontFamily">
            <summary>
            字体
            </summary>
        </member>
        <member name="P:Lind.DDD.Utils.ImageHelper.WaterMark.FontSize">
            <summary>
            文字大小
            </summary>
        </member>
        <member name="P:Lind.DDD.Utils.ImageHelper.WaterMark.FontStyle">
            <summary>
            文字风格
            </summary>
        </member>
        <member name="P:Lind.DDD.Utils.ImageHelper.WaterMark.Alpha">
            <summary>
            透明度0-255,255表示不透明
            </summary>
        </member>
        <member name="P:Lind.DDD.Utils.ImageHelper.WaterMark.Shadow">
            <summary>
            水印文字是否使用阴影
            </summary>
        </member>
        <member name="P:Lind.DDD.Utils.ImageHelper.WaterMark.BackgroundImage">
            <summary>
            底图
            </summary>
        </member>
        <member name="P:Lind.DDD.Utils.ImageHelper.WaterMark.Left">
            <summary>
            水印文字的左边距
            </summary>
        </member>
        <member name="P:Lind.DDD.Utils.ImageHelper.WaterMark.Top">
            <summary>
            水印文字的顶边距
            </summary>
        </member>
        <member name="P:Lind.DDD.Utils.ImageHelper.WaterMark.ResultImage">
            <summary>
            生成后的图片
            </summary>
        </member>
        <member name="P:Lind.DDD.Utils.ImageHelper.WaterMark.Text">
            <summary>
            水印文本
            </summary>
        </member>
        <member name="P:Lind.DDD.Utils.ImageHelper.WaterMark.Width">
            <summary>
            生成图片的宽度
            </summary>
        </member>
        <member name="P:Lind.DDD.Utils.ImageHelper.WaterMark.Height">
            <summary>
            生成图片的高度
            </summary>
        </member>
        <member name="P:Lind.DDD.Utils.ImageHelper.WaterMark.Adaptable">
            <summary>
            若文字太大，是否根据背景图来调整文字大小，默认为适应
            </summary>
        </member>
        <member name="P:Lind.DDD.Utils.ImageHelper.WaterMark.Quality">
            <summary>
            输出图片质量，质量范围0-100,类型为long
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.IPHelper.GetRealIPAddress">
            <summary>
            得到ＩＰ地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.IPHelper.IsIPAddress(System.String)">
            <summary>
            判断是否是IP地址格式 0.0.0.0
            </summary>
            <param name="str1">待判断的IP地址</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Lind.DDD.Utils.IPHelper.IP2Number(System.String)">
            <summary>
            将IP转换为十进制形式
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="P:Lind.DDD.Utils.IPHelper.getRealIPAddress">
            <summary> 
            取得客户端真实IP。如果有代理则取第一个非内网地址（能处理多层代理的问题） 
            <![CDATA[其原理可查看：《C#取真实IP地址及分析》]]>
            </summary> 
        </member>
        <member name="M:Lind.DDD.Utils.JsonHelper.ToJson(System.Object)">
            <summary>
            将指定的对象序列化成 JSON 数据。
            </summary>
            <param name="obj">要序列化的对象。</param>
            <returns></returns>  
        </member>
        <member name="M:Lind.DDD.Utils.JsonHelper.FromJson``1(System.String)">
            <summary>
            将指定的 JSON 数据反序列化成指定对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="json">JSON 数据。</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.JsonHelper.ToJson(System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            功能:集合按需要序列化
            author:仓储大叔
            </summary>
            <param name="obj"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.JsonHelper.GeneratorJson(System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            为对象生成Json字符串
            </summary>
            <param name="buffer"></param>
            <param name="t"></param>
            <param name="param"></param>
        </member>
        <member name="T:Lind.DDD.Utils.NumberConventer">
            <summary>
            阿拉伯数字转中文数字，中文数字转阿拉伯数字。
            by hcling97.Net 2007.03
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.NumberConventer.GetDotPart(System.String)">
            <summary>
            处理小数部分
            </summary>
            <param name="dotPart"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.NumberConventer.GetThousandPart(System.Int32)">
            <summary>
            万位以下的分析
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.NumberConventer.HandlePart(System.String)">
            <summary>
            处理亿以下内容。
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.NumberConventer.GetArabDotPart(System.String)">
            <summary>
            取得阿拉伯数字小数部分。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.NumberConventer.switchNum(System.String)">
            <summary>
            取得汉字对应的阿拉伯数字
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.Utils.QRCodeHelper">
            <summary>
            二维码工具
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.QRCodeHelper.GetQRCode(System.String,System.IO.MemoryStream)">
             <summary>  
             获取二维码  
             </summary>  
             <param name="strContent">待编码的字符</param>  
             <param name="ms">输出流</param>  
            <returns>True if the encoding succeeded, false if the content is empty or too large to fit in a QR code</returns>  
        </member>
        <member name="M:Lind.DDD.Utils.QRCodeHelper.OutPutQRCodeImage(System.String,System.Web.HttpResponseBase)">
            <summary>
            根据CodeUrl输出二维码图片
            </summary>
            <param name="qrCodeUrl"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.Utils.SerializationHelper">
            <summary>
            序列化与反序列化到文件
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.SerializationHelper.SerializableToBinary(System.String,System.Object)">
            <summary>
            二进制序列化到磁盘
            </summary>
            <param name="fileName"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Lind.DDD.Utils.SerializationHelper.DeserializeFromBinary(System.String)">
            <summary>
            二进制反序列化从磁盘到内存对象
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.SerializationHelper.SerializeToXml(System.String,System.Object)">
            <summary>
            XML将对象序列化到磁盘文件
            </summary>
            <param name="fileName"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Lind.DDD.Utils.SerializationHelper.DeserializeFromXml(System.String)">
            <summary>
            XML反序列化从磁盘到内存对象
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.SerializationHelper.SerializeToXml``1(System.String,``0)">
            <summary>
            泛型版本：XML将对象序列化到磁盘文件
            </summary>
            <param name="fileName"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Lind.DDD.Utils.SerializationHelper.DeserializeFromXml``1(System.String)">
            <summary>
            泛型版本：XML反序列化从磁盘到内存对象
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.SerializationHelper.SerializableToJson(System.String,System.Object)">
            <summary>
            二进制序列化到磁盘
            </summary>
            <param name="fileName"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Lind.DDD.Utils.SerializationHelper.DeserializeFromJson``1(System.String)">
            <summary>
            二进制反序列化从磁盘到内存对象
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.Utils.SerializeMemoryHelper">
            <summary>
            序列化与反序列化到内存
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.SerializeMemoryHelper.SerializeToXml(System.Object)">
            <summary>
            XML序列化
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.SerializeMemoryHelper.DeserializeFromXml(System.Type,System.String)">
            <summary>
            XML返序列化
            </summary>
            <param name="type"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.SerializeMemoryHelper.DeserializeFromXml``1(System.String)">
            <summary>
            XML泛型反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.SerializeMemoryHelper.SerializeToBinary(System.Object)">
            <summary>
            二进制序列化
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.SerializeMemoryHelper.DeserializeFromBinary(System.Byte[])">
            <summary>
            二进制反序列化
            </summary>
            <param name="someBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.SerializeMemoryHelper.DeserializeFromJson``1(System.String)">
            <summary>
            字符串反序列化
            </summary>
            <param name="strBase64"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.SerializeMemoryHelper.SerializeToJson``1(``0)">
            <summary>
            字符串序列化
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Utils.SerializeMemoryHelper.JsonSerializer``1(``0)">
            <summary>
            JSON序列化
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.SerializeMemoryHelper.JsonDeserialize``1(System.String)">
            <summary>
            JSON反序列化
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.SerializeMemoryHelper.ConvertJsonDateToDateString(System.Text.RegularExpressions.Match)">
            <summary>
            将Json序列化的时间由/Date(1294499956278+0800)转为字符串
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.SerializeMemoryHelper.ConvertDateStringToJsonDate(System.Text.RegularExpressions.Match)">
            <summary>
            将时间字符串转为Json时间
            </summary>
        </member>
        <member name="T:Lind.DDD.Utils.ThreadManager">
            <summary>
            线程管理
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.ThreadManager.Run(System.Action)">
            <summary>
            将在线程池上运行的指定工作排队
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Lind.DDD.Utils.ThreadManager.Run``1(System.Func{``0})">
            <summary>
            将在线程池上运行的指定工作排队，并返回 function 返回的 Task(TResult) 的代理项
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.Utils.ValidatedHelper">
            <summary>
            验证 助手类
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.ValidatedHelper.IsValidEmail(System.String)">
            <summary>
            检测是否符合email格式
            </summary>
            <param name="strEmail">要判断的email字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Lind.DDD.Utils.ValidatedHelper.IsURL(System.String)">
            <summary>
            检测是否是正确的Url
            </summary>
            <param name="strUrl">要验证的Url</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Lind.DDD.Utils.ValidatedHelper.IsIP(System.String)">
            <summary>
            是否为ip
            </summary>
            <param name="ip">IP 字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:Lind.DDD.Utils.ValidatedHelper.IsIPSect(System.String)">
            <summary>
            是否为ip
            </summary>
            <param name="ip">IPSect 字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:Lind.DDD.Utils.ValidatedHelper.IsSafeSqlString(System.String)">
            <summary>
            检测是否有Sql危险字符
            </summary>
            <param name="str">要判断字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Lind.DDD.Utils.ValidatedHelper.IsSafeUserInfoString(System.String)">
            <summary>
            检测用户名称是否有危险
            </summary>
            <param name="str">要判断字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Lind.DDD.Utils.ValidatedHelper.IsCorrectArray``1(System.String[])">
            <summary>
            验证数组中的值是否可以转化为指定的类型
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="strArray">要验证的字符串数组</param>
            <returns>验证者</returns>
        </member>
        <member name="M:Lind.DDD.Utils.ValidatedHelper.StringArrayIsLength(System.String[],System.Int32,System.Int32)">
            <summary>
            验证数组每一项的长度是否符合给定的标准
            </summary>
            <param name="strArray">要验证的字符串数组</param>
            <param name="minLength">最小长度</param>
            <param name="maxLength">最大长度</param>
            <returns>验证者</returns>
        </member>
        <member name="M:Lind.DDD.Utils.ValidatedHelper.IsNull(System.Object[])">
            <summary>
            验证数值是否为NULL
            </summary>
            <param name="objArr">参数数目可变处采用参数</param>
            <returns>验证者</returns>
        </member>
        <member name="T:Lind.DDD.Utils.Validator`1">
            <summary>
            验证器
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.Validator`1.#ctor(System.Collections.Generic.IEnumerable{Lind.DDD.Utils._Validator})">
            <summary>
            构造函数
            </summary>
            <param name="_validator"></param>
        </member>
        <member name="M:Lind.DDD.Utils.Validator`1._Validator">
            <summary>
            验证消息序列
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.Validator`1.SetCorrectValue(`0[])">
            <summary>
            设置确的值
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:Lind.DDD.Utils.Validator`1.GetCorrectValue">
            <summary>
            获取正确的数组
            </summary>
            <returns>如果验证没有完全通过返回 null</returns>
        </member>
        <member name="P:Lind.DDD.Utils.Validator`1.IsValid">
            <summary>
            是否验证成功
            </summary>
        </member>
        <member name="T:Lind.DDD.Utils.IsNullValidator">
            <summary>
            是否为空[专用]验证器
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.IsNullValidator.SetIndexArr(System.Int32[])">
            <summary>
            设置 不成功的索引值数组
            </summary>
            <param name="index">不成功的索引值数组</param>
        </member>
        <member name="M:Lind.DDD.Utils.IsNullValidator.#ctor(System.Int32[])">
            <summary>
            构造函数
            </summary>
            <param name="index">不成功的索引值数组</param>
        </member>
        <member name="P:Lind.DDD.Utils.IsNullValidator.IsVaild">
            <summary>
            是否验证成功
            </summary>
        </member>
        <member name="P:Lind.DDD.Utils.IsNullValidator.Index">
            <summary>
            索引
            </summary>
        </member>
        <member name="T:Lind.DDD.Utils._Validator">
            <summary>
            验证者
            </summary>
        </member>
        <member name="P:Lind.DDD.Utils._Validator.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Lind.DDD.Utils._Validator.Index">
            <summary>
            不符合条件的值所在数组中的索引
            </summary>
        </member>
        <member name="T:Lind.DDD.Domain.Entity">
            <summary>
            主键为int类型的实体基类
            </summary>
        </member>
        <member name="P:Lind.DDD.Domain.Entity.Id">
            <summary>
            标识列
            </summary>
        </member>
        <member name="T:Lind.DDD.Domain.Status">
            <summary>
            实体状态
            </summary>
        </member>
        <member name="F:Lind.DDD.Domain.Status.Normal">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:Lind.DDD.Domain.Status.Hidden">
            <summary>
            隐藏
            </summary>
        </member>
        <member name="F:Lind.DDD.Domain.Status.Deleted">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:Lind.DDD.Domain.Status.Freeze">
            <summary>
            冻结
            </summary>
        </member>
        <!-- 对于成员“T:Lind.DDD.Events.ActionDelegatedEventHandler`1”忽略有格式错误的 XML 注释 -->
        <member name="T:Lind.DDD.Events.IEventHandler`1">
            <summary>
            事件处理接口
            </summary>
            <typeparam name="TEvent">继承IEvent对象的事件源对象</typeparam>
        </member>
        <member name="M:Lind.DDD.Events.IEventHandler`1.Handle(`0)">
            <summary>
            处理程序
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Lind.DDD.Events.ActionDelegatedEventHandler`1.#ctor(System.Action{`0})">
            <summary>
            初始化一个新的<c>ActionDelegatedDomainEventHandler{TEvent}</c>实例。
            </summary>
            <param name="eventHandlerDelegate">用于当前领域事件处理器所代理的事件处理委托。</param>
        </member>
        <member name="M:Lind.DDD.Events.ActionDelegatedEventHandler`1.Handle(`0)">
            <summary>
            处理给定的事件。
            事实上，它是调用你传递过来的委托的实例，注意，这块设计的很巧妙
            </summary>
            <param name="evnt">需要处理的事件。</param>
        </member>
        <member name="M:Lind.DDD.Events.ActionDelegatedEventHandler`1.Equals(System.Object)">
            <summary>
            获取一个<see cref="T:System.Boolean"/>值，该值表示当前对象是否与给定的类型相同的另一对象相等。
            </summary>
            <param name="other">需要比较的与当前对象类型相同的另一对象。</param>
            <returns>如果两者相等，则返回true，否则返回false。</returns>
        </member>
        <member name="T:Lind.DDD.Events.Demo.OrderEvent">
            <summary>
            表示订单确认的领域事件。
            </summary>
        </member>
        <member name="T:Lind.DDD.Events.EventBase">
            <summary>
            事件对象[实体核心]
            </summary>
        </member>
        <member name="T:Lind.DDD.Events.IEvent">
            <summary>
            领域事件实体基类[实体接口]
            </summary>
        </member>
        <member name="P:Lind.DDD.Events.IEvent.AggregateRoot">
            <summary>
            领域事件实体的聚合根，生命周期在会话结束后消失
            </summary>
        </member>
        <member name="P:Lind.DDD.Events.EventBase.AggregateRoot">
            <summary>
            获取事实范围内的唯一标识，生命周期在本事件会话内有效
            </summary>
        </member>
        <member name="P:Lind.DDD.Events.EventBase.EventDate">
            <summary>
            事件发生的时间
            </summary>
        </member>
        <member name="P:Lind.DDD.Events.Demo.OrderEvent.ConfirmedDate">
            <summary>
            获取或设置订单确认的日期。
            </summary>
        </member>
        <member name="T:Lind.DDD.Events.Demo.OrderGeneratorEvent">
            <summary>
            添加订单的事件[事件实体]
            </summary>
        </member>
        <member name="T:Lind.DDD.Events.Demo.OrderConfirmedEvent">
            <summary>
            表示订单确认的领域事件。
            </summary>
        </member>
        <member name="P:Lind.DDD.Events.Demo.OrderConfirmedEvent.ConfirmedDate">
            <summary>
            获取或设置订单确认的日期。
            </summary>
        </member>
        <member name="T:Lind.DDD.Events.Demo.SendEmailEventHandler">
            <summary>
            发邮件功能[某个事件的行为]
            </summary>
        </member>
        <member name="T:Lind.DDD.Events.HandlesAsynchronouslyAttribute">
            <summary>
            异步事件处理
            Represents that the event handlers applied with this attribute
            will handle the events in a asynchronous process.
            </summary>
            <remarks>This attribute is only applicable to the message handlers and will only
            be used by the message buses or message dispatchers. Applying this attribute to
            other types of classes will take no effect.</remarks>
        </member>
        <member name="T:Lind.DDD.Events.EventBus">
            <summary>
            事件总线[事件功能核心代码]
            发布与订阅处理逻辑
            核心功能代码
            </summary>
        </member>
        <member name="T:Lind.DDD.Events.IEventBus">
            <summary>
            事件总线，生产者接口
            </summary>
        </member>
        <member name="M:Lind.DDD.Events.IEventBus.Publish``1(``0)">
            <summary>
             发布事件，支持异步事件
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="event"></param>
        </member>
        <member name="M:Lind.DDD.Events.IEventBus.Publish``1(``0,System.Action{``0,System.Boolean,System.Exception},System.Nullable{System.TimeSpan})">
            <summary>
             发布事件
            event参数为关键字,所以加了@符
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="event"></param>
            <param name="callback"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Lind.DDD.Events.IEventBus.PublishAsync``1(``0)">
             <summary>
            显式的异步发布事件,不需要为处理程序加HandlesAsynchronouslyAttribute
             </summary>
             <typeparam name="TEvent"></typeparam>
             <param name="event"></param>
        </member>
        <member name="M:Lind.DDD.Events.IEventBus.PublishAsync``1(``0,System.Action{``0,System.Boolean,System.Exception},System.Nullable{System.TimeSpan})">
            <summary>
            显式的异步发布事件,不需要为处理程序加HandlesAsynchronouslyAttribute
            event参数为关键字,所以加了@符
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="event"></param>
            <param name="callback"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Lind.DDD.Events.IEventBus.Subscribe``1(Lind.DDD.Events.IEventHandler{``0})">
            <summary>
             订阅事件列表
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Lind.DDD.Events.IEventBus.Subscribe``1(System.Action{``0})">
            <summary>
            订阅事件实体
            装饰模式
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="eventHandlerFunc"></param>
        </member>
        <member name="M:Lind.DDD.Events.IEventBus.Subscribe``1(System.Collections.Generic.IEnumerable{Lind.DDD.Events.IEventHandler{``0}})">
            <summary>
            订阅事件集合
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="eventHandlers"></param>
        </member>
        <member name="M:Lind.DDD.Events.IEventBus.Unsubscribe``1(Lind.DDD.Events.IEventHandler{``0})">
            <summary>
            取消订阅
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Lind.DDD.Events.IEventBus.Unsubscribe``1(System.Action{``0})">
            <summary>
            取消订阅
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="eventHandlerFunc"></param>
        </member>
        <member name="M:Lind.DDD.Events.IEventBus.Unsubscribe``1(System.Collections.Generic.IEnumerable{Lind.DDD.Events.IEventHandler{``0}})">
            <summary>
            取消订阅
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="eventHandlers"></param>
        </member>
        <member name="M:Lind.DDD.Events.IEventBus.UnsubscribeAll">
            <summary>
            取消订阅全部事件
            </summary>
        </member>
        <member name="M:Lind.DDD.Events.IEventBus.UnsubscribeAll``1">
            <summary>
            取消订阅全部事件
            </summary>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="F:Lind.DDD.Events.EventBus._instance">
            <summary>
            事件总线对象
            </summary>
        </member>
        <member name="F:Lind.DDD.Events.EventBus._eventBusType">
            <summary>
            事件总线存储方式
            </summary>
        </member>
        <member name="F:Lind.DDD.Events.EventBus._iEventBus">
            <summary>
            事件生产者
            </summary>
        </member>
        <member name="M:Lind.DDD.Events.EventBus.Subscribe``1(Lind.DDD.Events.IEventHandler{``0})">
            <summary>
            订阅事件列表
            </summary>
            <param name="type"></param>
            <param name="subTypeList"></param>
        </member>
        <member name="M:Lind.DDD.Events.EventBus.Subscribe``1(System.Action{``0})">
            <summary>
            订阅事件实体
            装饰模式
            </summary>
            <param name="type"></param>
            <param name="subTypeList"></param>
        </member>
        <member name="M:Lind.DDD.Events.EventBus.Unsubscribe``1(Lind.DDD.Events.IEventHandler{``0})">
            <summary>
            取消订阅事件
            </summary>
            <param name="type"></param>
            <param name="subType"></param>
        </member>
        <member name="M:Lind.DDD.Events.EventBus.UnsubscribeAll``1">
            <summary>
            取消指定事件的所有订阅
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="eventHandlerFunc"></param>
        </member>
        <member name="M:Lind.DDD.Events.EventBus.UnsubscribeAll">
            <summary>
            取消所有事件的所有订阅
            </summary>
        </member>
        <member name="M:Lind.DDD.Events.EventBus.Publish``1(``0)">
            <summary>
            发布事件，支持异步事件
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="evnt"></param>
        </member>
        <member name="M:Lind.DDD.Events.EventBus.Publish``1(``0,System.Action{``0,System.Boolean,System.Exception},System.Nullable{System.TimeSpan})">
            <summary>
            发布事件
            event参数为关键字,所以加了@符
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="event"></param>
            <param name="callback"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Lind.DDD.Events.EventBus.PublishAsync``1(``0)">
            <summary>
            显式的异步发布事件,不需要为处理程序加HandlesAsynchronouslyAttribute
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="event">具体事件执行者</param>
        </member>
        <member name="M:Lind.DDD.Events.EventBus.PublishAsync``1(``0,System.Action{``0,System.Boolean,System.Exception},System.Nullable{System.TimeSpan})">
            <summary>
            显式的异步发布事件,不需要为处理程序加HandlesAsynchronouslyAttribute
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="event">具体事件执行者</param>
            <param name="callback">回调</param>
            <param name="timeout">超时</param>
        </member>
        <member name="P:Lind.DDD.Events.EventBus.Instance">
            <summary>
            初始化空的事件总件,单例模式,双重锁，解决并发和性能问题
            </summary>
        </member>
        <member name="F:Lind.DDD.Events.MemoryEventBus._objLock">
            <summary>
            模式锁
            </summary>
        </member>
        <member name="F:Lind.DDD.Events.MemoryEventBus._eventHandlers">
            <summary>
            对于事件数据的存储，目前采用内存字典
            </summary>
        </member>
        <member name="F:Lind.DDD.Events.MemoryEventBus._eventHandlerEquals">
            <summary>
            比较两个委托Handler是否相同，以免添加重复事件
            </summary>
        </member>
        <member name="M:Lind.DDD.Events.MemoryEventBus.Subscribe``1(Lind.DDD.Events.IEventHandler{``0})">
            <summary>
            订阅事件列表
            </summary>
            <param name="type"></param>
            <param name="subTypeList"></param>
        </member>
        <member name="M:Lind.DDD.Events.MemoryEventBus.Subscribe``1(System.Action{``0})">
            <summary>
            订阅事件实体
            装饰模式
            </summary>
            <param name="type"></param>
            <param name="subTypeList"></param>
        </member>
        <member name="M:Lind.DDD.Events.MemoryEventBus.Unsubscribe``1(Lind.DDD.Events.IEventHandler{``0})">
            <summary>
            取消订阅事件
            </summary>
            <param name="type"></param>
            <param name="subType"></param>
        </member>
        <member name="M:Lind.DDD.Events.MemoryEventBus.UnsubscribeAll``1">
            <summary>
            取消指定事件的所有订阅
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="eventHandlerFunc"></param>
        </member>
        <member name="M:Lind.DDD.Events.MemoryEventBus.UnsubscribeAll">
            <summary>
            取消所有事件的所有订阅
            </summary>
        </member>
        <member name="M:Lind.DDD.Events.MemoryEventBus.Publish``1(``0)">
            <summary>
            发布事件，支持异步事件
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="evnt"></param>
        </member>
        <member name="M:Lind.DDD.Events.MemoryEventBus.Publish``1(``0,System.Action{``0,System.Boolean,System.Exception},System.Nullable{System.TimeSpan})">
            <summary>
            发布事件
            event参数为关键字,所以加了@符
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="event"></param>
            <param name="callback"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Lind.DDD.Events.MemoryEventBus.PublishAsync``1(``0)">
            <summary>
            显式的异步发布事件,不需要为处理程序加HandlesAsynchronouslyAttribute
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="event">具体事件执行者</param>
        </member>
        <member name="M:Lind.DDD.Events.MemoryEventBus.PublishAsync``1(``0,System.Action{``0,System.Boolean,System.Exception},System.Nullable{System.TimeSpan})">
            <summary>
            显式的异步发布事件,不需要为处理程序加HandlesAsynchronouslyAttribute
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="event">具体事件执行者</param>
            <param name="callback">回调</param>
            <param name="timeout">超时</param>
        </member>
        <member name="F:Lind.DDD.Events.RedisEventBus._objLock">
            <summary>
            模式锁
            </summary>
        </member>
        <member name="F:Lind.DDD.Events.RedisEventBus._redisClient">
            <summary>
            对于事件数据的存储，目前采用内存字典
            </summary>
        </member>
        <member name="M:Lind.DDD.Events.RedisEventBus.GetCurrentRedisKey``1">
            <summary>
            得到当前redis-eventbus-key
            </summary>
            <typeparam name="TEvent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Events.RedisEventBus.Subscribe``1(Lind.DDD.Events.IEventHandler{``0})">
            <summary>
            订阅事件列表
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Lind.DDD.Events.RedisEventBus.Subscribe``1(System.Action{``0})">
            <summary>
            订阅事件实体
            装饰模式
            </summary>
            <param name="type"></param>
            <param name="subTypeList"></param>
        </member>
        <member name="M:Lind.DDD.Events.RedisEventBus.Unsubscribe``1(Lind.DDD.Events.IEventHandler{``0})">
            <summary>
            取消订阅事件
            </summary>
            <param name="type"></param>
            <param name="subType"></param>
        </member>
        <member name="M:Lind.DDD.Events.RedisEventBus.UnsubscribeAll``1">
            <summary>
            取消指定事件的所有订阅
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="eventHandlerFunc"></param>
        </member>
        <member name="M:Lind.DDD.Events.RedisEventBus.UnsubscribeAll">
            <summary>
            取消所有事件的所有订阅
            </summary>
        </member>
        <member name="M:Lind.DDD.Events.RedisEventBus.Publish``1(``0)">
            <summary>
            发布事件，支持异步事件
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="evnt"></param>
        </member>
        <member name="M:Lind.DDD.Events.RedisEventBus.Publish``1(``0,System.Action{``0,System.Boolean,System.Exception},System.Nullable{System.TimeSpan})">
            <summary>
            发布事件
            event参数为关键字,所以加了@符
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="event"></param>
            <param name="callback"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Lind.DDD.Events.RedisEventBus.PublishAsync``1(``0)">
            <summary>
            显式的异步发布事件,不需要为处理程序加HandlesAsynchronouslyAttribute
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="event">具体事件执行者</param>
        </member>
        <member name="M:Lind.DDD.Events.RedisEventBus.PublishAsync``1(``0,System.Action{``0,System.Boolean,System.Exception},System.Nullable{System.TimeSpan})">
            <summary>
            显式的异步发布事件,不需要为处理程序加HandlesAsynchronouslyAttribute
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="event">具体事件执行者</param>
            <param name="callback">回调</param>
            <param name="timeout">超时</param>
        </member>
        <member name="T:Lind.DDD.IoC.IContainer">
            <summary>
            Base contract for locator and register dependencies
            </summary>
        </member>
        <member name="M:Lind.DDD.IoC.IContainer.Resolve``1">
            <summary>
            Solve TService dependency
            </summary>
            <typeparam name="TService">Type of dependency</typeparam>
            <returns>instance of TService</returns>
        </member>
        <member name="M:Lind.DDD.IoC.IContainer.Resolve(System.Type)">
            <summary>
            Solve type construction and return the object as a TService instance
            </summary>
            <returns>instance of this type</returns>
        </member>
        <member name="M:Lind.DDD.IoC.IContainer.RegisterType(System.Type)">
            <summary>
            Register type into service locator
            </summary>
            <param name="type">Type to register</param>
        </member>
        <member name="T:Lind.DDD.IoC.Interception.ExceptionLoggingBehavior">
            <summary>
            拦截器实例，具体拦截器可以自己去建立项目来实现，需要实现IInterceptionBehavior接口
            表示用于异常日志记录的拦截行为。
            </summary>
        </member>
        <member name="T:Lind.DDD.IoC.Interception.InterceptionBase">
            <summary>
            拦截器抽象基类
            实现拦截器的项目需要继承此类，只引用Microsoft.Practices.Unity.Interception.dll程序集
            </summary>
        </member>
        <member name="M:Lind.DDD.IoC.Interception.InterceptionBase.GetRequiredInterfaces">
            <summary>
            获取当前行为需要拦截的对象类型接口。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IoC.Interception.InterceptionBase.Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.GetNextInterceptionBehaviorDelegate)">
             <summary>
            通过实现此方法来拦截调用并执行所需的拦截行为。
             </summary>
             <param name="input">调用拦截目标时的输入信息</param>
             <param name="getNext">通过行为链来获取下一个拦截行为的委托</param>
             <returns>从拦截目标获得的返回信息</returns>
        </member>
        <member name="P:Lind.DDD.IoC.Interception.InterceptionBase.WillExecute">
            <summary>
            获取一个<see cref="T:System.Boolean"/>值，该值表示当前拦截行为被调用时，是否真的需要执行拦截动作
            </summary>
        </member>
        <member name="M:Lind.DDD.IoC.Interception.ExceptionLoggingBehavior.Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.GetNextInterceptionBehaviorDelegate)">
            <summary>
            通过实现此方法来拦截调用并执行所需的拦截行为。
            </summary>
            <param name="input">调用拦截目标时的输入信息。</param>
            <param name="getNext">通过行为链来获取下一个拦截行为的委托。</param>
            <returns>从拦截目标获得的返回信息。</returns>
        </member>
        <member name="T:Lind.DDD.IoC.IoCFactory">
            <summary>
            IoCFactory  implementation 
            </summary>
        </member>
        <member name="M:Lind.DDD.IoC.IoCFactory.#cctor">
            <summary>
            Only for singleton pattern, remove before field init IL anotation
            </summary>
        </member>
        <member name="P:Lind.DDD.IoC.IoCFactory.Instance">
            <summary>
            Get singleton instance of IoCFactory
            </summary>
        </member>
        <member name="P:Lind.DDD.IoC.IoCFactory.CurrentContainer">
            <summary>
            Get current configured IContainer
            <remarks>
            At this moment only IoCUnityContainer exists
            </remarks>
            </summary>
        </member>
        <member name="T:Lind.DDD.IoC.ServiceLocator">
            <summary>
            Represents the Service Locator.
            </summary>
        </member>
        <member name="M:Lind.DDD.IoC.ServiceLocator.#ctor">
            <summary>
            Initializes a new instance of ServiceLocator class.
            </summary>
        </member>
        <member name="M:Lind.DDD.IoC.ServiceLocator.LoadDynamicType(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            装载一批动态的类型
            Author:zhangzhanling
            Date:2015-04-03
            </summary>
        </member>
        <member name="M:Lind.DDD.IoC.ServiceLocator.GetService``1">
            <summary>
            Gets the service instance with the given type.
            </summary>
            <typeparam name="T">The type of the service.</typeparam>
            <returns>The service instance.</returns>
        </member>
        <member name="M:Lind.DDD.IoC.ServiceLocator.GetService``1(System.Object)">
            <summary>
            Gets the service instance with the given type by using the overrided arguments.
            </summary>
            <typeparam name="T">The type of the service.</typeparam>
            <param name="overridedArguments">The overrided arguments.</param>
            <returns>The service instance.</returns>
        </member>
        <member name="M:Lind.DDD.IoC.ServiceLocator.GetService(System.Type,System.Object)">
            <summary>
            Gets the service instance with the given type by using the overrided arguments.
            </summary>
            <param name="serviceType">The type of the service.</param>
            <param name="overridedArguments">The overrided arguments.</param>
            <returns>The service instance.</returns>
        </member>
        <member name="M:Lind.DDD.IoC.ServiceLocator.GetService(System.Type)">
            <summary>
            Gets the service instance with the given type.
            </summary>
            <param name="serviceType">The type of the service.</param>
            <returns>The service instance.</returns>
        </member>
        <member name="P:Lind.DDD.IoC.ServiceLocator.Instance">
            <summary>
            Gets the singleton instance of the ServiceLocator class.
            </summary>
        </member>
        <member name="T:Lind.DDD.IoC.Unity.IoCUnityContainer">
            <summary>
            Implemented container in Microsoft Practices Unity
            </summary>
        </member>
        <member name="M:Lind.DDD.IoC.Unity.IoCUnityContainer.#ctor">
            <summary>
            Create a new instance of IoCUnitContainer
            </summary>
        </member>
        <member name="M:Lind.DDD.IoC.Unity.IoCUnityContainer.ConfigureRootContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Configure root container.Register types and life time managers for unity builder process
            </summary>
            <param name="container">Container to configure</param>
        </member>
        <member name="M:Lind.DDD.IoC.Unity.IoCUnityContainer.ConfigureRealContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Configure real container. Register types and life time managers for unity builder process
            真实运营环境
            </summary>
            <param name="container">Container to configure</param>
        </member>
        <member name="M:Lind.DDD.IoC.Unity.IoCUnityContainer.ConfigureFakeContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Configure fake container.Register types and life time managers for unity builder process
            测试环境
            </summary>
            <param name="container">Container to configure</param>
        </member>
        <member name="M:Lind.DDD.IoC.Unity.IoCUnityContainer.Resolve``1">
            <summary>
            <see cref="M:Microsoft.Samples.NLayerApp.Infrastructure.CrossCutting.IoC.IContainer.Resolve{TService}"/>
            </summary>
            <typeparam name="TService"><see cref="M:Microsoft.Samples.NLayerApp.Infrastructure.CrossCutting.IoC.IContainer.Resolve{TService}"/></typeparam>
            <returns><see cref="M:Microsoft.Samples.NLayerApp.Infrastructure.CrossCutting.IoC.IContainer.Resolve{TService}"/></returns>
        </member>
        <member name="M:Lind.DDD.IoC.Unity.IoCUnityContainer.Resolve(System.Type)">
            <summary>
            <see cref="M:Microsoft.Samples.NLayerApp.Infrastructure.CrossCutting.IoC.IContainer.Resolve"/>
            </summary>
            <param name="type"><see cref="M:Microsoft.Samples.NLayerApp.Infrastructure.CrossCutting.IoC.IContainer.Resolve"/></param>
            <returns><see cref="M:Microsoft.Samples.NLayerApp.Infrastructure.CrossCutting.IoC.IContainer.Resolve"/></returns>
        </member>
        <member name="M:Lind.DDD.IoC.Unity.IoCUnityContainer.RegisterType(System.Type)">
            <summary>
            <see cref="M:Microsoft.Samples.NLayerApp.Infrastructure.CrossCutting.IoC.IContainer.RegisterType"/>
            </summary>
            <param name="type"><see cref="M:Microsoft.Samples.NLayerApp.Infrastructure.CrossCutting.IoC.IContainer.RegisterType"/></param>
        </member>
        <member name="T:Lind.DDD.IoC.Utils">
            <summary>
            表示用于整个Byteart Retail系统的工具类。
            </summary>
        </member>
        <member name="M:Lind.DDD.IoC.Utils.Log(System.String)">
            <summary>
            将指定的字符串信息写入日志。
            </summary>
            <param name="message">需要写入日志的字符串信息。</param>
        </member>
        <member name="M:Lind.DDD.IoC.Utils.Log(System.Exception)">
            <summary>
            将指定的<see cref="T:System.Exception"/>实例详细信息写入日志。
            </summary>
            <param name="ex">需要将详细信息写入日志的<see cref="T:System.Exception"/>实例。</param>
        </member>
        <member name="T:System.Linq.DbCommandInterceptorExtensions">
            <summary>
            DbCommand拦截器扩展
            </summary>
        </member>
        <member name="M:System.Linq.DbCommandInterceptorExtensions.UsingSingletonInterceptor(System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor)">
            <summary>
            将DbCommand的拦截器以单例的形式添加到DbInterception静态对象中
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:Lind.DDD.IRepositories.Commons.IOrderable`1">
            <summary>
            排序规范
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Lind.DDD.IRepositories.Commons.IOrderable`1.Asc``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            递增
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.Commons.IOrderable`1.ThenAsc``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            然后递增
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <param name="keySelector1"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.Commons.IOrderable`1.Desc``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            递减
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.Commons.IOrderable`1.ThenDesc``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            然后递减
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="P:Lind.DDD.IRepositories.Commons.IOrderable`1.Queryable">
            <summary>
            排序后的结果集
            </summary>
        </member>
        <member name="T:System.Linq.IQueryableExtensions">
            <summary>
            Class for IQuerable extensions methods
            <remarks>
            Include method in IQueryable ( base contract for IObjectSet ) is 
            intended for mock Include method in ObjectQuery{T}.
            Paginate solve not parametrized queries issues with skip and take L2E methods
            </remarks>
            </summary>
        </member>
        <member name="F:System.Linq.IQueryableExtensions.DATAPAGESIZE">
            <summary>
            每次处理的记录数据
            </summary>
        </member>
        <member name="M:System.Linq.IQueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Include method for IQueryable
            </summary>
            <typeparam name="TEntity">Type of elements</typeparam>
            <param name="queryable">Queryable object</param>
            <param name="path">Path to include</param>
            <returns>Queryable object with include path information</returns>
        </member>
        <member name="M:System.Linq.IQueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Include extension method for IQueryable
            </summary>
            <typeparam name="TEntity">Type of elements in IQueryable</typeparam>
            <param name="queryable">Queryable object</param>
            <param name="path">Expression with path to include</param>
            <returns>Queryable object with include path information</returns>
        </member>
        <member name="M:System.Linq.IQueryableExtensions.Paginate``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Paginate query in a specific page range
            </summary>
            <typeparam name="TEntity">Typeof entity in underlying query</typeparam>
            <typeparam name="S">Typeof ordered data value</typeparam>
            <param name="queryable">Query to paginate</param>
            <param name="orderBy">Order by expression used in paginate method
            <remarks>
            At this moment Order by expression only support simple order by c=>c.CustomerCode. If you need
            add more complex order functionality don't use this extension method
            </remarks>
            </param>
            <param name="pageIndex">Page index</param>
            <param name="pageCount">Page count</param>
            <param name="ascending">order direction</param>
            <returns>A paged queryable</returns>
        </member>
        <member name="M:System.Linq.IQueryableExtensions.QueryablePageProcess``1(System.Linq.IQueryable{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            对iqueryable结果每次分批ToList，防止大数量时的内存占用过高的问题
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="queryable"></param>
            <param name="method"></param>
        </member>
        <member name="M:System.Linq.IQueryableExtensions.EnumerablePageProcess``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            对IEnumerable,IList,ICollection等本地结果集分批处理
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="enumerable"></param>
            <param name="method"></param>
        </member>
        <member name="M:System.Linq.IQueryableExtensions.AnalyzeExpressionPath``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            返回lambda表达示所对应的字符，骨时会出现异常
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.IQueryableExtensions.DataPageProcessAsync``1(System.Linq.IQueryable{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            并行分页处理数据，提高系统利用率，提升系统性能
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="item"></param>
            <param name="method"></param>
        </member>
        <member name="M:System.Linq.IQueryableExtensions.DataPageProcess``1(System.Linq.IQueryable{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            在主线程上分页处理数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <param name="method"></param>
        </member>
        <member name="T:System.Linq.ObjectContextExtensions">
            <summary>
             ObjectContext扩展方法
            </summary>
        </member>
        <member name="M:System.Linq.ObjectContextExtensions.GetEntitySet(System.Data.Entity.Core.Objects.ObjectContext,System.Type)">
            <summary>
            得到实体键
            </summary>
            <param name="context"></param>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.ObjectContextExtensions.GetPK``1">
            <summary>
            需要为主键属性添加Key特性
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.IRepositories.Commons.Orderable`1">
            <summary>
            Linq架构里对集合排序实现
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Lind.DDD.IRepositories.Commons.Orderable`1.#ctor(System.Linq.IQueryable{`0})">
            <summary>
            排序后的结果集
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="M:Lind.DDD.IRepositories.Commons.Orderable`1.Asc``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            递增
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.Commons.Orderable`1.ThenAsc``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            然后递增
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.Commons.Orderable`1.Desc``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            递减
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.Commons.Orderable`1.ThenDesc``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            然后递减
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="P:Lind.DDD.IRepositories.Commons.Orderable`1.Queryable">
            <summary>
            排序之后的结果集
            </summary>
        </member>
        <member name="T:Lind.DDD.IRepositories.Commons.OrderType">
            <summary>
            排序方式:0 升序，1 降序
            </summary>
        </member>
        <member name="F:Lind.DDD.IRepositories.Commons.OrderType.Asc">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:Lind.DDD.IRepositories.Commons.OrderType.Desc">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:Lind.DDD.IRepositories.Commons.SaveAction">
            <summary>
            Specifies the kind of save action
            </summary>
        </member>
        <member name="F:Lind.DDD.IRepositories.Commons.SaveAction.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Lind.DDD.IRepositories.Commons.SaveAction.Insert">
            <summary>
            Insert
            </summary>
        </member>
        <member name="F:Lind.DDD.IRepositories.Commons.SaveAction.Update">
            <summary>
            Update
            </summary>
        </member>
        <member name="F:Lind.DDD.IRepositories.Commons.SaveAction.Delete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="T:Lind.DDD.IRepositories.Commons.SavedEventArgs">
            <summary>
            The arguments of saved event
            </summary>
        </member>
        <member name="M:Lind.DDD.IRepositories.Commons.SavedEventArgs.#ctor(System.Object,Lind.DDD.IRepositories.Commons.SaveAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Lind.DDD.IRepositories.Commons.SavedEventArgs"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="action">The action.</param>
        </member>
        <member name="P:Lind.DDD.IRepositories.Commons.SavedEventArgs.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Lind.DDD.IRepositories.Commons.SavedEventArgs.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="T:System.Linq.SqlFunctionExtensions">
            <summary>
            sql函数的扩展类
            </summary>
        </member>
        <member name="M:System.Linq.SqlFunctionExtensions.NewId">
            <summary>
            在linq to entity中使用SqlServer.NEWID函数
            </summary>
        </member>
        <member name="M:System.Linq.SqlFunctionExtensions.OrderByNewId``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            随机排序扩展方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.IRepositories.DistributedReadWriteForEF.DistributedReadWriteManager">
            <summary>
            redis配置信息加载
            </summary>
        </member>
        <member name="P:Lind.DDD.IRepositories.DistributedReadWriteForEF.DistributedReadWriteManager.Instance">
            <summary>
            配置信息实体
            </summary>
        </member>
        <member name="T:Lind.DDD.IRepositories.DistributedReadWriteForEF.DistributedReadWriteSection">
            <summary>
            DistributedReadWriteForEFSection块，在web.config中提供DistributedReadWriteForEFSection块定义
            </summary>
        </member>
        <member name="P:Lind.DDD.IRepositories.DistributedReadWriteForEF.DistributedReadWriteSection.Ip">
            <summary>
            主机地址
            </summary>
        </member>
        <member name="P:Lind.DDD.IRepositories.DistributedReadWriteForEF.DistributedReadWriteSection.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:Lind.DDD.IRepositories.DistributedReadWriteForEF.DistributedReadWriteSection.DbName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:Lind.DDD.IRepositories.DistributedReadWriteForEF.DistributedReadWriteSection.UserId">
            <summary>
            数据库账号
            </summary>
        </member>
        <member name="P:Lind.DDD.IRepositories.DistributedReadWriteForEF.DistributedReadWriteSection.Password">
            <summary>
            数据库账号
            </summary>
        </member>
        <member name="T:Lind.DDD.IRepositories.DistributedReadWriteForEF.DistributedReadWriteSectionHandler">
            <summary>
            Section处理程序
            </summary>
        </member>
        <!-- 对于成员“T:Lind.DDD.IRepositories.DistributedReadWriteForEF.ReadWriteCommandInterceptor”忽略有格式错误的 XML 注释 -->
        <member name="M:Lind.DDD.IRepositories.DistributedReadWriteForEF.ReadWriteCommandInterceptor.#ctor">
            <summary>
            实现EF的读写分离拦截器的初始化
            </summary>
        </member>
        <member name="F:Lind.DDD.IRepositories.DistributedReadWriteForEF.ReadWriteCommandInterceptor.IsTransactionScope">
            <summary>
            是否在一个事务中，如果是select,insert,update,delete都走主库
            ThreadStatic标识它只在当前线程有效
            </summary>
        </member>
        <member name="F:Lind.DDD.IRepositories.DistributedReadWriteForEF.ReadWriteCommandInterceptor.lockObj">
            <summary>
            锁住它
            </summary>
        </member>
        <member name="F:Lind.DDD.IRepositories.DistributedReadWriteForEF.ReadWriteCommandInterceptor.sysTimer">
            <summary>
            定期找没有在线的数据库服务器
            </summary>
        </member>
        <member name="F:Lind.DDD.IRepositories.DistributedReadWriteForEF.ReadWriteCommandInterceptor.readConnList">
            <summary>
            读库，从库集群，写库不用设置走默认的EF框架
            </summary>
        </member>
        <member name="F:Lind.DDD.IRepositories.DistributedReadWriteForEF.ReadWriteCommandInterceptor.readDbConnectionStr">
            <summary>
            只读数据连接串模版
            </summary>
        </member>
        <member name="M:Lind.DDD.IRepositories.DistributedReadWriteForEF.ReadWriteCommandInterceptor.GetReadConn">
            <summary>
            处理读库字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.IRepositories.DistributedReadWriteForEF.ReadWriteCommandInterceptor.ReadDbSelect(System.Data.Common.DbCommand)">
            <summary>
            只读库的选择,加工command对象
            说明：事务中,所有语句都走主库，事务外select走读库,insert,update,delete走主库
            希望：一个ＷＥＢ请求中，读与写的仓储使用一个，不需要在程序中去重新定义
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Lind.DDD.IRepositories.DistributedReadWriteForEF.ReadWriteCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})">
            <summary>
            Linq to Entity生成的update,delete
            </summary>
            <param name="command"></param>
            <param name="interceptionContext"></param>
        </member>
        <member name="M:Lind.DDD.IRepositories.DistributedReadWriteForEF.ReadWriteCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})">
            <summary>
            执行sql语句，并返回第一行第一列，没有找到返回null,如果数据库中值为null，则返回 DBNull.Value
            </summary>
            <param name="command"></param>
            <param name="interceptionContext"></param>
        </member>
        <member name="M:Lind.DDD.IRepositories.DistributedReadWriteForEF.ReadWriteCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})">
            <summary>
            Linq to Entity生成的select,insert
            发送到sqlserver之前触发
            warning:在select语句中DbCommand.Transaction为null，而ef会为每个insert添加一个DbCommand.Transaction进行包裹
            </summary>
            <param name="command"></param>
            <param name="interceptionContext"></param>
        </member>
        <member name="M:Lind.DDD.IRepositories.DistributedReadWriteForEF.ReadWriteCommandInterceptor.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})">
            <summary>
            发送到sqlserver之后触发
            </summary>
            <param name="command"></param>
            <param name="interceptionContext"></param>
        </member>
        <member name="T:System.Web.Mvc.Html.MvcExtensions">
            <summary>
            MVC扩展
            </summary>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.DisplayNameFor``1(System.Web.Mvc.HtmlHelper{Lind.DDD.Paging.PagedList{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            显示字段的名称DisplayName的值
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="html"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.DisplayEnumFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            显示枚举字段对应内容的Description
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="html"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.DropDownListEnumFor(System.Web.Mvc.HtmlHelper,System.Type)">
            <summary>
            基于枚举类型的下拉列表
            </summary>
            <param name="html">html视图上下文</param>
            <param name="@enum">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.DropDownListEnumFor(System.Web.Mvc.HtmlHelper,System.String,System.Type,System.String)">
            <summary>
            基于枚举类型的下拉列表
            </summary>
            <param name="html"></param>
            <param name="name"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.BindToTable``1(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            将分页结果集绑定到页面形成table（列表）
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="htmlHelper"></param>
            <param name="list"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.BindToTable``1(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IEnumerable{``0},Lind.DDD.Authorization.Authority,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            将分页结果集绑定到页面形成table（列表）
            </summary>
            <typeparam name="TModel">集合类型</typeparam>
            <param name="htmlHelper"></param>
            <param name="list">集合</param>
            <param name="button">需要显示的按钮</param>
            <param name="expression">要显示的字段</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.BindToForm``1(System.Web.Mvc.HtmlHelper,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            实体绑定到Form表单（添加/编辑）
            </summary>
            <typeparam name="TModel">实体类型</typeparam>
            <param name="htmlHelper">当前http</param>
            <param name="entity">实体</param>
            <param name="expression">需要显示的字段</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.BindToFormMore``1(System.Web.Mvc.HtmlHelper,``0,System.Func{System.String,System.Web.WebPages.HelperResult},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            实体绑定到Form表单（添加/编辑）
            </summary>
            <typeparam name="TModel">实体类型</typeparam>
            <param name="htmlHelper">当前http</param>
            <param name="entity">实体</param>
            <param name="template">扩展信息</param>
            <param name="expression">需要显示的字段</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.BindToDetail``1(System.Web.Mvc.HtmlHelper,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            实体绑定到Div（详细）
            </summary>
            <typeparam name="TModel">实体类型</typeparam>
            <param name="htmlHelper">当前html</param>
            <param name="entity">实体</param>
            <param name="expression">需要显示的字段</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.BindToDetailMore``1(System.Web.Mvc.HtmlHelper,``0,System.Func{System.String,System.Web.WebPages.HelperResult},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            实体绑定到Div（详细）
            </summary>
            <typeparam name="TModel">实体类型</typeparam>
            <param name="htmlHelper">当前html</param>
            <param name="entity">实体</param>
            <param name="template">扩展参数</param>
            <param name="expression">需要显示的字段</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.GeneratePagger(System.Web.Mvc.HtmlHelper,System.Int32)">
            <summary>
            生成分页脚本块
            当前页page和每页条目pagesize都在url上进行传递
            </summary>
            <param name="htmlHelper"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.ExportExcel``1(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            集合Excel导出
            </summary>
            <typeparam name="T"></typeparam>
            <param name="htmlHelper"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            复选框,selValue为选中项
            </summary>
            <param name="htmlHelper"></param>
            <param name="name"></param>
            <param name="selectList"></param>
            <param name="selValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String)">
            <summary>
            复选框,selValue为选中项
            </summary>
            <param name="htmlHelper"></param>
            <param name="name"></param>
            <param name="selectList"></param>
            <param name="selValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
            <summary>
            复选框
            </summary>
            <param name="htmlHelper"></param>
            <param name="name"></param>
            <param name="selectList"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.CheckBoxFor(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
            <summary>
            复选框
            </summary>
            <param name="htmlHelper"></param>
            <param name="name"></param>
            <param name="selectList"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.CheckBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
            <summary>
            根据列表输出checkbox
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="htmlHelper"></param>
            <param name="expression"></param>
            <param name="selectList"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.CheckBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String)">
            <summary>
             根据列表输出checkbox,selValue为默认选中的项
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="htmlHelper"></param>
            <param name="expression"></param>
            <param name="selectList"></param>
            <param name="selValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            输出单选框和复选框
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="expression"></param>
            <param name="selectList"></param>
            <param name="isRadio"></param>
            <param name="selValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String)">
            <summary>
            单选按钮组，seletList为选中项
            </summary>
            <param name="htmlHelper"></param>
            <param name="name"></param>
            <param name="selectList"></param>
            <param name="selValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
            <summary>
            单选按钮组
            </summary>
            <param name="htmlHelper"></param>
            <param name="name"></param>
            <param name="selectList"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
            <summary>
             根据列表输出radiobutton
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="htmlHelper"></param>
            <param name="expression"></param>
            <param name="selectList"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             根据列表输出radiobutton,selValue为默认选中的项
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="htmlHelper"></param>
            <param name="expression"></param>
            <param name="selectList"></param>
            <param name="selValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Mvc.Html.MvcExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String)">
            <summary>
            根据列表输出radiobutton,selValue为默认选中的项
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="htmlHelper"></param>
            <param name="expression"></param>
            <param name="selectList"></param>
            <param name="selValue"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.UoW.IUnitOfWork">
            <summary>
            工作单元
            所有数据上下文对象都应该继承它，面向仓储的上下文应该与具体实现（存储介质,ORM）无关
            </summary>
        </member>
        <member name="M:Lind.DDD.UoW.IUnitOfWork.RegisterChangeded(Lind.DDD.Domain.IEntity,Lind.DDD.UoW.SqlType,Lind.DDD.UoW.IUnitOfWorkRepository)">
            <summary>
            向工作单元中注册变更的实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="type"></param>
            <param name="repository"></param>
        </member>
        <member name="M:Lind.DDD.UoW.IUnitOfWork.RegisterChangeded(System.Collections.Generic.IEnumerable{Lind.DDD.Domain.IEntity},Lind.DDD.UoW.SqlType,Lind.DDD.UoW.IUnitOfWorkRepository)">
            <summary>
            向工作单元中注册变更的集合
            </summary>
            <param name="entity"></param>
            <param name="type"></param>
            <param name="repository"></param>
        </member>
        <member name="M:Lind.DDD.UoW.IUnitOfWork.Commit">
            <summary>
            向数据库提交变更
            </summary>
        </member>
        <member name="T:Lind.DDD.Logger.LoggerFactory">
            <summary>
            日志生产类
            Singleton模式和策略模式和工厂模式
            </summary>
        </member>
        <member name="M:Lind.DDD.Logger.LoggerFactory.#ctor">
            <summary>
            对外不能创建类的实例
            </summary>
        </member>
        <member name="F:Lind.DDD.Logger.LoggerFactory.level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:Lind.DDD.Logger.LoggerFactory.lockObj">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="F:Lind.DDD.Logger.LoggerFactory.instance">
            <summary>
            日志工厂
            </summary>
        </member>
        <member name="F:Lind.DDD.Logger.LoggerFactory.iLogger">
            <summary>
            日志提供者，只在本类中实例化
            </summary>
        </member>
        <member name="M:Lind.DDD.Logger.LoggerFactory.Logger_Timer(System.String,System.Action)">
            <summary>
            记录代码段执行时间
            </summary>
            <param name="message">消息</param>
            <param name="action">要执行的代码段</param>
        </member>
        <member name="M:Lind.DDD.Logger.LoggerFactory.Logger_Exception(System.String,System.Action)">
            <summary>
            记录代码段执行时出现的异常信息
            </summary>
            <param name="message">消息</param>
            <param name="action">要执行的代码段</param>
        </member>
        <member name="M:Lind.DDD.Logger.LoggerFactory.Logger_Debug(System.String)">
            <summary>
            Debug级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lind.DDD.Logger.LoggerFactory.Logger_Info(System.String)">
            <summary>
            Info级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lind.DDD.Logger.LoggerFactory.Logger_Warn(System.String)">
            <summary>
            Warn级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Lind.DDD.Logger.LoggerFactory.Logger_Error(System.Exception)">
            <summary>
            Error级别的日志
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Lind.DDD.Logger.LoggerFactory.Logger_Fatal(System.String)">
            <summary>
            Fatal级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Lind.DDD.Logger.LoggerFactory.Instance">
            <summary>
            单例模式的日志工厂对象
            </summary>
        </member>
        <member name="T:Lind.DDD.Logger.Implements.NormalLogger">
            <summary>
            以普通的文字流的方式写日志
            </summary>
        </member>
        <member name="T:Lind.DDD.Messaging.Implements.EmailMessageManager">
             <summary>
            Email消息服务
             </summary>
        </member>
        <member name="T:Lind.DDD.Messaging.Implements.IMessageManager">
            <summary>
            Message Interface
            Author:Lind
            </summary>
        </member>
        <member name="M:Lind.DDD.Messaging.Implements.IMessageManager.Send(System.String,System.String,System.String,System.String)">
            <summary>
            Sends a message to a channel using a content item as the recipient
            </summary>
            <param name="recipient">接收者</param>
            <param name="subject">主题</param>
            <param name="body">消息主体</param>
            <param name="serverVirtualPath">本参数可以没有，服务端模块级路径，只在xmpp中有意义</param>
        </member>
        <member name="M:Lind.DDD.Messaging.Implements.IMessageManager.Send(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String)">
            <summary>
            Sends a message to a channel using a set of content items as the recipients
            </summary>
            <param name="recipients">A set of content items to send the message to. Only one message may be sent if the channel manages it.</param>
            <param name="type">A custom string specifying what type of message is sent. Used in even handlers to define the message.</param>
            <param name="service">The name of the channel to use, e.g. "email"</param>
            <param name="properties">A set of specific properties for the channel.</param>
        </member>
        <member name="M:Lind.DDD.Messaging.Implements.IMessageManager.Send(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean,System.String)">
            <summary>
            Async Sends a message to a channel using a set of content items as the recipients
            </summary>
            <param name="recipients">A set of content items to send the message to. Only one message may be sent if the channel manages it.</param>
            <param name="type">A custom string specifying what type of message is sent. Used in even handlers to define the message.</param>
            <param name="service">The name of the channel to use, e.g. "email"</param>
            <param name="properties">A set of specific properties for the channel.</param>
            <param name="isAsync">is Async</param>
        </member>
        <member name="T:Lind.DDD.Messaging.Implements.RTXMessageManager">
            <summary>
            RTX消息服务
            </summary>
        </member>
        <!-- 对于成员“T:Lind.DDD.Messaging.Implements.SMSMessageManager”忽略有格式错误的 XML 注释 -->
        <member name="M:Lind.DDD.Messaging.Implements.SMSMessageManager.CreatSign(System.String[],System.String,System.String,System.String@)">
            <summary>
            生成校验字符串
            </summary>
            <param name="para">参数加密数组</param>
            <param name="_input_charset">编码格式</param>
            <param name="key">安全校验码</param>
            <param name="preValues">返回加密前数据</param>
            <returns>字符串URL或加密结果</returns>
        </member>
        <member name="M:Lind.DDD.Messaging.Implements.SMSMessageManager.BubbleSort(System.String[])">
            <summary>
            冒泡排序法
            按照字母序列从a到z的顺序排列
            </summary>
        </member>
        <member name="M:Lind.DDD.Messaging.Implements.SMSMessageManager.GetMD5(System.String,System.String)">
            <summary>
            与ASP兼容的MD5加密算法
            </summary>
        </member>
        <member name="M:Lind.DDD.Messaging.Implements.SMSMessageManager.PostMethod(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            简单的HTTP请求
            </summary>
            <param name="postData"></param>
            <param name="postUrl"></param>
            <param name="method"></param>
            <param name="encoder"></param>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.Messaging.MessageContext">
            <summary>
            消息实体
            </summary>
        </member>
        <member name="P:Lind.DDD.Messaging.MessageContext.Type">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="P:Lind.DDD.Messaging.MessageContext.Subject">
            <summary>
            消息头
            </summary>
        </member>
        <member name="P:Lind.DDD.Messaging.MessageContext.Body">
            <summary>
            消息正文
            </summary>
        </member>
        <member name="P:Lind.DDD.Messaging.MessageContext.Addresses">
            <summary>
            接受方地址列表
            </summary>
        </member>
        <member name="P:Lind.DDD.Messaging.MessageContext.MessagePrepared">
            <summary>
            是否处于准备发送状态
            </summary>
        </member>
        <member name="T:Lind.DDD.Messaging.MessageContextEventArgs">
            <summary>
            消息实体
            </summary>
        </member>
        <member name="P:Lind.DDD.Messaging.MessageContextEventArgs.Type">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="P:Lind.DDD.Messaging.MessageContextEventArgs.Subject">
            <summary>
            消息头
            </summary>
        </member>
        <member name="P:Lind.DDD.Messaging.MessageContextEventArgs.Body">
            <summary>
            消息正文
            </summary>
        </member>
        <member name="P:Lind.DDD.Messaging.MessageContextEventArgs.Addresses">
            <summary>
            接受方地址列表
            </summary>
        </member>
        <member name="P:Lind.DDD.Messaging.MessageContextEventArgs.MessagePrepared">
            <summary>
            是否处于准备发送状态
            </summary>
        </member>
        <member name="T:Lind.DDD.Messaging.MessageFactory">
            <summary>
            消息生产者
            具体消息生产者是单例，如Email,SMS,Rtx等
            </summary>
        </member>
        <member name="M:Lind.DDD.Messaging.MessageFactory.GetService(Lind.DDD.Messaging.MessageType)">
            <summary>
            消息工厂
            </summary>
        </member>
        <member name="T:Lind.DDD.Messaging.MessageType">
            <summary>
            消息类型:0 email,1 sms,2 rtx
            </summary>
        </member>
        <member name="F:Lind.DDD.Messaging.MessageType.Email">
            <summary>
            电子邮件
            </summary>
        </member>
        <member name="F:Lind.DDD.Messaging.MessageType.SMS">
            <summary>
            短信息
            </summary>
        </member>
        <member name="F:Lind.DDD.Messaging.MessageType.RTX">
            <summary>
            RTX实时通讯
            </summary>
        </member>
        <member name="F:Lind.DDD.Messaging.MessageType.XMPP">
            <summary>
            XMPP消息推送
            </summary>
        </member>
        <member name="T:Lind.DDD.Paging.ListPageList`1">
            <summary>
            分页通用类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Lind.DDD.Paging.PageListBase`1">
            <summary>
            分页功能基数
            </summary>
        </member>
        <member name="T:Lind.DDD.Paging.IPagedList">
            <summary>
            分页中包含的公开的属性
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.IPagedList.TotalCount">
            <summary>
            记录数
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.IPagedList.TotalPages">
            <summary>
            页数
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.IPagedList.PageIndex">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.IPagedList.PageSize">
            <summary>
            页面大小
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.IPagedList.IsPreviousPage">
            <summary>
            是否上一页
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.IPagedList.IsNextPage">
            <summary>
            是否下一页
            </summary>
        </member>
        <member name="M:Lind.DDD.Paging.PageListBase`1.#ctor">
            <summary>
            初始化分页
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.PageListBase`1.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.PageListBase`1.TotalCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.PageListBase`1.PageIndex">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.PageListBase`1.PageSize">
            <summary>
            每页显示多少条记录
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.PageListBase`1.IsPreviousPage">
            <summary>
            是否有上一页
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.PageListBase`1.IsNextPage">
            <summary>
            是否有下一页
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.PageListBase`1.AddParameters">
            <summary>
            分页参数
            </summary>
        </member>
        <member name="M:Lind.DDD.Paging.ListPageList`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary>
            数据源为IQueryable的范型
            </summary>
            <param name="source">数据源</param>
            <param name="index">当前页</param>
            <param name="pageSize">每页显示多少条记录</param>
        </member>
        <member name="T:Lind.DDD.Paging.PagedResult`1">
            <summary>
            分页结果对象，UI显示它，BLL或者DATA为它赋值
            支持所有架构,不受Iqueryable的限制
            陈晴阳开发，张占岭修改，添加了AddParameters属性，用来存储URL参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Lind.DDD.Paging.PagedResult`1.Empty">
            <summary>
            获取一个当前类型的空值。
            </summary>
        </member>
        <member name="M:Lind.DDD.Paging.PagedResult`1.#ctor">
            <summary>
            初始化一个新的<c>PagedResult{T}</c>类型的实例。
            </summary>
        </member>
        <member name="M:Lind.DDD.Paging.PagedResult`1.#ctor(System.Int64,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{`0})">
            <summary>
            初始化一个新的<c>PagedResult{T}</c>类型的实例。
            </summary>
            <param name="totalRecords">总记录数。</param>
            <param name="totalPages">页数。</param>
            <param name="pageSize">页面大小。</param>
            <param name="pageNumber">页码。</param>
            <param name="data">当前页面的数据。</param>
        </member>
        <member name="M:Lind.DDD.Paging.PagedResult`1.Equals(System.Object)">
            <summary>
            确定指定的Object是否等于当前的Object。
            </summary>
            <param name="obj">要与当前对象进行比较的对象。</param>
            <returns>如果指定的Object与当前Object相等，则返回true，否则返回false。</returns>
            <remarks>有关此函数的更多信息，请参见：http://msdn.microsoft.com/zh-cn/library/system.object.equals。
            </remarks>
        </member>
        <member name="M:Lind.DDD.Paging.PagedResult`1.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
            <returns>当前Object的哈希代码。</returns>
            <remarks>有关此函数的更多信息，请参见：http://msdn.microsoft.com/zh-cn/library/system.object.gethashcode。
            </remarks>
        </member>
        <member name="M:Lind.DDD.Paging.PagedResult`1.op_Equality(Lind.DDD.Paging.PagedResult{`0},Lind.DDD.Paging.PagedResult{`0})">
            <summary>
            确定两个对象是否相等。
            </summary>
            <param name="a">待确定的第一个对象。</param>
            <param name="b">待确定的另一个对象。</param>
            <returns>如果两者相等，则返回true，否则返回false。</returns>
        </member>
        <member name="M:Lind.DDD.Paging.PagedResult`1.op_Inequality(Lind.DDD.Paging.PagedResult{`0},Lind.DDD.Paging.PagedResult{`0})">
            <summary>
            确定两个对象是否不相等。
            </summary>
            <param name="a">待确定的第一个对象。</param>
            <param name="b">待确定的另一个对象。</param>
            <returns>如果两者不相等，则返回true，否则返回false。</returns>
        </member>
        <member name="M:Lind.DDD.Paging.PagedResult`1.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>一个可用于循环访问集合的 IEnumerator 对象。</returns>
        </member>
        <member name="M:Lind.DDD.Paging.PagedResult`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。 （继承自 IEnumerable。）
            </summary>
            <returns>一个可用于循环访问集合的 IEnumerator 对象。</returns>
        </member>
        <member name="M:Lind.DDD.Paging.PagedResult`1.Add(`0)">
            <summary>
            将某项添加到 ICollection{T} 中。
            </summary>
            <param name="item">要添加到 ICollection{T} 的对象。</param>
        </member>
        <member name="M:Lind.DDD.Paging.PagedResult`1.Clear">
            <summary>
            从 ICollection{T} 中移除所有项。
            </summary>
        </member>
        <member name="M:Lind.DDD.Paging.PagedResult`1.Contains(`0)">
            <summary>
            确定 ICollection{T} 是否包含特定值。
            </summary>
            <param name="item">要在 ICollection{T} 中定位的对象。</param>
            <returns>如果在 ICollection{T} 中找到 item，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Lind.DDD.Paging.PagedResult`1.CopyTo(`0[],System.Int32)">
            <summary>
            从特定的 Array 索引开始，将 ICollection{T} 的元素复制到一个 Array 中。
            </summary>
            <param name="array">作为从 ICollection{T} 复制的元素的目标的一维 Array。 Array 必须具有从零开始的索引。</param>
            <param name="arrayIndex">array 中从零开始的索引，从此索引处开始进行复制。</param>
        </member>
        <member name="M:Lind.DDD.Paging.PagedResult`1.Remove(`0)">
            <summary>
            从 ICollection{T} 中移除特定对象的第一个匹配项。
            </summary>
            <param name="item">要从 ICollection{T} 中移除的对象。</param>
            <returns>如果已从 ICollection{T} 中成功移除 item，则为 true；否则为 false。 如果在原始 ICollection{T} 中没有找到 item，该方法也会返回 false。 </returns>
        </member>
        <member name="P:Lind.DDD.Paging.PagedResult`1.TotalRecords">
            <summary>
            获取或设置总记录数。
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.PagedResult`1.TotalPages">
            <summary>
            获取或设置页数。
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.PagedResult`1.PageSize">
            <summary>
            获取或设置页面大小。
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.PagedResult`1.PageIndex">
            <summary>
            获取或设置页码。
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.PagedResult`1.Data">
            <summary>
            获取或设置当前页面的数据。
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.PagedResult`1.AddParameters">
            <summary>
            分页参数
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.PagedResult`1.Count">
            <summary>
            获取 ICollection{T} 中包含的元素数。
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.PagedResult`1.IsReadOnly">
            <summary>
            获取一个值，该值指示 ICollection{T} 是否为只读。
            </summary>
        </member>
        <member name="T:Lind.DDD.Paging.PagedList`1">
            <summary>
            分页通用类(传统分页)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Lind.DDD.Paging.PagedList`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary>
            数据源为IQueryable的范型
            </summary>
            <param name="source">数据源</param>
            <param name="index">当前页</param>
            <param name="pageSize">每页显示多少条记录</param>
        </member>
        <member name="T:Lind.DDD.Paging.PageListAppend`1">
            <summary>
            以追加的方式，显示内容，即从第1页开始显示N条记录
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Lind.DDD.Paging.PageListAppend`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary>
            数据源为IQueryable的范型
            </summary>
            <param name="source">数据源</param>
            <param name="index">当前页</param>
            <param name="pageSize">每页显示多少条记录</param>
        </member>
        <member name="T:Lind.DDD.Paging.PageParameters">
            <summary>
            通用分页参数 结构
            </summary>
        </member>
        <member name="M:Lind.DDD.Paging.PageParameters.#ctor(System.Int32,System.Int32)">
            <summary>
            通用分页参数结构 构造函数
            </summary>
            <param name="pageIndex">页码</param>
            <param name="pageSize">页面大小</param>
        </member>
        <member name="P:Lind.DDD.Paging.PageParameters.PageSize">
            <summary>
            页面大小
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.PageParameters.PageIndex">
            <summary>
            页码
            </summary>
        </member>
        <member name="T:Lind.DDD.Presentation.PagedResultHelper">
            <summary>
            关于PagedResult对象的分页展示
            作者：张占岭，花名：仓储大叔
            </summary>
        </member>
        <member name="M:Lind.DDD.Presentation.PagedResultHelper.AjaxPager``1(System.Web.Mvc.HtmlHelper,Lind.DDD.Paging.PagedResult{``0},System.String,System.Boolean)">
            <summary>
            AJAX分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="pagedList"></param>
            <param name="UpdateTargetId"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Presentation.PagedResultHelper.AjaxPager``1(System.Web.Mvc.HtmlHelper,Lind.DDD.Paging.PagedResult{``0},System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            AJAX分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="pagedList"></param>
            <param name="UpdateTargetId"></param>
            <param name="ActionName"></param>
            <param name="ControllerName"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Presentation.PagedResultHelper.AjaxPager``1(System.Web.Mvc.HtmlHelper,Lind.DDD.Paging.PagedResult{``0},System.String,System.String,System.String)">
            <summary>
            ajax方式，MVC路由支持的分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="pagedList"></param>
            <param name="UpdateTargetId"></param>
            <param name="ActionName"></param>
            <param name="ControllerName"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Presentation.PagedResultHelper.Pager``1(System.Web.Mvc.HtmlHelper,Lind.DDD.Paging.PagedResult{``0})">
            <summary>
            Html分页,不使用MVC路由
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="pagedList"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Presentation.PagedResultHelper.Pager``1(System.Web.Mvc.HtmlHelper,Lind.DDD.Paging.PagedResult{``0},System.Boolean,System.Boolean,System.String)">
            <summary>
            Html分页，router为true表示走MVC路由
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="pagedList"></param>
            <param name="router">路由</param>
            <param name="className">ＣＳＳ类名</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Paging.PagerHelper.AjaxPager``1(System.Web.Mvc.HtmlHelper,Lind.DDD.Paging.PagedList{``0},System.String,System.Boolean)">
            <summary>
            AJAX分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="pagedList"></param>
            <param name="UpdateTargetId"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Paging.PagerHelper.AjaxPager``1(System.Web.Mvc.HtmlHelper,Lind.DDD.Paging.PagedList{``0},System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            AJAX分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="pagedList"></param>
            <param name="UpdateTargetId"></param>
            <param name="ActionName"></param>
            <param name="ControllerName"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Paging.PagerHelper.AjaxMvcPager``1(System.Web.Mvc.HtmlHelper,Lind.DDD.Paging.PagedList{``0},System.String,System.String,System.String)">
            <summary>
            ajax方式，MVC路由支持的分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="pagedList"></param>
            <param name="UpdateTargetId"></param>
            <param name="ActionName"></param>
            <param name="ControllerName"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Paging.PagerHelper.Pager``1(System.Web.Mvc.HtmlHelper,Lind.DDD.Paging.PagedList{``0})">
            <summary>
            Html分页,不使用MVC路由
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="pagedList"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Paging.PagerHelper.Pager``1(System.Web.Mvc.HtmlHelper,Lind.DDD.Paging.PagedList{``0},System.Boolean,System.Boolean,System.String)">
            <summary>
            Html分页，router为true表示走MVC路由
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="pagedList"></param>
            <param name="router">路由</param>
            <param name="className">ＣＳＳ类名</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Paging.PagerHelper.AjaxPagerAppend``1(System.Web.Mvc.HtmlHelper,Lind.DDD.Paging.PageListAppend{``0},System.String)">
            <summary>
            ajax方法加载微薄式分页，可以在页面定义appendCss来修改分布按钮样式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="pagedList"></param>
            <param name="UpdateTargetId"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Paging.PageUI.GetPage(System.Int32,System.Int32,System.Int64)">
            <summary>
            获取分页HTML
            </summary>
            <param name="pageIndex">当前页索引</param>
            <param name="pageSize">页大小</param>
            <param name="count">总数</param>
            <returns>分页HTML</returns>
        </member>
        <member name="M:Lind.DDD.Paging.PageUI.GetPage(System.Int32,System.Int32,System.Int64,System.Web.Mvc.UrlHelper,System.String,System.String)">
            <summary>
            获取分页HTML(MVC路由的）
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="count"></param>
            <param name="action"></param>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Paging.PageUI.GetPage(System.Int32,System.Int32,System.Int64,System.Int32)">
            <summary>
            获取分页HTML
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="count"></param>
            <param name="limitMaxPages"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Paging.PageUI.GetPage(System.Int32,System.Int32,System.Int64,System.Int32,System.Web.Mvc.UrlHelper,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            获取分页HTML(MVC路由的）
            </summary>
            <param name="pageIndex">当前页索引</param>
            <param name="pageSize">每页显示记录数</param>
            <param name="count">总记录数</param>
            <param name="limitMaxPages">最大页数</param>
            <param name="url">url</param>
            <param name="action">mvc-action</param>
            <param name="controller">mvc-contrller</param>
            <param name="isDisplayCompletePage">是否显示完成分页格式</param>
            <param name="isAppend">是否为微博分页格式（记录追加方式）</param>
            <param name="className">自定义类名</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Paging.PageUI.GetTagLink(System.Int32,System.String,System.Boolean)">
            <summary>
            获取分页用的连接(不带样式)
            </summary>
            <param name="pageIndex">当前页</param>
            <param name="text">显示文字</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Paging.PageUI.GetTagLink(System.Int32,System.String,System.Web.Mvc.UrlHelper,System.String,System.String,System.Boolean)">
            <summary>
            添加ＭＶＣ路由的分页
            2012－10－18：修改AddParameters无效问题
            </summary>
            <param name="pageIndex"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Paging.PageUI.GetTagLink(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            获取分页用的连接(带样式)
            </summary>
            <param name="pageIndex">当前页</param>
            <param name="text">显示文字</param>
            <param name="className">样式</param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Paging.PageUI.GetTagLink(System.Int32,System.String,System.String,System.Web.Mvc.UrlHelper,System.String,System.String,System.Boolean)">
            <summary>
            添加ＭＶＣ路由的分页
            2012－10－18：修改AddParameters无效问题
            </summary>
            <param name="pageIndex"></param>
            <param name="text"></param>
            <param name="className"></param>
            <param name="action"></param>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="P:Lind.DDD.Paging.PageUI.PagerTheme">
            <summary>
            页码统一CSS,这是一个全局入口,控制默认状态下面pager样式,如果没有设置,则使用standardPager样式
            </summary>
        </member>
        <member name="P:Lind.DDD.Paging.PageUI.IsLoadingAjax">
            <summary>
            是否使用ajax2这种方式加载它
            </summary>
        </member>
        <member name="F:Lind.DDD.Paging.PageUI.LinkType.First">
            <summary>
            第一页
            </summary>
        </member>
        <member name="F:Lind.DDD.Paging.PageUI.LinkType.Previouse">
            <summary>
            前一页
            </summary>
        </member>
        <member name="F:Lind.DDD.Paging.PageUI.LinkType.Next">
            <summary>
            下一页
            </summary>
        </member>
        <member name="F:Lind.DDD.Paging.PageUI.LinkType.End">
            <summary>
            最后一页
            </summary>
        </member>
        <member name="F:Lind.DDD.Paging.PageUI.LinkType.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:Lind.DDD.Paging.PageUI.LinkType.Ellipsis">
            <summary>
            省略号
            </summary>
        </member>
        <member name="T:Lind.DDD.RedisClient.RedisConfigInfo">
            <summary>
            redis主要信息的配置参数
            </summary>
        </member>
        <member name="M:Lind.DDD.RedisClient.RedisConfigInfo.GetConfig">
            <summary>
            得到配置项
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.RedisClient.RedisConfigInfo.GetConfig(System.String)">
            <summary>
            得到配置项
            </summary>
            <param name="sectionName"></param>
            <returns></returns>
        </member>
        <member name="P:Lind.DDD.RedisClient.RedisConfigInfo.WriteServerList">
            <summary>
             负责写入的Redis链接地址，一般为一个服务器，我们称为主服务器
            </summary>
        </member>
        <member name="P:Lind.DDD.RedisClient.RedisConfigInfo.ReadServerList">
            <summary>
            负责读的Redis链接地址，它一般由多个服务器组件，一般称为从服务器(slave)，各个服务器之间用逗号分开
            </summary>
        </member>
        <member name="P:Lind.DDD.RedisClient.RedisConfigInfo.MaxWritePoolSize">
            <summary>
            最大写链接数
            </summary>
        </member>
        <member name="P:Lind.DDD.RedisClient.RedisConfigInfo.MaxReadPoolSize">
            <summary>
            最大读链接数
            </summary>
        </member>
        <member name="P:Lind.DDD.RedisClient.RedisConfigInfo.AutoStart">
            <summary>
            自动重启
            </summary>
        </member>
        <member name="T:Lind.DDD.RedisClient.RedisManager">
            <summary>
            redis管理者
            </summary>
        </member>
        <member name="F:Lind.DDD.RedisClient.RedisManager.prcm">
            <summary>
            redis线程池
            </summary>
        </member>
        <member name="M:Lind.DDD.RedisClient.RedisManager.#cctor">
            <summary>
            静态构造方法，初始化链接池管理对象
            </summary>
        </member>
        <member name="M:Lind.DDD.RedisClient.RedisManager.CreateManager">
            <summary>
            创建链接池管理对象
            </summary>
        </member>
        <member name="M:Lind.DDD.RedisClient.RedisManager.SplitString(System.String,System.String)">
            <summary>
            字符到数组
            </summary>
            <param name="strSource"></param>
            <param name="split"></param>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.RedisClient.RedisManager.GetClient">
            <summary>
            客户端缓存操作对象
            </summary>
        </member>
        <member name="T:Lind.DDD.Specification.DirectSpecification`1">
            <summary>
            构建一个表达示树
            </summary>
            <typeparam name="TEntity">Type of entity that check this specification</typeparam>
        </member>
        <member name="T:Lind.DDD.Specification.Specification`1">
            <summary>
             Represent a Expression Specification
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Lind.DDD.Specification.ISpecification`1">
            <summary>
            Base contract for Specification pattern, for more information
            about this pattern see http://martinfowler.com/apsupp/spec.pdf
            or http://en.wikipedia.org/wiki/Specification_pattern.
            This is really a variant implementation where we have added Linq and
            lambda expression into this pattern.
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
        </member>
        <member name="M:Lind.DDD.Specification.ISpecification`1.SatisfiedBy">
            <summary>
            Check if this specification is satisfied by a 
            specific expression lambda
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lind.DDD.Specification.Specification`1.SatisfiedBy">
            <summary>
            IsSatisFied Specification pattern method,
            </summary>
            <returns>Expression that satisfy this specification</returns>
        </member>
        <member name="M:Lind.DDD.Specification.Specification`1.op_BitwiseAnd(Lind.DDD.Specification.Specification{`0},Lind.DDD.Specification.Specification{`0})">
            <summary>
             And operator
            </summary>
            <param name="leftSideSpecification">left operand in this AND operation</param>
            <param name="rightSideSpecification">right operand in this AND operation</param>
            <returns>New specification</returns>
        </member>
        <member name="M:Lind.DDD.Specification.Specification`1.op_BitwiseOr(Lind.DDD.Specification.Specification{`0},Lind.DDD.Specification.Specification{`0})">
            <summary>
            Or operator
            </summary>
            <param name="leftSideSpecification">left operand in this OR operation</param>
            <param name="rightSideSpecification">left operand in this OR operation</param>
            <returns>New specification </returns>
        </member>
        <member name="M:Lind.DDD.Specification.Specification`1.op_LogicalNot(Lind.DDD.Specification.Specification{`0})">
            <summary>
            Not specification
            </summary>
            <param name="specification">Specification to negate</param>
            <returns>New specification</returns>
        </member>
        <member name="M:Lind.DDD.Specification.Specification`1.op_False(Lind.DDD.Specification.Specification{`0})">
            <summary>
            Override operator false, only for support AND OR operators
            </summary>
            <param name="specification">Specification instance</param>
            <returns>See False operator in C#</returns>
        </member>
        <member name="M:Lind.DDD.Specification.Specification`1.op_True(Lind.DDD.Specification.Specification{`0})">
            <summary>
            Override operator True, only for support AND OR operators
            </summary>
            <param name="specification">Specification instance</param>
            <returns>See True operator in C#</returns>
        </member>
        <member name="M:Lind.DDD.Specification.DirectSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Default constructor for Direct Specification
            </summary>
            <param name="matchingCriteria">A Matching Criteria</param>
        </member>
        <member name="M:Lind.DDD.Specification.DirectSpecification`1.SatisfiedBy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lind.DDD.Specification.AndSpecification`1">
            <summary>
            A logic AND Specification
            </summary>
            <typeparam name="T">Type of entity that check this specification</typeparam>
        </member>
        <member name="T:Lind.DDD.Specification.CompositeSpecification`1">
            <summary>
            Base class for composite specifications
            </summary>
            <typeparam name="TEntity">Type of entity that check this specification</typeparam>
        </member>
        <member name="P:Lind.DDD.Specification.CompositeSpecification`1.LeftSideSpecification">
            <summary>
            Left side specification for this composite element
            </summary>
        </member>
        <member name="P:Lind.DDD.Specification.CompositeSpecification`1.RightSideSpecification">
            <summary>
            Right side specification for this composite element
            </summary>
        </member>
        <member name="M:Lind.DDD.Specification.AndSpecification`1.#ctor(Lind.DDD.Specification.ISpecification{`0},Lind.DDD.Specification.ISpecification{`0})">
            <summary>
            Default constructor for AndSpecification
            </summary>
            <param name="leftSide">Left side specification</param>
            <param name="rightSide">Right side specification</param>
        </member>
        <member name="M:Lind.DDD.Specification.AndSpecification`1.SatisfiedBy">
            <summary>
            <see cref="!:Domain.Specification.Core.ISpecification&lt;T&gt;"/>
            </summary>
            <returns><see cref="!:Domain.Specification.Core.ISpecification&lt;T&gt;"/></returns>
        </member>
        <member name="P:Lind.DDD.Specification.AndSpecification`1.LeftSideSpecification">
            <summary>
            Left side specification
            </summary>
        </member>
        <member name="P:Lind.DDD.Specification.AndSpecification`1.RightSideSpecification">
            <summary>
            Right side specification
            </summary>
        </member>
        <member name="T:Lind.DDD.Specification.ExpressionBuilder">
            <summary>
            Extension methods for add And and Or with parameters rebinder
            </summary>
        </member>
        <member name="M:Lind.DDD.Specification.ExpressionBuilder.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Compose two expression and merge all in a new expression
            </summary>
            <typeparam name="T">Type of params in expression</typeparam>
            <param name="first">Expression instance</param>
            <param name="second">Expression to merge</param>
            <param name="merge">Function to merge</param>
            <returns>New merged expressions</returns>
        </member>
        <member name="M:Lind.DDD.Specification.ExpressionBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            And operator
            </summary>
            <typeparam name="T">Type of params in expression</typeparam>
            <param name="first">Right Expression in AND operation</param>
            <param name="second">Left Expression in And operation</param>
            <returns>New AND expression</returns>
        </member>
        <member name="M:Lind.DDD.Specification.ExpressionBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Or operator
            </summary>
            <typeparam name="T">Type of param in expression</typeparam>
            <param name="first">Right expression in OR operation</param>
            <param name="second">Left expression in OR operation</param>
            <returns>New Or expressions</returns>
        </member>
        <member name="T:Lind.DDD.Specification.NotSpecification`1">
            <summary>
            NotEspecification convert a original
            specification with NOT logic operator
            </summary>
            <typeparam name="TEntity">Type of element for this specificaiton</typeparam>
        </member>
        <member name="M:Lind.DDD.Specification.NotSpecification`1.#ctor(Lind.DDD.Specification.ISpecification{`0})">
            <summary>
            Constructor for NotSpecificaiton
            </summary>
            <param name="originalSpecification">Original specification</param>
        </member>
        <member name="M:Lind.DDD.Specification.NotSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Constructor for NotSpecification
            </summary>
            <param name="originalSpecification">Original specificaiton</param>
        </member>
        <member name="M:Lind.DDD.Specification.NotSpecification`1.SatisfiedBy">
            <summary>
            <see cref="!:Domain.Specification.Core.ISpecification&lt;TEntity&gt;"/>
            </summary>
            <returns><see cref="!:Domain.Specification.Core.ISpecification&lt;TEntity&gt;"/></returns>
        </member>
        <member name="T:Lind.DDD.Specification.OrSpecification`1">
            <summary>
            A Logic OR Specification
            </summary>
            <typeparam name="T">Type of entity that check this specification</typeparam>
        </member>
        <member name="M:Lind.DDD.Specification.OrSpecification`1.#ctor(Lind.DDD.Specification.ISpecification{`0},Lind.DDD.Specification.ISpecification{`0})">
            <summary>
            Default constructor for AndSpecification
            </summary>
            <param name="leftSide">Left side specification</param>
            <param name="rightSide">Right side specification</param>
        </member>
        <member name="M:Lind.DDD.Specification.OrSpecification`1.SatisfiedBy">
            <summary>
            <see cref="!:Domain.Specification.Core.ISpecification&lt;T&gt;"/>
            </summary>
            <returns><see cref="!:Domain.Specification.Core.ISpecification&lt;T&gt;"/></returns>
        </member>
        <member name="P:Lind.DDD.Specification.OrSpecification`1.LeftSideSpecification">
            <summary>
            Left side specification
            </summary>
        </member>
        <member name="P:Lind.DDD.Specification.OrSpecification`1.RightSideSpecification">
            <summary>
            Righ side specification
            </summary>
        </member>
        <member name="T:Lind.DDD.Specification.ParameterRebinder">
            <summary>
            Helper for rebinder parameters without use Invoke method in expressions 
            ( this methods is not supported in all linq query providers, 
            for example in Linq2Entities is not supported)
            </summary>
        </member>
        <member name="M:Lind.DDD.Specification.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            Default construcotr
            </summary>
            <param name="map">Map specification</param>
        </member>
        <member name="M:Lind.DDD.Specification.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            Replate parameters in expression with a Map information
            </summary>
            <param name="map">Map information</param>
            <param name="exp">Expression to replace parameters</param>
            <returns>Expression with parameters replaced</returns>
        </member>
        <member name="M:Lind.DDD.Specification.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visit pattern method
            </summary>
            <param name="p">A Parameter expression</param>
            <returns>New visited expression</returns>
        </member>
        <member name="T:Lind.DDD.Specification.TrueSpecification`1">
            <summary>
            返回的表达式树默认为true的规约
            </summary>
            <typeparam name="TEntity">Type of entity in this specification</typeparam>
        </member>
        <member name="M:Lind.DDD.Specification.TrueSpecification`1.SatisfiedBy">
            <summary>
            <see cref="!: Domain.Specification.Core.Specification&lt;TEntity&gt;"/>
            </summary>
            <returns><see cref="!: Domain.Specification.Core.Specification&lt;TEntity&gt;"/></returns>
        </member>
        <member name="T:Lind.DDD.UoW.UnitOfWork">
            <summary>
            工作单元，主要用于管理事务性操作
            Author:Lind.zhang
            </summary>
        </member>
        <member name="F:Lind.DDD.UoW.UnitOfWork.insertEntities">
            <summary>
            操作行为字典
            </summary>
        </member>
        <member name="M:Lind.DDD.UoW.UnitOfWork.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Lind.DDD.UoW.UnitOfWork.Commit">
            <summary>
            事务提交
            </summary>
        </member>
        <member name="M:Lind.DDD.UoW.UnitOfWork.RegisterChangeded(Lind.DDD.Domain.IEntity,Lind.DDD.UoW.SqlType,Lind.DDD.UoW.IUnitOfWorkRepository)">
            <summary>
            注册数据变更实体
            </summary>
            <param name="entity"></param>
            <param name="type"></param>
            <param name="repository"></param>
        </member>
        <member name="M:Lind.DDD.UoW.UnitOfWork.RegisterChangeded(System.Collections.Generic.IEnumerable{Lind.DDD.Domain.IEntity},Lind.DDD.UoW.SqlType,Lind.DDD.UoW.IUnitOfWorkRepository)">
            <summary>
            注册数据变更集合
            </summary>
            <param name="list"></param>
            <param name="type"></param>
            <param name="repository"></param>
        </member>
        <member name="T:Lind.DDD.UoW.SqlType">
            <summary>
            SQL操作方式
            </summary>
        </member>
        <member name="T:Lind.DDD.Utils.WebConfig">
            <summary>
            配置config文件读取类
            </summary>
        </member>
        <member name="M:Lind.DDD.Utils.WebConfig.GetWebConfig(System.String,System.String)">
            <summary>
            获取webconfig中的参数
            </summary>
            <param name="strKey"></param>
            <param name="strDefault"></param>
            <returns></returns>
        </member>
    </members>
</doc>
